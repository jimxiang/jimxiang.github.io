{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/NexT/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/NexT/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1490187431000},{"_id":"themes/NexT/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1490187431000},{"_id":"themes/NexT/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1490187431000},{"_id":"themes/NexT/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1490187431000},{"_id":"themes/NexT/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1490187431000},{"_id":"themes/NexT/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1490187431000},{"_id":"themes/NexT/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1490187431000},{"_id":"themes/NexT/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1490187431000},{"_id":"themes/NexT/_config.yml","hash":"c48eef31aa1a47b3c3cefbfb3e4d51508ad81171","modified":1490187431000},{"_id":"themes/NexT/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1490187431000},{"_id":"themes/NexT/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1490187431000},{"_id":"themes/NexT/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1490187431000},{"_id":"source/favicon.ico","hash":"0c176b1184eebc820b03311907458c8914b18c26","modified":1490187431000},{"_id":"themes/NexT/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1490187431000},{"_id":"themes/NexT/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1490187431000},{"_id":"themes/NexT/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1490187431000},{"_id":"themes/NexT/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1490187431000},{"_id":"themes/NexT/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1490187431000},{"_id":"themes/NexT/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1490187431000},{"_id":"themes/NexT/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1490187431000},{"_id":"themes/NexT/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1490187431000},{"_id":"themes/NexT/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1490187431000},{"_id":"themes/NexT/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1490187431000},{"_id":"themes/NexT/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1490187431000},{"_id":"themes/NexT/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1490187431000},{"_id":"themes/NexT/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1490187431000},{"_id":"themes/NexT/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1490187431000},{"_id":"themes/NexT/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1490187431000},{"_id":"themes/NexT/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1490187431000},{"_id":"themes/NexT/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1490187431000},{"_id":"themes/NexT/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1490187431000},{"_id":"themes/NexT/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1490187431000},{"_id":"themes/NexT/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1490187431000},{"_id":"themes/NexT/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1490187431000},{"_id":"themes/NexT/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1490187431000},{"_id":"themes/NexT/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1490187431000},{"_id":"themes/NexT/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1490187431000},{"_id":"source/_posts/Design-Patterns.md","hash":"e3956ae5223fa0855865144cdbf30de81fbc180f","modified":1490187431000},{"_id":"source/_posts/How-to-build-your-owner-blog-with-HEXO.md","hash":"939a3274719101927d66f8bfcb8fe75da41b7941","modified":1490187431000},{"_id":"source/_posts/JavaScript学习笔记-3.md","hash":"ac25bde623201524c60681618d0e911b81555a1b","modified":1490187431000},{"_id":"source/_posts/JavaScript学习笔记-1.md","hash":"b3388ee1351e8e07b724f56a18b04c96ca904610","modified":1490187431000},{"_id":"source/_posts/JavaScript学习笔记-2.md","hash":"bc2f3ef18e29653496168d0148ff941ddcb44ae0","modified":1490187431000},{"_id":"source/_posts/Quick-Start.md","hash":"1a7d0aeb7318d57856de3de5e3400314821ba743","modified":1490187431000},{"_id":"source/_posts/course-note-2.md","hash":"581b581509b2663ced11ae72fd664ef433bc576d","modified":1490187431000},{"_id":"source/_posts/SSL-TLS.md","hash":"2e27d35fd5e61d3b4f36c532d1043180b5874fd9","modified":1490187431000},{"_id":"source/_posts/course-note-3.md","hash":"d98c6d530ca1d951533d5b284063c3f64b8dc43c","modified":1490187431000},{"_id":"source/_posts/course-note-1.md","hash":"0b61ff0befc630ed16d625a6a262c9bf67d4f902","modified":1490187431000},{"_id":"source/_posts/javascript-array-reduce.md","hash":"de694b745c4a987ae36992958be4c9f62d874cb1","modified":1490187431000},{"_id":"source/_posts/css-centering.md","hash":"0aee62b28ac144d7772a04c33e2d1114eb20c251","modified":1490187431000},{"_id":"source/_posts/javascript-methods.md","hash":"61350a1991bac9579d511d0581ebe2c60d35aca7","modified":1490187431000},{"_id":"source/_posts/search-skill.md","hash":"1e57026e1eb2c5d5145773a4b8f86e739ca198c7","modified":1490187431000},{"_id":"source/_posts/svg-viewport-viewbox.md","hash":"aa47007c302d39ee76e601dda49d4a376e369a44","modified":1490187431000},{"_id":"source/_posts/动态规划.md","hash":"a88bdb0bb14069ff4d2b5bfd25b93b2a665f8b89","modified":1490187431000},{"_id":"source/_posts/团队中的git实践.md","hash":"7d39416b0f81f45f34702135b9ab15dd559f74db","modified":1490187431000},{"_id":"source/_posts/数字证书基础知识.md","hash":"4b0d1ebd76d715fdd769a60d9c588d32e5aedabb","modified":1490187431000},{"_id":"source/tags/index.md","hash":"b9f8928b1ae1a06f711347aebd0d5f65e7835b7e","modified":1490187431000},{"_id":"themes/NexT/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1490187431000},{"_id":"themes/NexT/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1490187431000},{"_id":"themes/NexT/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1490187431000},{"_id":"themes/NexT/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1490187431000},{"_id":"themes/NexT/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1490187431000},{"_id":"themes/NexT/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1490187431000},{"_id":"themes/NexT/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1490187431000},{"_id":"themes/NexT/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1490187431000},{"_id":"themes/NexT/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490187431000},{"_id":"themes/NexT/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1490187431000},{"_id":"themes/NexT/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1490187431000},{"_id":"themes/NexT/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1490187431000},{"_id":"themes/NexT/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1490187431000},{"_id":"themes/NexT/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1490187431000},{"_id":"themes/NexT/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1490187431000},{"_id":"themes/NexT/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1490187431000},{"_id":"themes/NexT/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1490187431000},{"_id":"themes/NexT/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1490187431000},{"_id":"themes/NexT/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1490187431000},{"_id":"themes/NexT/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1490187431000},{"_id":"themes/NexT/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1490187431000},{"_id":"themes/NexT/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1490187431000},{"_id":"themes/NexT/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1490187431000},{"_id":"themes/NexT/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1490187431000},{"_id":"themes/NexT/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1490187431000},{"_id":"themes/NexT/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1490187431000},{"_id":"themes/NexT/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1490187431000},{"_id":"themes/NexT/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1490187431000},{"_id":"themes/NexT/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1490187431000},{"_id":"themes/NexT/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1490187431000},{"_id":"themes/NexT/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1490187431000},{"_id":"themes/NexT/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1490187431000},{"_id":"themes/NexT/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1490187431000},{"_id":"themes/NexT/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1490187431000},{"_id":"themes/NexT/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1490187431000},{"_id":"themes/NexT/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1490187431000},{"_id":"themes/NexT/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1490187431000},{"_id":"themes/NexT/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1490187431000},{"_id":"themes/NexT/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1490187431000},{"_id":"themes/NexT/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1490187431000},{"_id":"themes/NexT/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1490187431000},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1490187431000},{"_id":"themes/NexT/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1490187431000},{"_id":"themes/NexT/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1490187431000},{"_id":"themes/NexT/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1490187431000},{"_id":"themes/NexT/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1490187431000},{"_id":"themes/NexT/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1490187431000},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1490187431000},{"_id":"themes/NexT/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1490187431000},{"_id":"themes/NexT/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1490187431000},{"_id":"themes/NexT/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1490187431000},{"_id":"themes/NexT/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1490187431000},{"_id":"themes/NexT/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1490187431000},{"_id":"themes/NexT/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1490187431000},{"_id":"themes/NexT/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1490187431000}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-01-23T11:47:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2017-01-23 19:47:35\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-22T12:57:11.000Z","path":"tags/index.html","layout":"page","_id":"cj5dsx9n900017yslmq61q16n","content":"","excerpt":"","more":""}],"Post":[{"title":"Design Patterns","date":"2015-04-25T03:11:55.000Z","_content":"## 23 Design Patterns\n\n### Creational Patterns\n\n#### 1.Abstract Factory:\nCreates an instance of several families of classes. Provide an interface for creating families of related or dependent objects without specifying their concrete classes.   \n提供一个接口，让该接口负责创建一系列相关或者相互依赖的对象，无需指定它们具体的类。\n\n#### 2.Builder:\nSeparates object construction from its representation. Separate the construction of a complex object from its representation so that the same construction processes can create different representations.   \n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 3.Factory Method:\nCreates an instance of several derived classes. Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.\n\n#### 4.Prototype:\nA fully initialized instance to be copied or cloned. Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.   \n通过复制（克隆、拷贝）一个指定类型的对象来创建更多同类型的对象。这个指定的对象可被称为“原型”对象，也就是通过复制原型对象来得到更多同类型的对象。\n\n#### 5.Singleton:\nA class of which only a single instance can exist. Ensure a class only has one instance, and provide a global point of access to it.\n\n### Structural Patterns   \n\n#### 6.Adapter:\nMatch interfaces of different classes.Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.   \n适配器模式（Adapter Pattern），把一个类的接口变换成客户端所期待的另一种接口，Adapter模式使原本因接口不匹配（或者不兼容）而无法在一起工作的两个类能够在一起工作。\n\n#### 7.Bridge:\nSeparates an object’s interface from its implementation. Decouple an abstraction from its implementation so that the two can vary independently.   \n桥连模式：将抽象部分与实现部分分离，使它们都可以独立的变化。它是一种结构性模式，又称柄体（Handle and body）模式或者接口（Interface）模式。\n\n#### 8.Composite:\nA tree structure of simple and composite objects. Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.\n\n#### 9.Decorator:\nAdd responsibilities to objects dynamically.  Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.\n\n#### 10.Facade:\nA single class that represents an entire subsystem. Provide a unified interface to a set of interfaces in a system. Facade defines a higher-level interface that makes the subsystem easier to use.   \n外观模式：为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。\n\n#### 11.Flyweight:\nA fine-grained instance used for efficient sharing. Use sharing to support large numbers of fine-grained objects efficiently. A flyweight is a shared object that can be used in multiple contexts simultaneously. The flyweight acts as an independent object in each context — it’s indistinguishable from an instance of the object that’s not shared.   \n享元模式（Flyweight）：对象结构型模式运用共享技术有效地支持大量细粒度的对象。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。\n\n#### 12.Proxy:\nAn object representing another object. Provide a surrogate or placeholder for another object to control access to it.   \n代理模式:   为其他对象提供一种代理，并以控制对这个对象的访问。\n\n### Behavioral Patterns\n\n#### 13.Chain of Resp:\nA way of passing a request between a chain of objects. Avoid coupling the sender of a request to its receiver by giving more than one object a  chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.   \n责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。\n\n#### 14.Command:\nEncapsulate a command request as an object. Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.   \n命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式又称为动作(Action)模式或事务(Transaction)模式。\n\n#### 15.Interpreter:\nA way to include language elements in a program. Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.   \nInterpreter是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。\n\n### 16.Iterator:\nSequentially access the elements of a collection. Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.   \nIterator模式指对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。\n\n#### 17.Mediator:\nDefines simplified communication between classes. Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.   \nMediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。\n\n#### 18.Memento:\nCapture and restore an object's internal state. Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.   \nmemento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态。\n\n#### 19.Observer:\nA way of notifying change to a number of classes. Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.   \n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\n#### 20.State:\nAlter an object's behavior when its state changes. Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.   \n状态模式：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。   \n在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。\n\n#### 21.Strategy:\nEncapsulates an algorithm inside a class. Define a family of algorithms, encapsulate each one, and make them interchangeable.Strategy lets the algorithm vary independently from clients that use it.   \n策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\n\n#### 22.Template:\nDefer the exact steps of an algorithm to a subclass. Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.   \n在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。\n\n#### 23.Visitor:\nDefines a new operation to a class without change. Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.   \n访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。\n","source":"_posts/Design-Patterns.md","raw":"title: \"Design Patterns\"\ndate: 2015-04-25 11:11:55\ntags: 设计模式\n---\n## 23 Design Patterns\n\n### Creational Patterns\n\n#### 1.Abstract Factory:\nCreates an instance of several families of classes. Provide an interface for creating families of related or dependent objects without specifying their concrete classes.   \n提供一个接口，让该接口负责创建一系列相关或者相互依赖的对象，无需指定它们具体的类。\n\n#### 2.Builder:\nSeparates object construction from its representation. Separate the construction of a complex object from its representation so that the same construction processes can create different representations.   \n将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。\n\n#### 3.Factory Method:\nCreates an instance of several derived classes. Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.\n\n#### 4.Prototype:\nA fully initialized instance to be copied or cloned. Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.   \n通过复制（克隆、拷贝）一个指定类型的对象来创建更多同类型的对象。这个指定的对象可被称为“原型”对象，也就是通过复制原型对象来得到更多同类型的对象。\n\n#### 5.Singleton:\nA class of which only a single instance can exist. Ensure a class only has one instance, and provide a global point of access to it.\n\n### Structural Patterns   \n\n#### 6.Adapter:\nMatch interfaces of different classes.Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.   \n适配器模式（Adapter Pattern），把一个类的接口变换成客户端所期待的另一种接口，Adapter模式使原本因接口不匹配（或者不兼容）而无法在一起工作的两个类能够在一起工作。\n\n#### 7.Bridge:\nSeparates an object’s interface from its implementation. Decouple an abstraction from its implementation so that the two can vary independently.   \n桥连模式：将抽象部分与实现部分分离，使它们都可以独立的变化。它是一种结构性模式，又称柄体（Handle and body）模式或者接口（Interface）模式。\n\n#### 8.Composite:\nA tree structure of simple and composite objects. Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.\n\n#### 9.Decorator:\nAdd responsibilities to objects dynamically.  Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.\n\n#### 10.Facade:\nA single class that represents an entire subsystem. Provide a unified interface to a set of interfaces in a system. Facade defines a higher-level interface that makes the subsystem easier to use.   \n外观模式：为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。\n\n#### 11.Flyweight:\nA fine-grained instance used for efficient sharing. Use sharing to support large numbers of fine-grained objects efficiently. A flyweight is a shared object that can be used in multiple contexts simultaneously. The flyweight acts as an independent object in each context — it’s indistinguishable from an instance of the object that’s not shared.   \n享元模式（Flyweight）：对象结构型模式运用共享技术有效地支持大量细粒度的对象。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。\n\n#### 12.Proxy:\nAn object representing another object. Provide a surrogate or placeholder for another object to control access to it.   \n代理模式:   为其他对象提供一种代理，并以控制对这个对象的访问。\n\n### Behavioral Patterns\n\n#### 13.Chain of Resp:\nA way of passing a request between a chain of objects. Avoid coupling the sender of a request to its receiver by giving more than one object a  chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.   \n责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。\n\n#### 14.Command:\nEncapsulate a command request as an object. Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.   \n命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式又称为动作(Action)模式或事务(Transaction)模式。\n\n#### 15.Interpreter:\nA way to include language elements in a program. Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.   \nInterpreter是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。\n\n### 16.Iterator:\nSequentially access the elements of a collection. Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.   \nIterator模式指对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。\n\n#### 17.Mediator:\nDefines simplified communication between classes. Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.   \nMediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。\n\n#### 18.Memento:\nCapture and restore an object's internal state. Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.   \nmemento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态。\n\n#### 19.Observer:\nA way of notifying change to a number of classes. Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.   \n观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。\n\n#### 20.State:\nAlter an object's behavior when its state changes. Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.   \n状态模式：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。   \n在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。\n\n#### 21.Strategy:\nEncapsulates an algorithm inside a class. Define a family of algorithms, encapsulate each one, and make them interchangeable.Strategy lets the algorithm vary independently from clients that use it.   \n策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。\n\n#### 22.Template:\nDefer the exact steps of an algorithm to a subclass. Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.   \n在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。\n\n#### 23.Visitor:\nDefines a new operation to a class without change. Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.   \n访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。\n","slug":"Design-Patterns","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9n500007yslydwx7ub6","content":"<h2 id=\"23-Design-Patterns\"><a href=\"#23-Design-Patterns\" class=\"headerlink\" title=\"23 Design Patterns\"></a>23 Design Patterns</h2><h3 id=\"Creational-Patterns\"><a href=\"#Creational-Patterns\" class=\"headerlink\" title=\"Creational Patterns\"></a>Creational Patterns</h3><h4 id=\"1-Abstract-Factory\"><a href=\"#1-Abstract-Factory\" class=\"headerlink\" title=\"1.Abstract Factory:\"></a>1.Abstract Factory:</h4><p>Creates an instance of several families of classes. Provide an interface for creating families of related or dependent objects without specifying their concrete classes.<br>提供一个接口，让该接口负责创建一系列相关或者相互依赖的对象，无需指定它们具体的类。</p>\n<h4 id=\"2-Builder\"><a href=\"#2-Builder\" class=\"headerlink\" title=\"2.Builder:\"></a>2.Builder:</h4><p>Separates object construction from its representation. Separate the construction of a complex object from its representation so that the same construction processes can create different representations.<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h4 id=\"3-Factory-Method\"><a href=\"#3-Factory-Method\" class=\"headerlink\" title=\"3.Factory Method:\"></a>3.Factory Method:</h4><p>Creates an instance of several derived classes. Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p>\n<h4 id=\"4-Prototype\"><a href=\"#4-Prototype\" class=\"headerlink\" title=\"4.Prototype:\"></a>4.Prototype:</h4><p>A fully initialized instance to be copied or cloned. Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.<br>通过复制（克隆、拷贝）一个指定类型的对象来创建更多同类型的对象。这个指定的对象可被称为“原型”对象，也就是通过复制原型对象来得到更多同类型的对象。</p>\n<h4 id=\"5-Singleton\"><a href=\"#5-Singleton\" class=\"headerlink\" title=\"5.Singleton:\"></a>5.Singleton:</h4><p>A class of which only a single instance can exist. Ensure a class only has one instance, and provide a global point of access to it.</p>\n<h3 id=\"Structural-Patterns\"><a href=\"#Structural-Patterns\" class=\"headerlink\" title=\"Structural Patterns\"></a>Structural Patterns</h3><h4 id=\"6-Adapter\"><a href=\"#6-Adapter\" class=\"headerlink\" title=\"6.Adapter:\"></a>6.Adapter:</h4><p>Match interfaces of different classes.Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.<br>适配器模式（Adapter Pattern），把一个类的接口变换成客户端所期待的另一种接口，Adapter模式使原本因接口不匹配（或者不兼容）而无法在一起工作的两个类能够在一起工作。</p>\n<h4 id=\"7-Bridge\"><a href=\"#7-Bridge\" class=\"headerlink\" title=\"7.Bridge:\"></a>7.Bridge:</h4><p>Separates an object’s interface from its implementation. Decouple an abstraction from its implementation so that the two can vary independently.<br>桥连模式：将抽象部分与实现部分分离，使它们都可以独立的变化。它是一种结构性模式，又称柄体（Handle and body）模式或者接口（Interface）模式。</p>\n<h4 id=\"8-Composite\"><a href=\"#8-Composite\" class=\"headerlink\" title=\"8.Composite:\"></a>8.Composite:</h4><p>A tree structure of simple and composite objects. Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p>\n<h4 id=\"9-Decorator\"><a href=\"#9-Decorator\" class=\"headerlink\" title=\"9.Decorator:\"></a>9.Decorator:</h4><p>Add responsibilities to objects dynamically.  Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p>\n<h4 id=\"10-Facade\"><a href=\"#10-Facade\" class=\"headerlink\" title=\"10.Facade:\"></a>10.Facade:</h4><p>A single class that represents an entire subsystem. Provide a unified interface to a set of interfaces in a system. Facade defines a higher-level interface that makes the subsystem easier to use.<br>外观模式：为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。</p>\n<h4 id=\"11-Flyweight\"><a href=\"#11-Flyweight\" class=\"headerlink\" title=\"11.Flyweight:\"></a>11.Flyweight:</h4><p>A fine-grained instance used for efficient sharing. Use sharing to support large numbers of fine-grained objects efficiently. A flyweight is a shared object that can be used in multiple contexts simultaneously. The flyweight acts as an independent object in each context — it’s indistinguishable from an instance of the object that’s not shared.<br>享元模式（Flyweight）：对象结构型模式运用共享技术有效地支持大量细粒度的对象。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。</p>\n<h4 id=\"12-Proxy\"><a href=\"#12-Proxy\" class=\"headerlink\" title=\"12.Proxy:\"></a>12.Proxy:</h4><p>An object representing another object. Provide a surrogate or placeholder for another object to control access to it.<br>代理模式:   为其他对象提供一种代理，并以控制对这个对象的访问。</p>\n<h3 id=\"Behavioral-Patterns\"><a href=\"#Behavioral-Patterns\" class=\"headerlink\" title=\"Behavioral Patterns\"></a>Behavioral Patterns</h3><h4 id=\"13-Chain-of-Resp\"><a href=\"#13-Chain-of-Resp\" class=\"headerlink\" title=\"13.Chain of Resp:\"></a>13.Chain of Resp:</h4><p>A way of passing a request between a chain of objects. Avoid coupling the sender of a request to its receiver by giving more than one object a  chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.<br>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>\n<h4 id=\"14-Command\"><a href=\"#14-Command\" class=\"headerlink\" title=\"14.Command:\"></a>14.Command:</h4><p>Encapsulate a command request as an object. Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<br>命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式又称为动作(Action)模式或事务(Transaction)模式。</p>\n<h4 id=\"15-Interpreter\"><a href=\"#15-Interpreter\" class=\"headerlink\" title=\"15.Interpreter:\"></a>15.Interpreter:</h4><p>A way to include language elements in a program. Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.<br>Interpreter是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。</p>\n<h3 id=\"16-Iterator\"><a href=\"#16-Iterator\" class=\"headerlink\" title=\"16.Iterator:\"></a>16.Iterator:</h3><p>Sequentially access the elements of a collection. Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.<br>Iterator模式指对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。</p>\n<h4 id=\"17-Mediator\"><a href=\"#17-Mediator\" class=\"headerlink\" title=\"17.Mediator:\"></a>17.Mediator:</h4><p>Defines simplified communication between classes. Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.<br>Mediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。</p>\n<h4 id=\"18-Memento\"><a href=\"#18-Memento\" class=\"headerlink\" title=\"18.Memento:\"></a>18.Memento:</h4><p>Capture and restore an object’s internal state. Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.<br>memento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态。</p>\n<h4 id=\"19-Observer\"><a href=\"#19-Observer\" class=\"headerlink\" title=\"19.Observer:\"></a>19.Observer:</h4><p>A way of notifying change to a number of classes. Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<h4 id=\"20-State\"><a href=\"#20-State\" class=\"headerlink\" title=\"20.State:\"></a>20.State:</h4><p>Alter an object’s behavior when its state changes. Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.<br>状态模式：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。<br>在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。</p>\n<h4 id=\"21-Strategy\"><a href=\"#21-Strategy\" class=\"headerlink\" title=\"21.Strategy:\"></a>21.Strategy:</h4><p>Encapsulates an algorithm inside a class. Define a family of algorithms, encapsulate each one, and make them interchangeable.Strategy lets the algorithm vary independently from clients that use it.<br>策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>\n<h4 id=\"22-Template\"><a href=\"#22-Template\" class=\"headerlink\" title=\"22.Template:\"></a>22.Template:</h4><p>Defer the exact steps of an algorithm to a subclass. Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.<br>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>\n<h4 id=\"23-Visitor\"><a href=\"#23-Visitor\" class=\"headerlink\" title=\"23.Visitor:\"></a>23.Visitor:</h4><p>Defines a new operation to a class without change. Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.<br>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。</p>\n","excerpt":"","more":"<h2 id=\"23-Design-Patterns\"><a href=\"#23-Design-Patterns\" class=\"headerlink\" title=\"23 Design Patterns\"></a>23 Design Patterns</h2><h3 id=\"Creational-Patterns\"><a href=\"#Creational-Patterns\" class=\"headerlink\" title=\"Creational Patterns\"></a>Creational Patterns</h3><h4 id=\"1-Abstract-Factory\"><a href=\"#1-Abstract-Factory\" class=\"headerlink\" title=\"1.Abstract Factory:\"></a>1.Abstract Factory:</h4><p>Creates an instance of several families of classes. Provide an interface for creating families of related or dependent objects without specifying their concrete classes.<br>提供一个接口，让该接口负责创建一系列相关或者相互依赖的对象，无需指定它们具体的类。</p>\n<h4 id=\"2-Builder\"><a href=\"#2-Builder\" class=\"headerlink\" title=\"2.Builder:\"></a>2.Builder:</h4><p>Separates object construction from its representation. Separate the construction of a complex object from its representation so that the same construction processes can create different representations.<br>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p>\n<h4 id=\"3-Factory-Method\"><a href=\"#3-Factory-Method\" class=\"headerlink\" title=\"3.Factory Method:\"></a>3.Factory Method:</h4><p>Creates an instance of several derived classes. Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.</p>\n<h4 id=\"4-Prototype\"><a href=\"#4-Prototype\" class=\"headerlink\" title=\"4.Prototype:\"></a>4.Prototype:</h4><p>A fully initialized instance to be copied or cloned. Specify the kinds of objects to create using a prototypical instance, and create new objects by copying this prototype.<br>通过复制（克隆、拷贝）一个指定类型的对象来创建更多同类型的对象。这个指定的对象可被称为“原型”对象，也就是通过复制原型对象来得到更多同类型的对象。</p>\n<h4 id=\"5-Singleton\"><a href=\"#5-Singleton\" class=\"headerlink\" title=\"5.Singleton:\"></a>5.Singleton:</h4><p>A class of which only a single instance can exist. Ensure a class only has one instance, and provide a global point of access to it.</p>\n<h3 id=\"Structural-Patterns\"><a href=\"#Structural-Patterns\" class=\"headerlink\" title=\"Structural Patterns\"></a>Structural Patterns</h3><h4 id=\"6-Adapter\"><a href=\"#6-Adapter\" class=\"headerlink\" title=\"6.Adapter:\"></a>6.Adapter:</h4><p>Match interfaces of different classes.Convert the interface of a class into another interface clients expect. Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.<br>适配器模式（Adapter Pattern），把一个类的接口变换成客户端所期待的另一种接口，Adapter模式使原本因接口不匹配（或者不兼容）而无法在一起工作的两个类能够在一起工作。</p>\n<h4 id=\"7-Bridge\"><a href=\"#7-Bridge\" class=\"headerlink\" title=\"7.Bridge:\"></a>7.Bridge:</h4><p>Separates an object’s interface from its implementation. Decouple an abstraction from its implementation so that the two can vary independently.<br>桥连模式：将抽象部分与实现部分分离，使它们都可以独立的变化。它是一种结构性模式，又称柄体（Handle and body）模式或者接口（Interface）模式。</p>\n<h4 id=\"8-Composite\"><a href=\"#8-Composite\" class=\"headerlink\" title=\"8.Composite:\"></a>8.Composite:</h4><p>A tree structure of simple and composite objects. Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.</p>\n<h4 id=\"9-Decorator\"><a href=\"#9-Decorator\" class=\"headerlink\" title=\"9.Decorator:\"></a>9.Decorator:</h4><p>Add responsibilities to objects dynamically.  Attach additional responsibilities to an object dynamically. Decorators provide a flexible alternative to subclassing for extending functionality.</p>\n<h4 id=\"10-Facade\"><a href=\"#10-Facade\" class=\"headerlink\" title=\"10.Facade:\"></a>10.Facade:</h4><p>A single class that represents an entire subsystem. Provide a unified interface to a set of interfaces in a system. Facade defines a higher-level interface that makes the subsystem easier to use.<br>外观模式：为子系统中的一组接口提供一个一致的界面， Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。引入外观角色之后，用户只需要直接与外观角色交互，用户与子系统之间的复杂关系由外观角色来实现，从而降低了系统的耦合度。</p>\n<h4 id=\"11-Flyweight\"><a href=\"#11-Flyweight\" class=\"headerlink\" title=\"11.Flyweight:\"></a>11.Flyweight:</h4><p>A fine-grained instance used for efficient sharing. Use sharing to support large numbers of fine-grained objects efficiently. A flyweight is a shared object that can be used in multiple contexts simultaneously. The flyweight acts as an independent object in each context — it’s indistinguishable from an instance of the object that’s not shared.<br>享元模式（Flyweight）：对象结构型模式运用共享技术有效地支持大量细粒度的对象。它使用共享物件，用来尽可能减少内存使用量以及分享资讯给尽可能多的相似物件；它适合用于当大量物件只是重复因而导致无法令人接受的使用大量内存。通常物件中的部分状态是可以分享。常见做法是把它们放在外部数据结构，当需要使用时再将它们传递给享元。</p>\n<h4 id=\"12-Proxy\"><a href=\"#12-Proxy\" class=\"headerlink\" title=\"12.Proxy:\"></a>12.Proxy:</h4><p>An object representing another object. Provide a surrogate or placeholder for another object to control access to it.<br>代理模式:   为其他对象提供一种代理，并以控制对这个对象的访问。</p>\n<h3 id=\"Behavioral-Patterns\"><a href=\"#Behavioral-Patterns\" class=\"headerlink\" title=\"Behavioral Patterns\"></a>Behavioral Patterns</h3><h4 id=\"13-Chain-of-Resp\"><a href=\"#13-Chain-of-Resp\" class=\"headerlink\" title=\"13.Chain of Resp:\"></a>13.Chain of Resp:</h4><p>A way of passing a request between a chain of objects. Avoid coupling the sender of a request to its receiver by giving more than one object a  chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.<br>责任链模式是一种对象的行为模式。在责任链模式里，很多对象由每一个对象对其下家的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任。</p>\n<h4 id=\"14-Command\"><a href=\"#14-Command\" class=\"headerlink\" title=\"14.Command:\"></a>14.Command:</h4><p>Encapsulate a command request as an object. Encapsulate a request as an object, thereby letting you parameterize clients with different requests, queue or log requests, and support undoable operations.<br>命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式又称为动作(Action)模式或事务(Transaction)模式。</p>\n<h4 id=\"15-Interpreter\"><a href=\"#15-Interpreter\" class=\"headerlink\" title=\"15.Interpreter:\"></a>15.Interpreter:</h4><p>A way to include language elements in a program. Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.<br>Interpreter是一种特殊的设计模式，它建立一个解释器，对于特定的计算机程序设计语言，用来解释预先定义的文法。简单地说，Interpreter模式是一种简单的语法解释器构架。</p>\n<h3 id=\"16-Iterator\"><a href=\"#16-Iterator\" class=\"headerlink\" title=\"16.Iterator:\"></a>16.Iterator:</h3><p>Sequentially access the elements of a collection. Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.<br>Iterator模式指对容器中包含的内部对象的访问委让给外部类，使用Iterator（遍历）按顺序进行遍历访问的设计模式。</p>\n<h4 id=\"17-Mediator\"><a href=\"#17-Mediator\" class=\"headerlink\" title=\"17.Mediator:\"></a>17.Mediator:</h4><p>Defines simplified communication between classes. Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it lets you vary their interaction independently.<br>Mediator模式也叫中介者模式，是由GoF提出的23种软件设计模式的一种。Mediator模式是行为模式之一，在Mediator模式中，类之间的交互行为被统一放在Mediator的对象中，对象通过Mediator对象同其他对象交互，Mediator对象起着控制器的作用。</p>\n<h4 id=\"18-Memento\"><a href=\"#18-Memento\" class=\"headerlink\" title=\"18.Memento:\"></a>18.Memento:</h4><p>Capture and restore an object’s internal state. Without violating encapsulation, capture and externalize an object’s internal state so that the object can be restored to this state later.<br>memento是一个保存另外一个对象内部状态拷贝的对象.这样以后就可以将该对象恢复到原先保存的状态。</p>\n<h4 id=\"19-Observer\"><a href=\"#19-Observer\" class=\"headerlink\" title=\"19.Observer:\"></a>19.Observer:</h4><p>A way of notifying change to a number of classes. Define a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.<br>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</p>\n<h4 id=\"20-State\"><a href=\"#20-State\" class=\"headerlink\" title=\"20.State:\"></a>20.State:</h4><p>Alter an object’s behavior when its state changes. Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.<br>状态模式：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。<br>在很多情况下，一个对象的行为取决于一个或多个动态变化的属性，这样的属性叫做状态，这样的对象叫做有状态的(stateful)对象，这样的对象状态是从事先定义好的一系列值中取出的。当一个这样的对象与外部事件产生互动时，其内部状态就会改变，从而使得系统的行为也随之发生变化。</p>\n<h4 id=\"21-Strategy\"><a href=\"#21-Strategy\" class=\"headerlink\" title=\"21.Strategy:\"></a>21.Strategy:</h4><p>Encapsulates an algorithm inside a class. Define a family of algorithms, encapsulate each one, and make them interchangeable.Strategy lets the algorithm vary independently from clients that use it.<br>策略模式：定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p>\n<h4 id=\"22-Template\"><a href=\"#22-Template\" class=\"headerlink\" title=\"22.Template:\"></a>22.Template:</h4><p>Defer the exact steps of an algorithm to a subclass. Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template Method lets subclasses redefine certain steps of an algorithm without changing the algorithm’s structure.<br>在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p>\n<h4 id=\"23-Visitor\"><a href=\"#23-Visitor\" class=\"headerlink\" title=\"23.Visitor:\"></a>23.Visitor:</h4><p>Defines a new operation to a class without change. Represent an operation to be performed on the elements of an object structure. Visitor lets you define a new operation without changing the classes of the elements on which it operates.<br>访问者模式的目的是封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改的话，接受这个操作的数据结构则可以保持不变。</p>\n"},{"title":"How to build your owner blog with HEXO","date":"2015-04-18T10:25:01.000Z","_content":"\n### 今天真高兴，涨了不少姿势。   \n1.学会了使用Hexo搭建一个静态博客   \n2.学会了使用MarkDown这种简单的标记语言编写文章   \n\n前几天看到学长在用MarkDown写博客，感觉逼格很高，程序员风格十足。今天终于入门了，现把一些主要步骤记录一下   \n\n1.首先要有一个[github](https://github.com)账号，然后建立一个repository(仓库)，关键点在于 **仓库名称要与你的账号名称相同，并在后面加上github.io**   \n例如: 我的github叫做 **jimxiang**,那么就建一个名为 **jimxiang.github.io**的仓库。接下来要配置SSH,网上教程很多，这里不再赘述。**   \n\n2.使用node.js里的npm在命令行里进行接下来的操作   \n\n### 安装Hexo\n<pre><code> $ npm install -g hexo // -g  表示把hexo安装到全局，不限于当前文件夹，以后重建项目时不必再次安装</code></pre>\n\n### 部署Hexo\n<pre><code> $ hexo init </code></pre>   \n现在已经搭建好本地的hexo博客了，执行以下命令   \n<pre><code> $ hexo g   // 生成静态页面至public目录</code></pre>\n<pre><code> $ hexo s   // 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</code></pre>\n\n### 到浏览器输入 **localhost:4000** 看看\n\n### 更换博客主题\ngithub上有许多[博客主题](https://github.com/hexojs/hexo/wiki/Themes)。现在clone一个你最喜欢的主题   \n<pre><code> $ git clone https://github.com/...(主题地址)</code></pre>\n\n### 例如\n<pre><code> $ git clone https://github.com/wuchong/jacman.git themes/jacman</code></pre>\n\n### 启用主题\n修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。   \n<pre><code> theme: jacman</code></pre>\n\n**注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。**\n\n### 更新主题\n<pre><code> $ cd themes/jacman</code></pre>   \n<pre><code> $ git pull</code></pre>\n\n### 使用与调试\n启动本地服务，实时查看你的blog   \n<pre><code> $ hexo serve</code></pre>\n\n### 到了重要的一步：把本地的博客部署到github上（有木有很激动）\n配置 **根目录下的config.yml** 文件   \n<pre><code> deploy:</code></pre>   \n<pre><code> type: git</code></pre>   \n<pre><code> repository: git@github.com/...(你自己的github地址)</code></pre>\n<pre><code> branch: master</code></pre>\n\n### npm命令\n<pre><code> $ hexo clean</code></pre>   \n<pre><code> $ hexo generate</code></pre>   \n<pre><code> $ hexo deploy  //这一步会让你输入你的github用户名和密码</code></pre>\n\n### 到此为止，你可以登陆 **xxx.github.io** 查看你的博客啦!\n\n### Hexo修改blog主页内容：\n修改根目录下的 **config.yml** 文件\n\n### 新建文章\n<pre><code>$ hexo new \"（文章名）\" //新建一个xxx.md的文件</code></pre>   \n使用 **记事本、sublime text、chrome插件** 等编辑 *source/_posts文件下的.md* 文件，借助[MakeDown](http://www.markdown.cn/)语言写入你的文章\n\n### 写完后，推送到服务器上\n<pre><code> $ hexo g</code></pre>   \n<pre><code> $ hexo d</code></pre>\n\n现在我们完成了用Hexo和github建立静态博客，是不是很有趣呢？赶紧动手吧！\n","source":"_posts/How-to-build-your-owner-blog-with-HEXO.md","raw":"title: \"How to build your owner blog with HEXO\"   \ndate: 2015-04-18 18:25:01    \ntags: Hexo | Blog\n---\n\n### 今天真高兴，涨了不少姿势。   \n1.学会了使用Hexo搭建一个静态博客   \n2.学会了使用MarkDown这种简单的标记语言编写文章   \n\n前几天看到学长在用MarkDown写博客，感觉逼格很高，程序员风格十足。今天终于入门了，现把一些主要步骤记录一下   \n\n1.首先要有一个[github](https://github.com)账号，然后建立一个repository(仓库)，关键点在于 **仓库名称要与你的账号名称相同，并在后面加上github.io**   \n例如: 我的github叫做 **jimxiang**,那么就建一个名为 **jimxiang.github.io**的仓库。接下来要配置SSH,网上教程很多，这里不再赘述。**   \n\n2.使用node.js里的npm在命令行里进行接下来的操作   \n\n### 安装Hexo\n<pre><code> $ npm install -g hexo // -g  表示把hexo安装到全局，不限于当前文件夹，以后重建项目时不必再次安装</code></pre>\n\n### 部署Hexo\n<pre><code> $ hexo init </code></pre>   \n现在已经搭建好本地的hexo博客了，执行以下命令   \n<pre><code> $ hexo g   // 生成静态页面至public目录</code></pre>\n<pre><code> $ hexo s   // 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</code></pre>\n\n### 到浏览器输入 **localhost:4000** 看看\n\n### 更换博客主题\ngithub上有许多[博客主题](https://github.com/hexojs/hexo/wiki/Themes)。现在clone一个你最喜欢的主题   \n<pre><code> $ git clone https://github.com/...(主题地址)</code></pre>\n\n### 例如\n<pre><code> $ git clone https://github.com/wuchong/jacman.git themes/jacman</code></pre>\n\n### 启用主题\n修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。   \n<pre><code> theme: jacman</code></pre>\n\n**注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。**\n\n### 更新主题\n<pre><code> $ cd themes/jacman</code></pre>   \n<pre><code> $ git pull</code></pre>\n\n### 使用与调试\n启动本地服务，实时查看你的blog   \n<pre><code> $ hexo serve</code></pre>\n\n### 到了重要的一步：把本地的博客部署到github上（有木有很激动）\n配置 **根目录下的config.yml** 文件   \n<pre><code> deploy:</code></pre>   \n<pre><code> type: git</code></pre>   \n<pre><code> repository: git@github.com/...(你自己的github地址)</code></pre>\n<pre><code> branch: master</code></pre>\n\n### npm命令\n<pre><code> $ hexo clean</code></pre>   \n<pre><code> $ hexo generate</code></pre>   \n<pre><code> $ hexo deploy  //这一步会让你输入你的github用户名和密码</code></pre>\n\n### 到此为止，你可以登陆 **xxx.github.io** 查看你的博客啦!\n\n### Hexo修改blog主页内容：\n修改根目录下的 **config.yml** 文件\n\n### 新建文章\n<pre><code>$ hexo new \"（文章名）\" //新建一个xxx.md的文件</code></pre>   \n使用 **记事本、sublime text、chrome插件** 等编辑 *source/_posts文件下的.md* 文件，借助[MakeDown](http://www.markdown.cn/)语言写入你的文章\n\n### 写完后，推送到服务器上\n<pre><code> $ hexo g</code></pre>   \n<pre><code> $ hexo d</code></pre>\n\n现在我们完成了用Hexo和github建立静态博客，是不是很有趣呢？赶紧动手吧！\n","slug":"How-to-build-your-owner-blog-with-HEXO","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9na00027ysljoaevwk0","content":"<h3 id=\"今天真高兴，涨了不少姿势。\"><a href=\"#今天真高兴，涨了不少姿势。\" class=\"headerlink\" title=\"今天真高兴，涨了不少姿势。\"></a>今天真高兴，涨了不少姿势。</h3><p>1.学会了使用Hexo搭建一个静态博客<br>2.学会了使用MarkDown这种简单的标记语言编写文章   </p>\n<p>前几天看到学长在用MarkDown写博客，感觉逼格很高，程序员风格十足。今天终于入门了，现把一些主要步骤记录一下   </p>\n<p>1.首先要有一个<a href=\"https://github.com\" target=\"_blank\" rel=\"external\">github</a>账号，然后建立一个repository(仓库)，关键点在于 <strong>仓库名称要与你的账号名称相同，并在后面加上github.io</strong><br>例如: 我的github叫做 <strong>jimxiang</strong>,那么就建一个名为 <strong>jimxiang.github.io</strong>的仓库。接下来要配置SSH,网上教程很多，这里不再赘述。**   </p>\n<p>2.使用node.js里的npm在命令行里进行接下来的操作   </p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code> $ npm install -g hexo // -g  表示把hexo安装到全局，不限于当前文件夹，以后重建项目时不必再次安装</code></pre>\n\n<h3 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h3><pre><code> $ hexo init </code></pre>   \n现在已经搭建好本地的hexo博客了，执行以下命令   \n<pre><code> $ hexo g   // 生成静态页面至public目录</code></pre>\n<pre><code> $ hexo s   // 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</code></pre>\n\n<h3 id=\"到浏览器输入-localhost-4000-看看\"><a href=\"#到浏览器输入-localhost-4000-看看\" class=\"headerlink\" title=\"到浏览器输入 localhost:4000 看看\"></a>到浏览器输入 <strong>localhost:4000</strong> 看看</h3><h3 id=\"更换博客主题\"><a href=\"#更换博客主题\" class=\"headerlink\" title=\"更换博客主题\"></a>更换博客主题</h3><p>github上有许多<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">博客主题</a>。现在clone一个你最喜欢的主题   </p>\n<pre><code> $ git clone https://github.com/...(主题地址)</code></pre>\n\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><pre><code> $ git clone https://github.com/wuchong/jacman.git themes/jacman</code></pre>\n\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。   </p>\n<pre><code> theme: jacman</code></pre>\n\n<p><strong>注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。</strong></p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><pre><code> $ cd themes/jacman</code></pre>   \n<pre><code> $ git pull</code></pre>\n\n<h3 id=\"使用与调试\"><a href=\"#使用与调试\" class=\"headerlink\" title=\"使用与调试\"></a>使用与调试</h3><p>启动本地服务，实时查看你的blog   </p>\n<pre><code> $ hexo serve</code></pre>\n\n<h3 id=\"到了重要的一步：把本地的博客部署到github上（有木有很激动）\"><a href=\"#到了重要的一步：把本地的博客部署到github上（有木有很激动）\" class=\"headerlink\" title=\"到了重要的一步：把本地的博客部署到github上（有木有很激动）\"></a>到了重要的一步：把本地的博客部署到github上（有木有很激动）</h3><p>配置 <strong>根目录下的config.yml</strong> 文件   </p>\n<pre><code> deploy:</code></pre>   \n<pre><code> type: git</code></pre>   \n<pre><code> repository: git@github.com/...(你自己的github地址)</code></pre>\n<pre><code> branch: master</code></pre>\n\n<h3 id=\"npm命令\"><a href=\"#npm命令\" class=\"headerlink\" title=\"npm命令\"></a>npm命令</h3><pre><code> $ hexo clean</code></pre>   \n<pre><code> $ hexo generate</code></pre>   \n<pre><code> $ hexo deploy  //这一步会让你输入你的github用户名和密码</code></pre>\n\n<h3 id=\"到此为止，你可以登陆-xxx-github-io-查看你的博客啦\"><a href=\"#到此为止，你可以登陆-xxx-github-io-查看你的博客啦\" class=\"headerlink\" title=\"到此为止，你可以登陆 xxx.github.io 查看你的博客啦!\"></a>到此为止，你可以登陆 <strong>xxx.github.io</strong> 查看你的博客啦!</h3><h3 id=\"Hexo修改blog主页内容：\"><a href=\"#Hexo修改blog主页内容：\" class=\"headerlink\" title=\"Hexo修改blog主页内容：\"></a>Hexo修改blog主页内容：</h3><p>修改根目录下的 <strong>config.yml</strong> 文件</p>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><pre><code>$ hexo new \"（文章名）\" //新建一个xxx.md的文件</code></pre>   \n使用 **记事本、sublime text、chrome插件** 等编辑 *source/_posts文件下的.md* 文件，借助[MakeDown](http://www.markdown.cn/)语言写入你的文章\n\n### 写完后，推送到服务器上\n<pre><code> $ hexo g</code></pre>   \n<pre><code> $ hexo d</code></pre>\n\n<p>现在我们完成了用Hexo和github建立静态博客，是不是很有趣呢？赶紧动手吧！</p>\n","excerpt":"","more":"<h3 id=\"今天真高兴，涨了不少姿势。\"><a href=\"#今天真高兴，涨了不少姿势。\" class=\"headerlink\" title=\"今天真高兴，涨了不少姿势。\"></a>今天真高兴，涨了不少姿势。</h3><p>1.学会了使用Hexo搭建一个静态博客<br>2.学会了使用MarkDown这种简单的标记语言编写文章   </p>\n<p>前几天看到学长在用MarkDown写博客，感觉逼格很高，程序员风格十足。今天终于入门了，现把一些主要步骤记录一下   </p>\n<p>1.首先要有一个<a href=\"https://github.com\">github</a>账号，然后建立一个repository(仓库)，关键点在于 <strong>仓库名称要与你的账号名称相同，并在后面加上github.io</strong><br>例如: 我的github叫做 <strong>jimxiang</strong>,那么就建一个名为 <strong>jimxiang.github.io</strong>的仓库。接下来要配置SSH,网上教程很多，这里不再赘述。**   </p>\n<p>2.使用node.js里的npm在命令行里进行接下来的操作   </p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h3><pre><code> $ npm install -g hexo // -g  表示把hexo安装到全局，不限于当前文件夹，以后重建项目时不必再次安装</code></pre>\n\n<h3 id=\"部署Hexo\"><a href=\"#部署Hexo\" class=\"headerlink\" title=\"部署Hexo\"></a>部署Hexo</h3><pre><code> $ hexo init </code></pre>   \n现在已经搭建好本地的hexo博客了，执行以下命令   \n<pre><code> $ hexo g   // 生成静态页面至public目录</code></pre>\n<pre><code> $ hexo s   // 开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</code></pre>\n\n<h3 id=\"到浏览器输入-localhost-4000-看看\"><a href=\"#到浏览器输入-localhost-4000-看看\" class=\"headerlink\" title=\"到浏览器输入 localhost:4000 看看\"></a>到浏览器输入 <strong>localhost:4000</strong> 看看</h3><h3 id=\"更换博客主题\"><a href=\"#更换博客主题\" class=\"headerlink\" title=\"更换博客主题\"></a>更换博客主题</h3><p>github上有许多<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">博客主题</a>。现在clone一个你最喜欢的主题   </p>\n<pre><code> $ git clone https://github.com/...(主题地址)</code></pre>\n\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><pre><code> $ git clone https://github.com/wuchong/jacman.git themes/jacman</code></pre>\n\n<h3 id=\"启用主题\"><a href=\"#启用主题\" class=\"headerlink\" title=\"启用主题\"></a>启用主题</h3><p>修改Hexo目录下的config.yml配置文件中的theme属性，将其设置为jacman。   </p>\n<pre><code> theme: jacman</code></pre>\n\n<p><strong>注意：Hexo有两个config.yml文件，一个在根目录，一个在theme下，此时修改的是在根目录下的。</strong></p>\n<h3 id=\"更新主题\"><a href=\"#更新主题\" class=\"headerlink\" title=\"更新主题\"></a>更新主题</h3><pre><code> $ cd themes/jacman</code></pre>   \n<pre><code> $ git pull</code></pre>\n\n<h3 id=\"使用与调试\"><a href=\"#使用与调试\" class=\"headerlink\" title=\"使用与调试\"></a>使用与调试</h3><p>启动本地服务，实时查看你的blog   </p>\n<pre><code> $ hexo serve</code></pre>\n\n<h3 id=\"到了重要的一步：把本地的博客部署到github上（有木有很激动）\"><a href=\"#到了重要的一步：把本地的博客部署到github上（有木有很激动）\" class=\"headerlink\" title=\"到了重要的一步：把本地的博客部署到github上（有木有很激动）\"></a>到了重要的一步：把本地的博客部署到github上（有木有很激动）</h3><p>配置 <strong>根目录下的config.yml</strong> 文件   </p>\n<pre><code> deploy:</code></pre>   \n<pre><code> type: git</code></pre>   \n<pre><code> repository: git@github.com/...(你自己的github地址)</code></pre>\n<pre><code> branch: master</code></pre>\n\n<h3 id=\"npm命令\"><a href=\"#npm命令\" class=\"headerlink\" title=\"npm命令\"></a>npm命令</h3><pre><code> $ hexo clean</code></pre>   \n<pre><code> $ hexo generate</code></pre>   \n<pre><code> $ hexo deploy  //这一步会让你输入你的github用户名和密码</code></pre>\n\n<h3 id=\"到此为止，你可以登陆-xxx-github-io-查看你的博客啦\"><a href=\"#到此为止，你可以登陆-xxx-github-io-查看你的博客啦\" class=\"headerlink\" title=\"到此为止，你可以登陆 xxx.github.io 查看你的博客啦!\"></a>到此为止，你可以登陆 <strong>xxx.github.io</strong> 查看你的博客啦!</h3><h3 id=\"Hexo修改blog主页内容：\"><a href=\"#Hexo修改blog主页内容：\" class=\"headerlink\" title=\"Hexo修改blog主页内容：\"></a>Hexo修改blog主页内容：</h3><p>修改根目录下的 <strong>config.yml</strong> 文件</p>\n<h3 id=\"新建文章\"><a href=\"#新建文章\" class=\"headerlink\" title=\"新建文章\"></a>新建文章</h3><pre><code>$ hexo new \"（文章名）\" //新建一个xxx.md的文件</code></pre>   \n使用 **记事本、sublime text、chrome插件** 等编辑 *source/_posts文件下的.md* 文件，借助[MakeDown](http://www.markdown.cn/)语言写入你的文章\n\n### 写完后，推送到服务器上\n<pre><code> $ hexo g</code></pre>   \n<pre><code> $ hexo d</code></pre>\n\n<p>现在我们完成了用Hexo和github建立静态博客，是不是很有趣呢？赶紧动手吧！</p>\n"},{"title":"JavaScript学习笔记(3)","date":"2016-03-27T08:47:19.000Z","_content":"JavaScript Closure\n===\n\n学习JavaScript，不能不知道<b>闭包(closure)</b>的概念和作用。闭包是JavaScript中重要的一个概念，对于初学者来讲，闭包很难理解和运用。但只有理解了闭包的基本概念，才能正确的使用它；同样的，只有配合正确的实践，我们才有更加深刻的理解。因此，这片文章借鉴了很多前人的总结和经验，只为更好的理解闭包。   \n\n## 闭包的概念\n对于码农来说，学习一门新技术，除了看官方API和相关文档，示例代码的对我们的帮助可能更大，因为代码的运行结果更加直观，能加深我们的理解。下面贴出大牛的代码，号称世上最简单的闭包：   \n\n```javascript\nfunction A(){\n  function B() {\n    console.log('Hello closure!');\n  }\n  return B;\n}\nvar c = A();\n// c(); Hello closure!\n```\n\n确实，这个示例代码真的不能再简单了。这段代码“翻译”后可以表示为：   \n 1. 定义了一个函数A   \n 2. 在A中定义了内部函数B   \n 3. 在A中返回B（确切的讲，在A中返回B的引用）   \n 4. 执行A()，把A的返回值-函数B()的引用复制给变量c   \n 5. 执行 函数B()，输出结果\n\n根据上述例子，闭包可定义为：\n*当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。*\n\n## 闭包的作用\n在了解闭包的作用之前，我们先了解一下JavaScript中的垃圾回收(GC)机制：*在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象会一直保存在内存中。*   \n在上述例子中，B定义在A中，因此B依赖于A，而外部变量c获得了内部函数B的引用，也就是说，A被间接引用了，所以A不会被GC回收，而是一直保持上下文，在同一个引用调用结束前，会一直保存在内存中，直到调用结束。   \n示例2：\n\n```javascript\nfunction A() {\n  var count = 0;\n  function B() {\n    count++;\n    console.log(count);\n  }\n  return B;\n}\nvar c = A();\nc();//1\nc();//2\nc();//3\n```\n\ncount是A中的一个变量，它的值在B中被改变，函数B每执行一次，count的值在原来的基础上累加1，A被变量c引用，不会被GC，因此，A中的count一直保存在内存中，c每执行一次，由于保留了上下文，count的值会在原来的基础上增加1。   \n这就是闭包的作用，有时候我们需要一个模块中定义这样一个变量：希望这个变量一直保存在内存中，但又不会“污染”全局的变量，这个时候，我们就可以用闭包来定义这个模块。\n\n### 结语\n上面的例子只是最简陋的写法，实际中不会这么写。这里只是为了加深理解。当然，如果要全面理解闭包，仅凭上面的文字和代码是远远不够的。在项目中不妨试着使用闭包，用的多了自然会有独到的理解。\n","source":"_posts/JavaScript学习笔记-3.md","raw":"title: JavaScript学习笔记(3)\ndate: 2016-03-27 16:47:19\ntags: JavaScript\n---\nJavaScript Closure\n===\n\n学习JavaScript，不能不知道<b>闭包(closure)</b>的概念和作用。闭包是JavaScript中重要的一个概念，对于初学者来讲，闭包很难理解和运用。但只有理解了闭包的基本概念，才能正确的使用它；同样的，只有配合正确的实践，我们才有更加深刻的理解。因此，这片文章借鉴了很多前人的总结和经验，只为更好的理解闭包。   \n\n## 闭包的概念\n对于码农来说，学习一门新技术，除了看官方API和相关文档，示例代码的对我们的帮助可能更大，因为代码的运行结果更加直观，能加深我们的理解。下面贴出大牛的代码，号称世上最简单的闭包：   \n\n```javascript\nfunction A(){\n  function B() {\n    console.log('Hello closure!');\n  }\n  return B;\n}\nvar c = A();\n// c(); Hello closure!\n```\n\n确实，这个示例代码真的不能再简单了。这段代码“翻译”后可以表示为：   \n 1. 定义了一个函数A   \n 2. 在A中定义了内部函数B   \n 3. 在A中返回B（确切的讲，在A中返回B的引用）   \n 4. 执行A()，把A的返回值-函数B()的引用复制给变量c   \n 5. 执行 函数B()，输出结果\n\n根据上述例子，闭包可定义为：\n*当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。*\n\n## 闭包的作用\n在了解闭包的作用之前，我们先了解一下JavaScript中的垃圾回收(GC)机制：*在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象会一直保存在内存中。*   \n在上述例子中，B定义在A中，因此B依赖于A，而外部变量c获得了内部函数B的引用，也就是说，A被间接引用了，所以A不会被GC回收，而是一直保持上下文，在同一个引用调用结束前，会一直保存在内存中，直到调用结束。   \n示例2：\n\n```javascript\nfunction A() {\n  var count = 0;\n  function B() {\n    count++;\n    console.log(count);\n  }\n  return B;\n}\nvar c = A();\nc();//1\nc();//2\nc();//3\n```\n\ncount是A中的一个变量，它的值在B中被改变，函数B每执行一次，count的值在原来的基础上累加1，A被变量c引用，不会被GC，因此，A中的count一直保存在内存中，c每执行一次，由于保留了上下文，count的值会在原来的基础上增加1。   \n这就是闭包的作用，有时候我们需要一个模块中定义这样一个变量：希望这个变量一直保存在内存中，但又不会“污染”全局的变量，这个时候，我们就可以用闭包来定义这个模块。\n\n### 结语\n上面的例子只是最简陋的写法，实际中不会这么写。这里只是为了加深理解。当然，如果要全面理解闭包，仅凭上面的文字和代码是远远不够的。在项目中不妨试着使用闭包，用的多了自然会有独到的理解。\n","slug":"JavaScript学习笔记-3","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nf00047ysl31mlwayp","content":"<h1 id=\"JavaScript-Closure\"><a href=\"#JavaScript-Closure\" class=\"headerlink\" title=\"JavaScript Closure\"></a>JavaScript Closure</h1><p>学习JavaScript，不能不知道<b>闭包(closure)</b>的概念和作用。闭包是JavaScript中重要的一个概念，对于初学者来讲，闭包很难理解和运用。但只有理解了闭包的基本概念，才能正确的使用它；同样的，只有配合正确的实践，我们才有更加深刻的理解。因此，这片文章借鉴了很多前人的总结和经验，只为更好的理解闭包。   </p>\n<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>对于码农来说，学习一门新技术，除了看官方API和相关文档，示例代码的对我们的帮助可能更大，因为代码的运行结果更加直观，能加深我们的理解。下面贴出大牛的代码，号称世上最简单的闭包：   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello closure!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> B;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = A();</div><div class=\"line\"><span class=\"comment\">// c(); Hello closure!</span></div></pre></td></tr></table></figure>\n<p>确实，这个示例代码真的不能再简单了。这段代码“翻译”后可以表示为：   </p>\n<ol>\n<li>定义了一个函数A   </li>\n<li>在A中定义了内部函数B   </li>\n<li>在A中返回B（确切的讲，在A中返回B的引用）   </li>\n<li>执行A()，把A的返回值-函数B()的引用复制给变量c   </li>\n<li>执行 函数B()，输出结果</li>\n</ol>\n<p>根据上述例子，闭包可定义为：<br><em>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</em></p>\n<h2 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h2><p>在了解闭包的作用之前，我们先了解一下JavaScript中的垃圾回收(GC)机制：<em>在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象会一直保存在内存中。</em><br>在上述例子中，B定义在A中，因此B依赖于A，而外部变量c获得了内部函数B的引用，也就是说，A被间接引用了，所以A不会被GC回收，而是一直保持上下文，在同一个引用调用结束前，会一直保存在内存中，直到调用结束。<br>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(count);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> B;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = A();</div><div class=\"line\">c();<span class=\"comment\">//1</span></div><div class=\"line\">c();<span class=\"comment\">//2</span></div><div class=\"line\">c();<span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p>count是A中的一个变量，它的值在B中被改变，函数B每执行一次，count的值在原来的基础上累加1，A被变量c引用，不会被GC，因此，A中的count一直保存在内存中，c每执行一次，由于保留了上下文，count的值会在原来的基础上增加1。<br>这就是闭包的作用，有时候我们需要一个模块中定义这样一个变量：希望这个变量一直保存在内存中，但又不会“污染”全局的变量，这个时候，我们就可以用闭包来定义这个模块。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>上面的例子只是最简陋的写法，实际中不会这么写。这里只是为了加深理解。当然，如果要全面理解闭包，仅凭上面的文字和代码是远远不够的。在项目中不妨试着使用闭包，用的多了自然会有独到的理解。</p>\n","excerpt":"","more":"<h1 id=\"JavaScript-Closure\"><a href=\"#JavaScript-Closure\" class=\"headerlink\" title=\"JavaScript Closure\"></a>JavaScript Closure</h1><p>学习JavaScript，不能不知道<b>闭包(closure)</b>的概念和作用。闭包是JavaScript中重要的一个概念，对于初学者来讲，闭包很难理解和运用。但只有理解了闭包的基本概念，才能正确的使用它；同样的，只有配合正确的实践，我们才有更加深刻的理解。因此，这片文章借鉴了很多前人的总结和经验，只为更好的理解闭包。   </p>\n<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>对于码农来说，学习一门新技术，除了看官方API和相关文档，示例代码的对我们的帮助可能更大，因为代码的运行结果更加直观，能加深我们的理解。下面贴出大牛的代码，号称世上最简单的闭包：   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello closure!'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> B;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = A();</div><div class=\"line\"><span class=\"comment\">// c(); Hello closure!</span></div></pre></td></tr></table></figure>\n<p>确实，这个示例代码真的不能再简单了。这段代码“翻译”后可以表示为：   </p>\n<ol>\n<li>定义了一个函数A   </li>\n<li>在A中定义了内部函数B   </li>\n<li>在A中返回B（确切的讲，在A中返回B的引用）   </li>\n<li>执行A()，把A的返回值-函数B()的引用复制给变量c   </li>\n<li>执行 函数B()，输出结果</li>\n</ol>\n<p>根据上述例子，闭包可定义为：<br><em>当一个内部函数被其外部函数之外的变量引用时，就形成了一个闭包。</em></p>\n<h2 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h2><p>在了解闭包的作用之前，我们先了解一下JavaScript中的垃圾回收(GC)机制：<em>在JavaScript中，如果一个对象不再被引用，那么这个对象就会被GC回收，否则这个对象会一直保存在内存中。</em><br>在上述例子中，B定义在A中，因此B依赖于A，而外部变量c获得了内部函数B的引用，也就是说，A被间接引用了，所以A不会被GC回收，而是一直保持上下文，在同一个引用调用结束前，会一直保存在内存中，直到调用结束。<br>示例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> count = <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    count++;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(count);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> B;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = A();</div><div class=\"line\">c();<span class=\"comment\">//1</span></div><div class=\"line\">c();<span class=\"comment\">//2</span></div><div class=\"line\">c();<span class=\"comment\">//3</span></div></pre></td></tr></table></figure>\n<p>count是A中的一个变量，它的值在B中被改变，函数B每执行一次，count的值在原来的基础上累加1，A被变量c引用，不会被GC，因此，A中的count一直保存在内存中，c每执行一次，由于保留了上下文，count的值会在原来的基础上增加1。<br>这就是闭包的作用，有时候我们需要一个模块中定义这样一个变量：希望这个变量一直保存在内存中，但又不会“污染”全局的变量，这个时候，我们就可以用闭包来定义这个模块。</p>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>上面的例子只是最简陋的写法，实际中不会这么写。这里只是为了加深理解。当然，如果要全面理解闭包，仅凭上面的文字和代码是远远不够的。在项目中不妨试着使用闭包，用的多了自然会有独到的理解。</p>\n"},{"title":"JavaScript学习笔记(1)","date":"2016-03-19T06:30:51.000Z","_content":"## JavaScript中的apply(), call()和arguments对象   \n>学习JavaScript，应该掌握函数式编程的特点和方法，为了做到这一点，详细理解函数调用和函数原型是非常有必要的。\n打开浏览器，按F12打开浏览器控制台，选择console，让我们在console控制台里编写一些javascript代码来深入了解关于函数的一些知识。\n\n### 函数原型   \n输入：\n\n```javascript\nObject.getOwnPropertyNames(Function.prototype);\n```\n\n得到：\n```javascript\n[\"length\", \"name\", \"arguments\", \"caller\", \"apply\", \"bind\", \"call\", \"toString\", \"constructor\"]\n```\n\n这里的输出依赖于你使用的浏览器和JavaScript版本。以上属性里，我们将讨论以下这几个：\n```javascript\nFunction.prototype.length\nFunction.prototype.call\nFunction.prototype.apply\n```\n\n首先，我们定义一个 \"test\" 函数：\n```javascript\nvar test = function (a, b, c) {\n    console.log({this: this, a: a, b: b, c: c});\n}\n```\n\n这个函数简单记录了上下文变量(context)，即this的值，和输入参数的值。然后，我们输入不同的参数来调用这个函数：   \n\ntest('a');   \n得到：\n\n```javascript\nObject { this: Window, a: \"a\", b: undefined, c: undefined }\n```\n\ntest('this', 'is', 'cool');   \n得到：\n\n```javascript\nObject { this: Window, a: \"this\", b: \"is\", c: \"cool\" }\n```\n\n>我们注意到，如果我们不输入第2、3个参数，浏览器将显示undefined。此外，我们注意到这个函数默认的上下文是全局对象Window。\n\n### 使用Function.prototype.call   \n调用call函数时，需要把上下文变量this作为第一个输入的参数，然后传进其他参数。\n*syntax:*\n```javascript\nfunction.call(this, arg1, arg2, ..., argn);\n```\n\n因此，下面这两行是等效的：\n\n```javascript\ntest('this', 'is', 'cool');   \ntest.call(Window, 'this', 'is', 'cool');\n```\n\n### 使用Function.prototype.apply   \n函数apply比call更实用一些，和call类似，apply的调用方式也是把变量this设置为输入参数序列中的第一个参数的值，但输入参数序列的第二个参数也是最后一个，以数组（或者数组对象）的方式传入。\n*Syntax:*\n\n```javascript\nfunction.apply(this, [arg1, arg2, ..., argn]);\n```\n\n因此，下面三行全部等效:   \n\n```javascript\ntester(\"this\", \"is\", \"cool\");   \ntester.call(window, \"this\", \"is\", \"cool\");   \ntester.apply(window, [\"this\", \"is\", \"cool\"]);   \n```\n\n能够以数组的方式指定一个参数列表在多数时候非常有用（我们会发现这样做的好处的）。例如，Math.max是一个可变参数函数（一个函数可以接受任意数目的参数）。  \n\n```javascript\nMath.max(1,3,2); //=> 3   \nMath.max(2,1); //=> 2\n```\n\n这样，如果我有一个数值数组，并且我需要利用Math.max函数找出其中最大的那个，我怎么用一行代码来做这个事儿呢？   \n\n```javascript\nvar numbers = [3, 8, 7, 3, 1];   \nMath.max.apply(null, numbers);   \n//=> 8\n```\n\n### apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。   \n每个函数表达式在它的作用域中都有一个特殊的、可使用的局部变量：arguments。为了研究它的属性，让我们创建另一个test函数:\n\n```javascript\nvar tester = function(a, b, c) {   \n\tconsole.log(Object.getOwnPropertyNames(arguments));   \n};\n```\n\n>注：在这种情况下我们必须像上面这样使用Object.getOwnPropertyNames，因为arguments有一些属性没有标记为可以被枚举的，于是如果仅仅使用console.log(arguments)这种方式它们将不会被显示出来。   \n\n现在我们按照老办法，通过调用test函数来测试下：\n\n```javascript\ntest(\"a\", \"b\", \"c\");\n//=> [\"0\", \"1\", \"2\", \"length\", \"callee\"]\n\ntest.apply(null, [\"a\"]);\n//=> [\"0\", \"length\", \"callee\"]\n```\n\narguments变量的属性中包括了对应于传入函数的每个参数的属性，这些和.length属性、.callee属性没什么不同。\n.callee属性提供了调用当前函数的函数的引用，但是这并不被所有的浏览器支持。就目前而言，我们忽略这个属性。\n让我们重新定义一下我们的test函数，让它丰富一点：\n\n```javascript\nvar tester = function() {\n\tconsole.log({\n\t\t'this': this,\n\t\t'arguments': arguments,\n\t\t'length': arguments.length\n\t});\n};\ntester.apply(null, [\"a\", \"b\", \"c\"]);\n//=> { this: null, arguments: { 0: \"a\", 1: \"b\", 2: \"c\" }, length: 3 }\n```\n\nArguments:是对象还是数组？\n我们看得出，arguments完全不是一个数组，虽然多多少少有点像。在很多情况下，尽管不是，我们还是希望把它当作数组来处理。把arguments转换成一个数组，这有个非常不错的快捷小函数：\n\n```javascript\n\tfunction toArray(args) {\n\t    return Array.prototype.slice.call(args);\n\t}\n\n\tvar example = function(){\n\t    console.log(arguments);\n\t    console.log(toArray(arguments));\n\t};\n\n\texample(\"a\", \"b\", \"c\");\n\t//=> { 0: \"a\", 1: \"b\", 2: \"c\" }\n\t\t//=> [\"a\", \"b\", \"c\"]\n```\n\n>这里我们利用Array.prototype.slice方法把类数组对象转换成数组。因为这个，在与.apply同时使用的时候arguments对象最终会极其有用。\n","source":"_posts/JavaScript学习笔记-1.md","raw":"title: JavaScript学习笔记(1)\ndate: 2016-03-19 14:30:51\ntags: JavaScript\n---\n## JavaScript中的apply(), call()和arguments对象   \n>学习JavaScript，应该掌握函数式编程的特点和方法，为了做到这一点，详细理解函数调用和函数原型是非常有必要的。\n打开浏览器，按F12打开浏览器控制台，选择console，让我们在console控制台里编写一些javascript代码来深入了解关于函数的一些知识。\n\n### 函数原型   \n输入：\n\n```javascript\nObject.getOwnPropertyNames(Function.prototype);\n```\n\n得到：\n```javascript\n[\"length\", \"name\", \"arguments\", \"caller\", \"apply\", \"bind\", \"call\", \"toString\", \"constructor\"]\n```\n\n这里的输出依赖于你使用的浏览器和JavaScript版本。以上属性里，我们将讨论以下这几个：\n```javascript\nFunction.prototype.length\nFunction.prototype.call\nFunction.prototype.apply\n```\n\n首先，我们定义一个 \"test\" 函数：\n```javascript\nvar test = function (a, b, c) {\n    console.log({this: this, a: a, b: b, c: c});\n}\n```\n\n这个函数简单记录了上下文变量(context)，即this的值，和输入参数的值。然后，我们输入不同的参数来调用这个函数：   \n\ntest('a');   \n得到：\n\n```javascript\nObject { this: Window, a: \"a\", b: undefined, c: undefined }\n```\n\ntest('this', 'is', 'cool');   \n得到：\n\n```javascript\nObject { this: Window, a: \"this\", b: \"is\", c: \"cool\" }\n```\n\n>我们注意到，如果我们不输入第2、3个参数，浏览器将显示undefined。此外，我们注意到这个函数默认的上下文是全局对象Window。\n\n### 使用Function.prototype.call   \n调用call函数时，需要把上下文变量this作为第一个输入的参数，然后传进其他参数。\n*syntax:*\n```javascript\nfunction.call(this, arg1, arg2, ..., argn);\n```\n\n因此，下面这两行是等效的：\n\n```javascript\ntest('this', 'is', 'cool');   \ntest.call(Window, 'this', 'is', 'cool');\n```\n\n### 使用Function.prototype.apply   \n函数apply比call更实用一些，和call类似，apply的调用方式也是把变量this设置为输入参数序列中的第一个参数的值，但输入参数序列的第二个参数也是最后一个，以数组（或者数组对象）的方式传入。\n*Syntax:*\n\n```javascript\nfunction.apply(this, [arg1, arg2, ..., argn]);\n```\n\n因此，下面三行全部等效:   \n\n```javascript\ntester(\"this\", \"is\", \"cool\");   \ntester.call(window, \"this\", \"is\", \"cool\");   \ntester.apply(window, [\"this\", \"is\", \"cool\"]);   \n```\n\n能够以数组的方式指定一个参数列表在多数时候非常有用（我们会发现这样做的好处的）。例如，Math.max是一个可变参数函数（一个函数可以接受任意数目的参数）。  \n\n```javascript\nMath.max(1,3,2); //=> 3   \nMath.max(2,1); //=> 2\n```\n\n这样，如果我有一个数值数组，并且我需要利用Math.max函数找出其中最大的那个，我怎么用一行代码来做这个事儿呢？   \n\n```javascript\nvar numbers = [3, 8, 7, 3, 1];   \nMath.max.apply(null, numbers);   \n//=> 8\n```\n\n### apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。   \n每个函数表达式在它的作用域中都有一个特殊的、可使用的局部变量：arguments。为了研究它的属性，让我们创建另一个test函数:\n\n```javascript\nvar tester = function(a, b, c) {   \n\tconsole.log(Object.getOwnPropertyNames(arguments));   \n};\n```\n\n>注：在这种情况下我们必须像上面这样使用Object.getOwnPropertyNames，因为arguments有一些属性没有标记为可以被枚举的，于是如果仅仅使用console.log(arguments)这种方式它们将不会被显示出来。   \n\n现在我们按照老办法，通过调用test函数来测试下：\n\n```javascript\ntest(\"a\", \"b\", \"c\");\n//=> [\"0\", \"1\", \"2\", \"length\", \"callee\"]\n\ntest.apply(null, [\"a\"]);\n//=> [\"0\", \"length\", \"callee\"]\n```\n\narguments变量的属性中包括了对应于传入函数的每个参数的属性，这些和.length属性、.callee属性没什么不同。\n.callee属性提供了调用当前函数的函数的引用，但是这并不被所有的浏览器支持。就目前而言，我们忽略这个属性。\n让我们重新定义一下我们的test函数，让它丰富一点：\n\n```javascript\nvar tester = function() {\n\tconsole.log({\n\t\t'this': this,\n\t\t'arguments': arguments,\n\t\t'length': arguments.length\n\t});\n};\ntester.apply(null, [\"a\", \"b\", \"c\"]);\n//=> { this: null, arguments: { 0: \"a\", 1: \"b\", 2: \"c\" }, length: 3 }\n```\n\nArguments:是对象还是数组？\n我们看得出，arguments完全不是一个数组，虽然多多少少有点像。在很多情况下，尽管不是，我们还是希望把它当作数组来处理。把arguments转换成一个数组，这有个非常不错的快捷小函数：\n\n```javascript\n\tfunction toArray(args) {\n\t    return Array.prototype.slice.call(args);\n\t}\n\n\tvar example = function(){\n\t    console.log(arguments);\n\t    console.log(toArray(arguments));\n\t};\n\n\texample(\"a\", \"b\", \"c\");\n\t//=> { 0: \"a\", 1: \"b\", 2: \"c\" }\n\t\t//=> [\"a\", \"b\", \"c\"]\n```\n\n>这里我们利用Array.prototype.slice方法把类数组对象转换成数组。因为这个，在与.apply同时使用的时候arguments对象最终会极其有用。\n","slug":"JavaScript学习笔记-1","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9ni00057yslq6pwcep5","content":"<h2 id=\"JavaScript中的apply-call-和arguments对象\"><a href=\"#JavaScript中的apply-call-和arguments对象\" class=\"headerlink\" title=\"JavaScript中的apply(), call()和arguments对象\"></a>JavaScript中的apply(), call()和arguments对象</h2><blockquote>\n<p>学习JavaScript，应该掌握函数式编程的特点和方法，为了做到这一点，详细理解函数调用和函数原型是非常有必要的。<br>打开浏览器，按F12打开浏览器控制台，选择console，让我们在console控制台里编写一些javascript代码来深入了解关于函数的一些知识。</p>\n</blockquote>\n<h3 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h3><p>输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(<span class=\"built_in\">Function</span>.prototype);</div></pre></td></tr></table></figure>\n<p>得到：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">\"length\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"caller\"</span>, <span class=\"string\">\"apply\"</span>, <span class=\"string\">\"bind\"</span>, <span class=\"string\">\"call\"</span>, <span class=\"string\">\"toString\"</span>, <span class=\"string\">\"constructor\"</span>]</div></pre></td></tr></table></figure></p>\n<p>这里的输出依赖于你使用的浏览器和JavaScript版本。以上属性里，我们将讨论以下这几个：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.length</div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.call</div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.apply</div></pre></td></tr></table></figure></p>\n<p>首先，我们定义一个 “test” 函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(&#123;<span class=\"attr\">this</span>: <span class=\"keyword\">this</span>, <span class=\"attr\">a</span>: a, <span class=\"attr\">b</span>: b, <span class=\"attr\">c</span>: c&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数简单记录了上下文变量(context)，即this的值，和输入参数的值。然后，我们输入不同的参数来调用这个函数：   </p>\n<p>test(‘a’);<br>得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span> &#123; <span class=\"attr\">this</span>: Window, <span class=\"attr\">a</span>: <span class=\"string\">\"a\"</span>, <span class=\"attr\">b</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">c</span>: <span class=\"literal\">undefined</span> &#125;</div></pre></td></tr></table></figure>\n<p>test(‘this’, ‘is’, ‘cool’);<br>得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span> &#123; <span class=\"attr\">this</span>: Window, <span class=\"attr\">a</span>: <span class=\"string\">\"this\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"is\"</span>, <span class=\"attr\">c</span>: <span class=\"string\">\"cool\"</span> &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>我们注意到，如果我们不输入第2、3个参数，浏览器将显示undefined。此外，我们注意到这个函数默认的上下文是全局对象Window。</p>\n</blockquote>\n<h3 id=\"使用Function-prototype-call\"><a href=\"#使用Function-prototype-call\" class=\"headerlink\" title=\"使用Function.prototype.call\"></a>使用Function.prototype.call</h3><p>调用call函数时，需要把上下文变量this作为第一个输入的参数，然后传进其他参数。<br><em>syntax:</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">this, arg1, arg2, ..., argn</span>);</span></div></pre></td></tr></table></figure></p>\n<p>因此，下面这两行是等效的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">'this'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'cool'</span>);   </div><div class=\"line\">test.call(Window, <span class=\"string\">'this'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'cool'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"使用Function-prototype-apply\"><a href=\"#使用Function-prototype-apply\" class=\"headerlink\" title=\"使用Function.prototype.apply\"></a>使用Function.prototype.apply</h3><p>函数apply比call更实用一些，和call类似，apply的调用方式也是把变量this设置为输入参数序列中的第一个参数的值，但输入参数序列的第二个参数也是最后一个，以数组（或者数组对象）的方式传入。<br><em>Syntax:</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">this, [arg1, arg2, ..., argn]</span>);</span></div></pre></td></tr></table></figure>\n<p>因此，下面三行全部等效:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tester(<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>);   </div><div class=\"line\">tester.call(<span class=\"built_in\">window</span>, <span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>);   </div><div class=\"line\">tester.apply(<span class=\"built_in\">window</span>, [<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>]);</div></pre></td></tr></table></figure>\n<p>能够以数组的方式指定一个参数列表在多数时候非常有用（我们会发现这样做的好处的）。例如，Math.max是一个可变参数函数（一个函数可以接受任意数目的参数）。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>); <span class=\"comment\">//=&gt; 3   </span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">2</span>,<span class=\"number\">1</span>); <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure>\n<p>这样，如果我有一个数值数组，并且我需要利用Math.max函数找出其中最大的那个，我怎么用一行代码来做这个事儿呢？   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>];   </div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, numbers);   </div><div class=\"line\"><span class=\"comment\">//=&gt; 8</span></div></pre></td></tr></table></figure>\n<h3 id=\"apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\"><a href=\"#apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\" class=\"headerlink\" title=\"apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\"></a>apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。</h3><p>每个函数表达式在它的作用域中都有一个特殊的、可使用的局部变量：arguments。为了研究它的属性，让我们创建另一个test函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tester = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;   </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(<span class=\"built_in\">arguments</span>));   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：在这种情况下我们必须像上面这样使用Object.getOwnPropertyNames，因为arguments有一些属性没有标记为可以被枚举的，于是如果仅仅使用console.log(arguments)这种方式它们将不会被显示出来。   </p>\n</blockquote>\n<p>现在我们按照老办法，通过调用test函数来测试下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\"><span class=\"comment\">//=&gt; [\"0\", \"1\", \"2\", \"length\", \"callee\"]</span></div><div class=\"line\"></div><div class=\"line\">test.apply(<span class=\"literal\">null</span>, [<span class=\"string\">\"a\"</span>]);</div><div class=\"line\"><span class=\"comment\">//=&gt; [\"0\", \"length\", \"callee\"]</span></div></pre></td></tr></table></figure>\n<p>arguments变量的属性中包括了对应于传入函数的每个参数的属性，这些和.length属性、.callee属性没什么不同。<br>.callee属性提供了调用当前函数的函数的引用，但是这并不被所有的浏览器支持。就目前而言，我们忽略这个属性。<br>让我们重新定义一下我们的test函数，让它丰富一点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tester = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;</div><div class=\"line\">\t\t<span class=\"string\">'this'</span>: <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"string\">'arguments'</span>: <span class=\"built_in\">arguments</span>,</div><div class=\"line\">\t\t<span class=\"string\">'length'</span>: <span class=\"built_in\">arguments</span>.length</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">tester.apply(<span class=\"literal\">null</span>, [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</div><div class=\"line\"><span class=\"comment\">//=&gt; &#123; this: null, arguments: &#123; 0: \"a\", 1: \"b\", 2: \"c\" &#125;, length: 3 &#125;</span></div></pre></td></tr></table></figure>\n<p>Arguments:是对象还是数组？<br>我们看得出，arguments完全不是一个数组，虽然多多少少有点像。在很多情况下，尽管不是，我们还是希望把它当作数组来处理。把arguments转换成一个数组，这有个非常不错的快捷小函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(args);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(toArray(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\"><span class=\"comment\">//=&gt; &#123; 0: \"a\", 1: \"b\", 2: \"c\" &#125;</span></div><div class=\"line\">\t<span class=\"comment\">//=&gt; [\"a\", \"b\", \"c\"]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们利用Array.prototype.slice方法把类数组对象转换成数组。因为这个，在与.apply同时使用的时候arguments对象最终会极其有用。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"JavaScript中的apply-call-和arguments对象\"><a href=\"#JavaScript中的apply-call-和arguments对象\" class=\"headerlink\" title=\"JavaScript中的apply(), call()和arguments对象\"></a>JavaScript中的apply(), call()和arguments对象</h2><blockquote>\n<p>学习JavaScript，应该掌握函数式编程的特点和方法，为了做到这一点，详细理解函数调用和函数原型是非常有必要的。<br>打开浏览器，按F12打开浏览器控制台，选择console，让我们在console控制台里编写一些javascript代码来深入了解关于函数的一些知识。</p>\n</blockquote>\n<h3 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h3><p>输入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(<span class=\"built_in\">Function</span>.prototype);</div></pre></td></tr></table></figure>\n<p>得到：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">\"length\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"arguments\"</span>, <span class=\"string\">\"caller\"</span>, <span class=\"string\">\"apply\"</span>, <span class=\"string\">\"bind\"</span>, <span class=\"string\">\"call\"</span>, <span class=\"string\">\"toString\"</span>, <span class=\"string\">\"constructor\"</span>]</div></pre></td></tr></table></figure></p>\n<p>这里的输出依赖于你使用的浏览器和JavaScript版本。以上属性里，我们将讨论以下这几个：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.length</div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.call</div><div class=\"line\"><span class=\"built_in\">Function</span>.prototype.apply</div></pre></td></tr></table></figure></p>\n<p>首先，我们定义一个 “test” 函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b, c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(&#123;<span class=\"attr\">this</span>: <span class=\"keyword\">this</span>, <span class=\"attr\">a</span>: a, <span class=\"attr\">b</span>: b, <span class=\"attr\">c</span>: c&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这个函数简单记录了上下文变量(context)，即this的值，和输入参数的值。然后，我们输入不同的参数来调用这个函数：   </p>\n<p>test(‘a’);<br>得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span> &#123; <span class=\"attr\">this</span>: Window, <span class=\"attr\">a</span>: <span class=\"string\">\"a\"</span>, <span class=\"attr\">b</span>: <span class=\"literal\">undefined</span>, <span class=\"attr\">c</span>: <span class=\"literal\">undefined</span> &#125;</div></pre></td></tr></table></figure>\n<p>test(‘this’, ‘is’, ‘cool’);<br>得到：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span> &#123; <span class=\"attr\">this</span>: Window, <span class=\"attr\">a</span>: <span class=\"string\">\"this\"</span>, <span class=\"attr\">b</span>: <span class=\"string\">\"is\"</span>, <span class=\"attr\">c</span>: <span class=\"string\">\"cool\"</span> &#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>我们注意到，如果我们不输入第2、3个参数，浏览器将显示undefined。此外，我们注意到这个函数默认的上下文是全局对象Window。</p>\n</blockquote>\n<h3 id=\"使用Function-prototype-call\"><a href=\"#使用Function-prototype-call\" class=\"headerlink\" title=\"使用Function.prototype.call\"></a>使用Function.prototype.call</h3><p>调用call函数时，需要把上下文变量this作为第一个输入的参数，然后传进其他参数。<br><em>syntax:</em><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">call</span>(<span class=\"params\">this, arg1, arg2, ..., argn</span>);</span></div></pre></td></tr></table></figure></p>\n<p>因此，下面这两行是等效的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">'this'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'cool'</span>);   </div><div class=\"line\">test.call(Window, <span class=\"string\">'this'</span>, <span class=\"string\">'is'</span>, <span class=\"string\">'cool'</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"使用Function-prototype-apply\"><a href=\"#使用Function-prototype-apply\" class=\"headerlink\" title=\"使用Function.prototype.apply\"></a>使用Function.prototype.apply</h3><p>函数apply比call更实用一些，和call类似，apply的调用方式也是把变量this设置为输入参数序列中的第一个参数的值，但输入参数序列的第二个参数也是最后一个，以数组（或者数组对象）的方式传入。<br><em>Syntax:</em></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>.<span class=\"title\">apply</span>(<span class=\"params\">this, [arg1, arg2, ..., argn]</span>);</span></div></pre></td></tr></table></figure>\n<p>因此，下面三行全部等效:   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tester(<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>);   </div><div class=\"line\">tester.call(<span class=\"built_in\">window</span>, <span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>);   </div><div class=\"line\">tester.apply(<span class=\"built_in\">window</span>, [<span class=\"string\">\"this\"</span>, <span class=\"string\">\"is\"</span>, <span class=\"string\">\"cool\"</span>]);</div></pre></td></tr></table></figure>\n<p>能够以数组的方式指定一个参数列表在多数时候非常有用（我们会发现这样做的好处的）。例如，Math.max是一个可变参数函数（一个函数可以接受任意数目的参数）。  </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>); <span class=\"comment\">//=&gt; 3   </span></div><div class=\"line\"><span class=\"built_in\">Math</span>.max(<span class=\"number\">2</span>,<span class=\"number\">1</span>); <span class=\"comment\">//=&gt; 2</span></div></pre></td></tr></table></figure>\n<p>这样，如果我有一个数值数组，并且我需要利用Math.max函数找出其中最大的那个，我怎么用一行代码来做这个事儿呢？   </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>];   </div><div class=\"line\"><span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, numbers);   </div><div class=\"line\"><span class=\"comment\">//=&gt; 8</span></div></pre></td></tr></table></figure>\n<h3 id=\"apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\"><a href=\"#apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\" class=\"headerlink\" title=\"apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。\"></a>apply方法真正开始显示出它的重要是当配上特殊参数：Arguments对象。</h3><p>每个函数表达式在它的作用域中都有一个特殊的、可使用的局部变量：arguments。为了研究它的属性，让我们创建另一个test函数:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tester = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b, c</span>) </span>&#123;   </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyNames(<span class=\"built_in\">arguments</span>));   </div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>注：在这种情况下我们必须像上面这样使用Object.getOwnPropertyNames，因为arguments有一些属性没有标记为可以被枚举的，于是如果仅仅使用console.log(arguments)这种方式它们将不会被显示出来。   </p>\n</blockquote>\n<p>现在我们按照老办法，通过调用test函数来测试下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">test(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\"><span class=\"comment\">//=&gt; [\"0\", \"1\", \"2\", \"length\", \"callee\"]</span></div><div class=\"line\"></div><div class=\"line\">test.apply(<span class=\"literal\">null</span>, [<span class=\"string\">\"a\"</span>]);</div><div class=\"line\"><span class=\"comment\">//=&gt; [\"0\", \"length\", \"callee\"]</span></div></pre></td></tr></table></figure>\n<p>arguments变量的属性中包括了对应于传入函数的每个参数的属性，这些和.length属性、.callee属性没什么不同。<br>.callee属性提供了调用当前函数的函数的引用，但是这并不被所有的浏览器支持。就目前而言，我们忽略这个属性。<br>让我们重新定义一下我们的test函数，让它丰富一点：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tester = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(&#123;</div><div class=\"line\">\t\t<span class=\"string\">'this'</span>: <span class=\"keyword\">this</span>,</div><div class=\"line\">\t\t<span class=\"string\">'arguments'</span>: <span class=\"built_in\">arguments</span>,</div><div class=\"line\">\t\t<span class=\"string\">'length'</span>: <span class=\"built_in\">arguments</span>.length</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">tester.apply(<span class=\"literal\">null</span>, [<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>]);</div><div class=\"line\"><span class=\"comment\">//=&gt; &#123; this: null, arguments: &#123; 0: \"a\", 1: \"b\", 2: \"c\" &#125;, length: 3 &#125;</span></div></pre></td></tr></table></figure>\n<p>Arguments:是对象还是数组？<br>我们看得出，arguments完全不是一个数组，虽然多多少少有点像。在很多情况下，尽管不是，我们还是希望把它当作数组来处理。把arguments转换成一个数组，这有个非常不错的快捷小函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toArray</span>(<span class=\"params\">args</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(args);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> example = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(toArray(<span class=\"built_in\">arguments</span>));</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">example(<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>);</div><div class=\"line\"><span class=\"comment\">//=&gt; &#123; 0: \"a\", 1: \"b\", 2: \"c\" &#125;</span></div><div class=\"line\">\t<span class=\"comment\">//=&gt; [\"a\", \"b\", \"c\"]</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里我们利用Array.prototype.slice方法把类数组对象转换成数组。因为这个，在与.apply同时使用的时候arguments对象最终会极其有用。</p>\n</blockquote>\n"},{"title":"JavaScript学习笔记(2)","date":"2016-03-23T08:08:12.000Z","_content":"## JavaScript内存管理\n### 1.简介\n低级语言，比如C，有低级的内存管理基元，像malloc(),free()。另一方面，JavaScript的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动”释放。后者被称为垃圾回收。这个“自动”是产生混淆的源头，并给JavaScript（和其他高级语言）开发者一个印象：他们可以不用考虑内存管理。这是错误的。   \n### 2.内存生命周期\n不管什么程序语言，内存生命周期基本一致：   \n分配你所需要的内存   \n 1. 使用它（读、写）   \n 2. 当它不被使用时释放   \n 3.  当它不被使用时释放   \n第一二部分过程在所有语言中都很清晰。最后一步在低级语言中很清晰，但是在像JavaScript等高级语言中，最后一步不清晰。    \n\n### 3.JavaScript的内存分配\n### 3.1 值的初始化\n为了不让程序员费心分配内存，JavaScript在定义变量时完成内存分配。   \n```javascript\nvar n = 123; // 给数值变量分配内存\nvar s = \"azerty\"; // 给字符型\nvar o = {\n  a: 1,\n  b: null\n}; // 为对象及其包含变量分配内存\nvar a = [1, null, \"abra\"]; // 为数组及其包含变量分配内存（就像对象一样）\nfunction f(a){\n  return a + 2;\n} // 为函数（可调用的对象）分配内存\n// 函数表达式也能分配一个对象\nsomeElement.addEventListener('click', function(){\n  someElement.style.backgroundColor = 'blue';\n}, false);\n```\n\n### 3.2 通过函数调用的内存分配\n有些函数调用结果是分配对象内存：\n```javascript\nvar d = new Date(); //分配一个Date对象\nvar e = document.createElement('div'); //分配一个DOM元素\n```\n有些方法分配新变量或者新对象：\n```javascript\nvar s = \"azerty\";\nvar s2 = s.substr(0, 3); // s2是一个新字符串\n//因为字符串是不变量，JavaScript可能没有分配内存，但只是存储了0-3的范围。\nvar a = [\"ouais ouais\", \"nan nan\"];\nvar a2 = [\"generation\", \"nan nan\"];\nvar a3 = a.concat(a2); // 新数组中有连接数组a和数组a2中的四个元素。\n```\n### 3.3 值的使用\n使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。   \n### 3.4 当内存不再需要使用时释放\n大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。\n高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的(无法通过某种算法解决).\n## 4. 垃圾回收\n如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。本节将解释必要的概念，了解主要的垃圾回收算法和它们的局限性。\n### 4.1 引用\n垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个Javascript对象具有对它 原型 的引用（隐式引用）和对它属性的引用（显式引用）。   \n在这里，“对象”的概念不仅特指Javascript对象，还包括函数作用域（或者全局词法作用域）。\n### 4.2 引用计数垃圾收集\n这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\n例如：\n```javascript\nvar o = {\n  a: {\n    b:2\n  }\n};\n// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o\n// 很显然，没有一个可以被垃圾收集\nvar o2 = o; // o2变量是第二个对“这个对象”的引用\no = 1; // 现在，“这个对象”的原始引用o被o2替换了\nvar oa = o2.a; // 引用“这个对象”的a属性\n// 现在，“这个对象”有两个引用了，一个是o2，一个是oa\no2 = \"yo\"; // 最初的对象现在已经是零引用了\n// 他可以被垃圾回收了\n// 然而它的属性a的对象还在被oa引用，所以还不能回收\noa = null; // a属性的那个对象现在也是零引用了\n// 它可以被垃圾回收了\n```\n<b>限制：循环引用</b>\n\n这个简单的算法有一个限制，就是如果一个对象引用另一个（形成了循环引用），他们可能“不再需要”了，但是他们不会被回收。\n```javascript\nfunction f(){\n  var o = {};\n  var o2 = {};\n  o.a = o2; // o 引用 o2\n  o2.a = o; // o2 引用 o\n  return \"azerty\";\n}\nf();\n// 两个对象被创建，并互相引用，形成了一个循环\n// 他们被调用之后不会离开函数作用域\n// 所以他们已经没有用了，可以被回收了\n// 然而，引用计数算法考虑到他们互相都有至少一次引用，所以他们不会被回收\n```\n<b>实际当中的例子</b>\nIE 6, 7 对DOM对象进行引用计数回收。对他们来说，一个常见问题就是内存泄露：\n```javascript\nvar div = document.createElement(\"div\");\ndiv.onclick = function(){\n  doSomething();\n};\n// div有了一个引用指向事件处理属性onclick\n// 事件处理也有一个对div的引用可以在函数作用域中被访问到\n// 这个循环引用会导致两个对象都不会被垃圾回收\n```\n### 4.3 标记-清除算法\n\n这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。\n\n这个算法假定设置一个叫做根的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。\n\n这个算法比前一个要好，因为“有零引用的对象”总是不可获得的，但是相反却不一定，参考“循环引用”。\n\n从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。\n\n<b>循环引用不再是问题了</b>\n\n在上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收。\n第二个示例同样，一旦 div 和其事件处理无法从根获取到，他们将会被垃圾回收器回收\n。\n\n<b>限制: 那些无法从根对象查询到的对象都将被清除</b>\n\n尽管这是一个限制，但实践中我们很少会碰到类似的情况，所以开发者不太会去关心垃圾回收机制。\n","source":"_posts/JavaScript学习笔记-2.md","raw":"title: JavaScript学习笔记(2)\ndate: 2016-03-23 16:08:12\ntags: JavaScript\n---\n## JavaScript内存管理\n### 1.简介\n低级语言，比如C，有低级的内存管理基元，像malloc(),free()。另一方面，JavaScript的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动”释放。后者被称为垃圾回收。这个“自动”是产生混淆的源头，并给JavaScript（和其他高级语言）开发者一个印象：他们可以不用考虑内存管理。这是错误的。   \n### 2.内存生命周期\n不管什么程序语言，内存生命周期基本一致：   \n分配你所需要的内存   \n 1. 使用它（读、写）   \n 2. 当它不被使用时释放   \n 3.  当它不被使用时释放   \n第一二部分过程在所有语言中都很清晰。最后一步在低级语言中很清晰，但是在像JavaScript等高级语言中，最后一步不清晰。    \n\n### 3.JavaScript的内存分配\n### 3.1 值的初始化\n为了不让程序员费心分配内存，JavaScript在定义变量时完成内存分配。   \n```javascript\nvar n = 123; // 给数值变量分配内存\nvar s = \"azerty\"; // 给字符型\nvar o = {\n  a: 1,\n  b: null\n}; // 为对象及其包含变量分配内存\nvar a = [1, null, \"abra\"]; // 为数组及其包含变量分配内存（就像对象一样）\nfunction f(a){\n  return a + 2;\n} // 为函数（可调用的对象）分配内存\n// 函数表达式也能分配一个对象\nsomeElement.addEventListener('click', function(){\n  someElement.style.backgroundColor = 'blue';\n}, false);\n```\n\n### 3.2 通过函数调用的内存分配\n有些函数调用结果是分配对象内存：\n```javascript\nvar d = new Date(); //分配一个Date对象\nvar e = document.createElement('div'); //分配一个DOM元素\n```\n有些方法分配新变量或者新对象：\n```javascript\nvar s = \"azerty\";\nvar s2 = s.substr(0, 3); // s2是一个新字符串\n//因为字符串是不变量，JavaScript可能没有分配内存，但只是存储了0-3的范围。\nvar a = [\"ouais ouais\", \"nan nan\"];\nvar a2 = [\"generation\", \"nan nan\"];\nvar a3 = a.concat(a2); // 新数组中有连接数组a和数组a2中的四个元素。\n```\n### 3.3 值的使用\n使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。   \n### 3.4 当内存不再需要使用时释放\n大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。\n高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的(无法通过某种算法解决).\n## 4. 垃圾回收\n如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。本节将解释必要的概念，了解主要的垃圾回收算法和它们的局限性。\n### 4.1 引用\n垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个Javascript对象具有对它 原型 的引用（隐式引用）和对它属性的引用（显式引用）。   \n在这里，“对象”的概念不仅特指Javascript对象，还包括函数作用域（或者全局词法作用域）。\n### 4.2 引用计数垃圾收集\n这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。\n例如：\n```javascript\nvar o = {\n  a: {\n    b:2\n  }\n};\n// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o\n// 很显然，没有一个可以被垃圾收集\nvar o2 = o; // o2变量是第二个对“这个对象”的引用\no = 1; // 现在，“这个对象”的原始引用o被o2替换了\nvar oa = o2.a; // 引用“这个对象”的a属性\n// 现在，“这个对象”有两个引用了，一个是o2，一个是oa\no2 = \"yo\"; // 最初的对象现在已经是零引用了\n// 他可以被垃圾回收了\n// 然而它的属性a的对象还在被oa引用，所以还不能回收\noa = null; // a属性的那个对象现在也是零引用了\n// 它可以被垃圾回收了\n```\n<b>限制：循环引用</b>\n\n这个简单的算法有一个限制，就是如果一个对象引用另一个（形成了循环引用），他们可能“不再需要”了，但是他们不会被回收。\n```javascript\nfunction f(){\n  var o = {};\n  var o2 = {};\n  o.a = o2; // o 引用 o2\n  o2.a = o; // o2 引用 o\n  return \"azerty\";\n}\nf();\n// 两个对象被创建，并互相引用，形成了一个循环\n// 他们被调用之后不会离开函数作用域\n// 所以他们已经没有用了，可以被回收了\n// 然而，引用计数算法考虑到他们互相都有至少一次引用，所以他们不会被回收\n```\n<b>实际当中的例子</b>\nIE 6, 7 对DOM对象进行引用计数回收。对他们来说，一个常见问题就是内存泄露：\n```javascript\nvar div = document.createElement(\"div\");\ndiv.onclick = function(){\n  doSomething();\n};\n// div有了一个引用指向事件处理属性onclick\n// 事件处理也有一个对div的引用可以在函数作用域中被访问到\n// 这个循环引用会导致两个对象都不会被垃圾回收\n```\n### 4.3 标记-清除算法\n\n这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。\n\n这个算法假定设置一个叫做根的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。\n\n这个算法比前一个要好，因为“有零引用的对象”总是不可获得的，但是相反却不一定，参考“循环引用”。\n\n从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。\n\n<b>循环引用不再是问题了</b>\n\n在上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收。\n第二个示例同样，一旦 div 和其事件处理无法从根获取到，他们将会被垃圾回收器回收\n。\n\n<b>限制: 那些无法从根对象查询到的对象都将被清除</b>\n\n尽管这是一个限制，但实践中我们很少会碰到类似的情况，所以开发者不太会去关心垃圾回收机制。\n","slug":"JavaScript学习笔记-2","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nk00067yslgh2to2oi","content":"<h2 id=\"JavaScript内存管理\"><a href=\"#JavaScript内存管理\" class=\"headerlink\" title=\"JavaScript内存管理\"></a>JavaScript内存管理</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>低级语言，比如C，有低级的内存管理基元，像malloc(),free()。另一方面，JavaScript的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动”释放。后者被称为垃圾回收。这个“自动”是产生混淆的源头，并给JavaScript（和其他高级语言）开发者一个印象：他们可以不用考虑内存管理。这是错误的。   </p>\n<h3 id=\"2-内存生命周期\"><a href=\"#2-内存生命周期\" class=\"headerlink\" title=\"2.内存生命周期\"></a>2.内存生命周期</h3><p>不管什么程序语言，内存生命周期基本一致：<br>分配你所需要的内存   </p>\n<ol>\n<li>使用它（读、写）   </li>\n<li>当它不被使用时释放   </li>\n<li>当它不被使用时释放<br>第一二部分过程在所有语言中都很清晰。最后一步在低级语言中很清晰，但是在像JavaScript等高级语言中，最后一步不清晰。    </li>\n</ol>\n<h3 id=\"3-JavaScript的内存分配\"><a href=\"#3-JavaScript的内存分配\" class=\"headerlink\" title=\"3.JavaScript的内存分配\"></a>3.JavaScript的内存分配</h3><h3 id=\"3-1-值的初始化\"><a href=\"#3-1-值的初始化\" class=\"headerlink\" title=\"3.1 值的初始化\"></a>3.1 值的初始化</h3><p>为了不让程序员费心分配内存，JavaScript在定义变量时完成内存分配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">123</span>; <span class=\"comment\">// 给数值变量分配内存</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"azerty\"</span>; <span class=\"comment\">// 给字符型</span></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">  <span class=\"attr\">b</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 为对象及其包含变量分配内存</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"abra\"</span>]; <span class=\"comment\">// 为数组及其包含变量分配内存（就像对象一样）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</div><div class=\"line\">&#125; <span class=\"comment\">// 为函数（可调用的对象）分配内存</span></div><div class=\"line\"><span class=\"comment\">// 函数表达式也能分配一个对象</span></div><div class=\"line\">someElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  someElement.style.backgroundColor = <span class=\"string\">'blue'</span>;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-通过函数调用的内存分配\"><a href=\"#3-2-通过函数调用的内存分配\" class=\"headerlink\" title=\"3.2 通过函数调用的内存分配\"></a>3.2 通过函数调用的内存分配</h3><p>有些函数调用结果是分配对象内存：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//分配一个Date对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>); <span class=\"comment\">//分配一个DOM元素</span></div></pre></td></tr></table></figure></p>\n<p>有些方法分配新变量或者新对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"azerty\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = s.substr(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// s2是一个新字符串</span></div><div class=\"line\"><span class=\"comment\">//因为字符串是不变量，JavaScript可能没有分配内存，但只是存储了0-3的范围。</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"ouais ouais\"</span>, <span class=\"string\">\"nan nan\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"string\">\"generation\"</span>, <span class=\"string\">\"nan nan\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a3 = a.concat(a2); <span class=\"comment\">// 新数组中有连接数组a和数组a2中的四个元素。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-值的使用\"><a href=\"#3-3-值的使用\" class=\"headerlink\" title=\"3.3 值的使用\"></a>3.3 值的使用</h3><p>使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。   </p>\n<h3 id=\"3-4-当内存不再需要使用时释放\"><a href=\"#3-4-当内存不再需要使用时释放\" class=\"headerlink\" title=\"3.4 当内存不再需要使用时释放\"></a>3.4 当内存不再需要使用时释放</h3><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。<br>高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的(无法通过某种算法解决).</p>\n<h2 id=\"4-垃圾回收\"><a href=\"#4-垃圾回收\" class=\"headerlink\" title=\"4. 垃圾回收\"></a>4. 垃圾回收</h2><p>如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。本节将解释必要的概念，了解主要的垃圾回收算法和它们的局限性。</p>\n<h3 id=\"4-1-引用\"><a href=\"#4-1-引用\" class=\"headerlink\" title=\"4.1 引用\"></a>4.1 引用</h3><p>垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个Javascript对象具有对它 原型 的引用（隐式引用）和对它属性的引用（显式引用）。<br>在这里，“对象”的概念不仅特指Javascript对象，还包括函数作用域（或者全局词法作用域）。</p>\n<h3 id=\"4-2-引用计数垃圾收集\"><a href=\"#4-2-引用计数垃圾收集\" class=\"headerlink\" title=\"4.2 引用计数垃圾收集\"></a>4.2 引用计数垃圾收集</h3><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  <span class=\"attr\">a</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o</span></div><div class=\"line\"><span class=\"comment\">// 很显然，没有一个可以被垃圾收集</span></div><div class=\"line\"><span class=\"keyword\">var</span> o2 = o; <span class=\"comment\">// o2变量是第二个对“这个对象”的引用</span></div><div class=\"line\">o = <span class=\"number\">1</span>; <span class=\"comment\">// 现在，“这个对象”的原始引用o被o2替换了</span></div><div class=\"line\"><span class=\"keyword\">var</span> oa = o2.a; <span class=\"comment\">// 引用“这个对象”的a属性</span></div><div class=\"line\"><span class=\"comment\">// 现在，“这个对象”有两个引用了，一个是o2，一个是oa</span></div><div class=\"line\">o2 = <span class=\"string\">\"yo\"</span>; <span class=\"comment\">// 最初的对象现在已经是零引用了</span></div><div class=\"line\"><span class=\"comment\">// 他可以被垃圾回收了</span></div><div class=\"line\"><span class=\"comment\">// 然而它的属性a的对象还在被oa引用，所以还不能回收</span></div><div class=\"line\">oa = <span class=\"literal\">null</span>; <span class=\"comment\">// a属性的那个对象现在也是零引用了</span></div><div class=\"line\"><span class=\"comment\">// 它可以被垃圾回收了</span></div></pre></td></tr></table></figure></p>\n<p><b>限制：循环引用</b></p>\n<p>这个简单的算法有一个限制，就是如果一个对象引用另一个（形成了循环引用），他们可能“不再需要”了，但是他们不会被回收。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> o2 = &#123;&#125;;</div><div class=\"line\">  o.a = o2; <span class=\"comment\">// o 引用 o2</span></div><div class=\"line\">  o2.a = o; <span class=\"comment\">// o2 引用 o</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"azerty\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">f();</div><div class=\"line\"><span class=\"comment\">// 两个对象被创建，并互相引用，形成了一个循环</span></div><div class=\"line\"><span class=\"comment\">// 他们被调用之后不会离开函数作用域</span></div><div class=\"line\"><span class=\"comment\">// 所以他们已经没有用了，可以被回收了</span></div><div class=\"line\"><span class=\"comment\">// 然而，引用计数算法考虑到他们互相都有至少一次引用，所以他们不会被回收</span></div></pre></td></tr></table></figure></p>\n<p><b>实际当中的例子</b><br>IE 6, 7 对DOM对象进行引用计数回收。对他们来说，一个常见问题就是内存泄露：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  doSomething();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// div有了一个引用指向事件处理属性onclick</span></div><div class=\"line\"><span class=\"comment\">// 事件处理也有一个对div的引用可以在函数作用域中被访问到</span></div><div class=\"line\"><span class=\"comment\">// 这个循环引用会导致两个对象都不会被垃圾回收</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-标记-清除算法\"><a href=\"#4-3-标记-清除算法\" class=\"headerlink\" title=\"4.3 标记-清除算法\"></a>4.3 标记-清除算法</h3><p>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。</p>\n<p>这个算法假定设置一个叫做根的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p>\n<p>这个算法比前一个要好，因为“有零引用的对象”总是不可获得的，但是相反却不一定，参考“循环引用”。</p>\n<p>从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。</p>\n<p><b>循环引用不再是问题了</b></p>\n<p>在上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收。<br>第二个示例同样，一旦 div 和其事件处理无法从根获取到，他们将会被垃圾回收器回收<br>。</p>\n<p><b>限制: 那些无法从根对象查询到的对象都将被清除</b></p>\n<p>尽管这是一个限制，但实践中我们很少会碰到类似的情况，所以开发者不太会去关心垃圾回收机制。</p>\n","excerpt":"","more":"<h2 id=\"JavaScript内存管理\"><a href=\"#JavaScript内存管理\" class=\"headerlink\" title=\"JavaScript内存管理\"></a>JavaScript内存管理</h2><h3 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h3><p>低级语言，比如C，有低级的内存管理基元，像malloc(),free()。另一方面，JavaScript的内存基元在变量（对象，字符串等等）创建时分配，然后在他们不再被使用时“自动”释放。后者被称为垃圾回收。这个“自动”是产生混淆的源头，并给JavaScript（和其他高级语言）开发者一个印象：他们可以不用考虑内存管理。这是错误的。   </p>\n<h3 id=\"2-内存生命周期\"><a href=\"#2-内存生命周期\" class=\"headerlink\" title=\"2.内存生命周期\"></a>2.内存生命周期</h3><p>不管什么程序语言，内存生命周期基本一致：<br>分配你所需要的内存   </p>\n<ol>\n<li>使用它（读、写）   </li>\n<li>当它不被使用时释放   </li>\n<li>当它不被使用时释放<br>第一二部分过程在所有语言中都很清晰。最后一步在低级语言中很清晰，但是在像JavaScript等高级语言中，最后一步不清晰。    </li>\n</ol>\n<h3 id=\"3-JavaScript的内存分配\"><a href=\"#3-JavaScript的内存分配\" class=\"headerlink\" title=\"3.JavaScript的内存分配\"></a>3.JavaScript的内存分配</h3><h3 id=\"3-1-值的初始化\"><a href=\"#3-1-值的初始化\" class=\"headerlink\" title=\"3.1 值的初始化\"></a>3.1 值的初始化</h3><p>为了不让程序员费心分配内存，JavaScript在定义变量时完成内存分配。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">123</span>; <span class=\"comment\">// 给数值变量分配内存</span></div><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"azerty\"</span>; <span class=\"comment\">// 给字符型</span></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</div><div class=\"line\">  <span class=\"attr\">b</span>: <span class=\"literal\">null</span></div><div class=\"line\">&#125;; <span class=\"comment\">// 为对象及其包含变量分配内存</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"abra\"</span>]; <span class=\"comment\">// 为数组及其包含变量分配内存（就像对象一样）</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> a + <span class=\"number\">2</span>;</div><div class=\"line\">&#125; <span class=\"comment\">// 为函数（可调用的对象）分配内存</span></div><div class=\"line\"><span class=\"comment\">// 函数表达式也能分配一个对象</span></div><div class=\"line\">someElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  someElement.style.backgroundColor = <span class=\"string\">'blue'</span>;</div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-2-通过函数调用的内存分配\"><a href=\"#3-2-通过函数调用的内存分配\" class=\"headerlink\" title=\"3.2 通过函数调用的内存分配\"></a>3.2 通过函数调用的内存分配</h3><p>有些函数调用结果是分配对象内存：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">//分配一个Date对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>); <span class=\"comment\">//分配一个DOM元素</span></div></pre></td></tr></table></figure></p>\n<p>有些方法分配新变量或者新对象：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> s = <span class=\"string\">\"azerty\"</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> s2 = s.substr(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// s2是一个新字符串</span></div><div class=\"line\"><span class=\"comment\">//因为字符串是不变量，JavaScript可能没有分配内存，但只是存储了0-3的范围。</span></div><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">\"ouais ouais\"</span>, <span class=\"string\">\"nan nan\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a2 = [<span class=\"string\">\"generation\"</span>, <span class=\"string\">\"nan nan\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> a3 = a.concat(a2); <span class=\"comment\">// 新数组中有连接数组a和数组a2中的四个元素。</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"3-3-值的使用\"><a href=\"#3-3-值的使用\" class=\"headerlink\" title=\"3.3 值的使用\"></a>3.3 值的使用</h3><p>使用值的过程实际上是对分配内存进行读取与写入的操作。读取与写入可能是写入一个变量或者一个对象的属性值，甚至传递函数的参数。   </p>\n<h3 id=\"3-4-当内存不再需要使用时释放\"><a href=\"#3-4-当内存不再需要使用时释放\" class=\"headerlink\" title=\"3.4 当内存不再需要使用时释放\"></a>3.4 当内存不再需要使用时释放</h3><p>大多数内存管理的问题都在这个阶段。在这里最艰难的任务是找到“所分配的内存确实已经不再需要了”。它往往要求开发人员来确定在程序中哪一块内存不再需要并且释放它。<br>高级语言解释器嵌入了“垃圾回收器”，它的主要工作是跟踪内存的分配和使用，以便当分配的内存不再使用时，自动释放它。这只能是一个近似的过程，因为要知道是否仍然需要某块内存是无法判定的(无法通过某种算法解决).</p>\n<h2 id=\"4-垃圾回收\"><a href=\"#4-垃圾回收\" class=\"headerlink\" title=\"4. 垃圾回收\"></a>4. 垃圾回收</h2><p>如上文所述自动寻找是否一些内存“不再需要”的问题是无法判定的。因此，垃圾回收实现只能有限制的解决一般问题。本节将解释必要的概念，了解主要的垃圾回收算法和它们的局限性。</p>\n<h3 id=\"4-1-引用\"><a href=\"#4-1-引用\" class=\"headerlink\" title=\"4.1 引用\"></a>4.1 引用</h3><p>垃圾回收算法主要依赖于引用的概念。在内存管理的环境中，一个对象如果有访问另一个对象的权限（隐式或者显式），叫做一个对象引用另一个对象。例如，一个Javascript对象具有对它 原型 的引用（隐式引用）和对它属性的引用（显式引用）。<br>在这里，“对象”的概念不仅特指Javascript对象，还包括函数作用域（或者全局词法作用域）。</p>\n<h3 id=\"4-2-引用计数垃圾收集\"><a href=\"#4-2-引用计数垃圾收集\" class=\"headerlink\" title=\"4.2 引用计数垃圾收集\"></a>4.2 引用计数垃圾收集</h3><p>这是最简单的垃圾收集算法。此算法把“对象是否不再需要”简化定义为“对象有没有其他对象引用到它”。如果没有引用指向该对象（零引用），对象将被垃圾回收机制回收。<br>例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">  <span class=\"attr\">a</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">b</span>:<span class=\"number\">2</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// 两个对象被创建，一个作为另一个的属性被引用，另一个被分配给变量o</span></div><div class=\"line\"><span class=\"comment\">// 很显然，没有一个可以被垃圾收集</span></div><div class=\"line\"><span class=\"keyword\">var</span> o2 = o; <span class=\"comment\">// o2变量是第二个对“这个对象”的引用</span></div><div class=\"line\">o = <span class=\"number\">1</span>; <span class=\"comment\">// 现在，“这个对象”的原始引用o被o2替换了</span></div><div class=\"line\"><span class=\"keyword\">var</span> oa = o2.a; <span class=\"comment\">// 引用“这个对象”的a属性</span></div><div class=\"line\"><span class=\"comment\">// 现在，“这个对象”有两个引用了，一个是o2，一个是oa</span></div><div class=\"line\">o2 = <span class=\"string\">\"yo\"</span>; <span class=\"comment\">// 最初的对象现在已经是零引用了</span></div><div class=\"line\"><span class=\"comment\">// 他可以被垃圾回收了</span></div><div class=\"line\"><span class=\"comment\">// 然而它的属性a的对象还在被oa引用，所以还不能回收</span></div><div class=\"line\">oa = <span class=\"literal\">null</span>; <span class=\"comment\">// a属性的那个对象现在也是零引用了</span></div><div class=\"line\"><span class=\"comment\">// 它可以被垃圾回收了</span></div></pre></td></tr></table></figure></p>\n<p><b>限制：循环引用</b></p>\n<p>这个简单的算法有一个限制，就是如果一个对象引用另一个（形成了循环引用），他们可能“不再需要”了，但是他们不会被回收。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> o = &#123;&#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> o2 = &#123;&#125;;</div><div class=\"line\">  o.a = o2; <span class=\"comment\">// o 引用 o2</span></div><div class=\"line\">  o2.a = o; <span class=\"comment\">// o2 引用 o</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"azerty\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">f();</div><div class=\"line\"><span class=\"comment\">// 两个对象被创建，并互相引用，形成了一个循环</span></div><div class=\"line\"><span class=\"comment\">// 他们被调用之后不会离开函数作用域</span></div><div class=\"line\"><span class=\"comment\">// 所以他们已经没有用了，可以被回收了</span></div><div class=\"line\"><span class=\"comment\">// 然而，引用计数算法考虑到他们互相都有至少一次引用，所以他们不会被回收</span></div></pre></td></tr></table></figure></p>\n<p><b>实际当中的例子</b><br>IE 6, 7 对DOM对象进行引用计数回收。对他们来说，一个常见问题就是内存泄露：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</div><div class=\"line\">div.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  doSomething();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// div有了一个引用指向事件处理属性onclick</span></div><div class=\"line\"><span class=\"comment\">// 事件处理也有一个对div的引用可以在函数作用域中被访问到</span></div><div class=\"line\"><span class=\"comment\">// 这个循环引用会导致两个对象都不会被垃圾回收</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"4-3-标记-清除算法\"><a href=\"#4-3-标记-清除算法\" class=\"headerlink\" title=\"4.3 标记-清除算法\"></a>4.3 标记-清除算法</h3><p>这个算法把“对象是否不再需要”简化定义为“对象是否可以获得”。</p>\n<p>这个算法假定设置一个叫做根的对象（在Javascript里，根是全局对象）。定期的，垃圾回收器将从根开始，找所有从根开始引用的对象，然后找这些对象引用的对象……从根开始，垃圾回收器将找到所有可以获得的对象和所有不能获得的对象。</p>\n<p>这个算法比前一个要好，因为“有零引用的对象”总是不可获得的，但是相反却不一定，参考“循环引用”。</p>\n<p>从2012年起，所有现代浏览器都使用了标记-清除垃圾回收算法。所有对JavaScript垃圾回收算法的改进都是基于标记-清除算法的改进，并没有改进标记-清除算法本身和它对“对象是否不再需要”的简化定义。</p>\n<p><b>循环引用不再是问题了</b></p>\n<p>在上面的示例中，函数调用返回之后，两个对象从全局对象出发无法获取。因此，他们将会被垃圾回收器回收。<br>第二个示例同样，一旦 div 和其事件处理无法从根获取到，他们将会被垃圾回收器回收<br>。</p>\n<p><b>限制: 那些无法从根对象查询到的对象都将被清除</b></p>\n<p>尽管这是一个限制，但实践中我们很少会碰到类似的情况，所以开发者不太会去关心垃圾回收机制。</p>\n"},{"title":"Quick Strat","date":"2015-04-18T10:00:00.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","source":"_posts/Quick-Start.md","raw":"title: \"Quick Strat\"\ndate: 2015-04-18 18:00:00\ntags: Hexo | Blog\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n","slug":"Quick-Start","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nl00097ysl7pwwdol8","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"信息系统管理与安全(2)","date":"2016-03-28T07:28:06.000Z","_content":"### 信息安全风险基本要素\n - 信息资产 **增加风险**\n - 信息资产环境或其自身存在的脆弱性/漏洞 **增加风险**\n - 威胁 **增加风险**\n - 安全控制措施 **降低风险**\n - 影响 **增加风险**\n\n### 信息安全风险模型\n\n### 信息安全风险评估模型的作用\n> 可以建立信息安全风险各个要素之间的相互关系，据此可以分析系统内部机制中所存在的危险性因素，可以发现系统与外界环境交互过程中存在的不正常和有害行为，从而完成对系统脆弱点和安全威胁的定性分析。\n> 可以进一步采用其他方法来进行风险建模。\n\n### 风险评估准备\n - 确定风险评估的目标\n - 确定风险评估的范围\n - 选择与组织相适应的风险判断方法\n - 建立风险...\n\n### 资产及其价值\n#### 资产是组织赋予了价值，且需要保护的东西\n - 能以多种形式存在\n - 价值和安全属性具有很强的时间特性\n#### 资产赋值是对资产安全价值的估价\n#### 资产的价值与如下因素有关：\n - 自身的价值\n - 对业务的安全重要性\n - 在一定条件下的潜在价值\n - 与之相关的安全保护措施\n\n### 资产管理\n - 根据不同的项目目标和特点，确定重要识别的资产类别\n - 明确所拥有和需要保护的信息资产，确定关键资产\n - 资产管理的目标是实现并保持组织资产的适当保护\n### 资产管理分类\n指导原则：\n - 组织价值、法律要求、敏感性、关键性\n - 权衡分类数量\n - 按保护级别进行\n","source":"_posts/course-note-2.md","raw":"title: 信息系统管理与安全(2)\ndate: 2016-03-28 15:28:06\ntags: 信息系统管理与安全\n---\n### 信息安全风险基本要素\n - 信息资产 **增加风险**\n - 信息资产环境或其自身存在的脆弱性/漏洞 **增加风险**\n - 威胁 **增加风险**\n - 安全控制措施 **降低风险**\n - 影响 **增加风险**\n\n### 信息安全风险模型\n\n### 信息安全风险评估模型的作用\n> 可以建立信息安全风险各个要素之间的相互关系，据此可以分析系统内部机制中所存在的危险性因素，可以发现系统与外界环境交互过程中存在的不正常和有害行为，从而完成对系统脆弱点和安全威胁的定性分析。\n> 可以进一步采用其他方法来进行风险建模。\n\n### 风险评估准备\n - 确定风险评估的目标\n - 确定风险评估的范围\n - 选择与组织相适应的风险判断方法\n - 建立风险...\n\n### 资产及其价值\n#### 资产是组织赋予了价值，且需要保护的东西\n - 能以多种形式存在\n - 价值和安全属性具有很强的时间特性\n#### 资产赋值是对资产安全价值的估价\n#### 资产的价值与如下因素有关：\n - 自身的价值\n - 对业务的安全重要性\n - 在一定条件下的潜在价值\n - 与之相关的安全保护措施\n\n### 资产管理\n - 根据不同的项目目标和特点，确定重要识别的资产类别\n - 明确所拥有和需要保护的信息资产，确定关键资产\n - 资产管理的目标是实现并保持组织资产的适当保护\n### 资产管理分类\n指导原则：\n - 组织价值、法律要求、敏感性、关键性\n - 权衡分类数量\n - 按保护级别进行\n","slug":"course-note-2","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nm000a7ysltbtyp3k4","content":"<h3 id=\"信息安全风险基本要素\"><a href=\"#信息安全风险基本要素\" class=\"headerlink\" title=\"信息安全风险基本要素\"></a>信息安全风险基本要素</h3><ul>\n<li>信息资产 <strong>增加风险</strong></li>\n<li>信息资产环境或其自身存在的脆弱性/漏洞 <strong>增加风险</strong></li>\n<li>威胁 <strong>增加风险</strong></li>\n<li>安全控制措施 <strong>降低风险</strong></li>\n<li>影响 <strong>增加风险</strong></li>\n</ul>\n<h3 id=\"信息安全风险模型\"><a href=\"#信息安全风险模型\" class=\"headerlink\" title=\"信息安全风险模型\"></a>信息安全风险模型</h3><h3 id=\"信息安全风险评估模型的作用\"><a href=\"#信息安全风险评估模型的作用\" class=\"headerlink\" title=\"信息安全风险评估模型的作用\"></a>信息安全风险评估模型的作用</h3><blockquote>\n<p>可以建立信息安全风险各个要素之间的相互关系，据此可以分析系统内部机制中所存在的危险性因素，可以发现系统与外界环境交互过程中存在的不正常和有害行为，从而完成对系统脆弱点和安全威胁的定性分析。<br>可以进一步采用其他方法来进行风险建模。</p>\n</blockquote>\n<h3 id=\"风险评估准备\"><a href=\"#风险评估准备\" class=\"headerlink\" title=\"风险评估准备\"></a>风险评估准备</h3><ul>\n<li>确定风险评估的目标</li>\n<li>确定风险评估的范围</li>\n<li>选择与组织相适应的风险判断方法</li>\n<li>建立风险…</li>\n</ul>\n<h3 id=\"资产及其价值\"><a href=\"#资产及其价值\" class=\"headerlink\" title=\"资产及其价值\"></a>资产及其价值</h3><h4 id=\"资产是组织赋予了价值，且需要保护的东西\"><a href=\"#资产是组织赋予了价值，且需要保护的东西\" class=\"headerlink\" title=\"资产是组织赋予了价值，且需要保护的东西\"></a>资产是组织赋予了价值，且需要保护的东西</h4><ul>\n<li>能以多种形式存在</li>\n<li>价值和安全属性具有很强的时间特性<h4 id=\"资产赋值是对资产安全价值的估价\"><a href=\"#资产赋值是对资产安全价值的估价\" class=\"headerlink\" title=\"资产赋值是对资产安全价值的估价\"></a>资产赋值是对资产安全价值的估价</h4><h4 id=\"资产的价值与如下因素有关：\"><a href=\"#资产的价值与如下因素有关：\" class=\"headerlink\" title=\"资产的价值与如下因素有关：\"></a>资产的价值与如下因素有关：</h4></li>\n<li>自身的价值</li>\n<li>对业务的安全重要性</li>\n<li>在一定条件下的潜在价值</li>\n<li>与之相关的安全保护措施</li>\n</ul>\n<h3 id=\"资产管理\"><a href=\"#资产管理\" class=\"headerlink\" title=\"资产管理\"></a>资产管理</h3><ul>\n<li>根据不同的项目目标和特点，确定重要识别的资产类别</li>\n<li>明确所拥有和需要保护的信息资产，确定关键资产</li>\n<li>资产管理的目标是实现并保持组织资产的适当保护<h3 id=\"资产管理分类\"><a href=\"#资产管理分类\" class=\"headerlink\" title=\"资产管理分类\"></a>资产管理分类</h3>指导原则：</li>\n<li>组织价值、法律要求、敏感性、关键性</li>\n<li>权衡分类数量</li>\n<li>按保护级别进行</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"信息安全风险基本要素\"><a href=\"#信息安全风险基本要素\" class=\"headerlink\" title=\"信息安全风险基本要素\"></a>信息安全风险基本要素</h3><ul>\n<li>信息资产 <strong>增加风险</strong></li>\n<li>信息资产环境或其自身存在的脆弱性/漏洞 <strong>增加风险</strong></li>\n<li>威胁 <strong>增加风险</strong></li>\n<li>安全控制措施 <strong>降低风险</strong></li>\n<li>影响 <strong>增加风险</strong></li>\n</ul>\n<h3 id=\"信息安全风险模型\"><a href=\"#信息安全风险模型\" class=\"headerlink\" title=\"信息安全风险模型\"></a>信息安全风险模型</h3><h3 id=\"信息安全风险评估模型的作用\"><a href=\"#信息安全风险评估模型的作用\" class=\"headerlink\" title=\"信息安全风险评估模型的作用\"></a>信息安全风险评估模型的作用</h3><blockquote>\n<p>可以建立信息安全风险各个要素之间的相互关系，据此可以分析系统内部机制中所存在的危险性因素，可以发现系统与外界环境交互过程中存在的不正常和有害行为，从而完成对系统脆弱点和安全威胁的定性分析。<br>可以进一步采用其他方法来进行风险建模。</p>\n</blockquote>\n<h3 id=\"风险评估准备\"><a href=\"#风险评估准备\" class=\"headerlink\" title=\"风险评估准备\"></a>风险评估准备</h3><ul>\n<li>确定风险评估的目标</li>\n<li>确定风险评估的范围</li>\n<li>选择与组织相适应的风险判断方法</li>\n<li>建立风险…</li>\n</ul>\n<h3 id=\"资产及其价值\"><a href=\"#资产及其价值\" class=\"headerlink\" title=\"资产及其价值\"></a>资产及其价值</h3><h4 id=\"资产是组织赋予了价值，且需要保护的东西\"><a href=\"#资产是组织赋予了价值，且需要保护的东西\" class=\"headerlink\" title=\"资产是组织赋予了价值，且需要保护的东西\"></a>资产是组织赋予了价值，且需要保护的东西</h4><ul>\n<li>能以多种形式存在</li>\n<li>价值和安全属性具有很强的时间特性<h4 id=\"资产赋值是对资产安全价值的估价\"><a href=\"#资产赋值是对资产安全价值的估价\" class=\"headerlink\" title=\"资产赋值是对资产安全价值的估价\"></a>资产赋值是对资产安全价值的估价</h4><h4 id=\"资产的价值与如下因素有关：\"><a href=\"#资产的价值与如下因素有关：\" class=\"headerlink\" title=\"资产的价值与如下因素有关：\"></a>资产的价值与如下因素有关：</h4></li>\n<li>自身的价值</li>\n<li>对业务的安全重要性</li>\n<li>在一定条件下的潜在价值</li>\n<li>与之相关的安全保护措施</li>\n</ul>\n<h3 id=\"资产管理\"><a href=\"#资产管理\" class=\"headerlink\" title=\"资产管理\"></a>资产管理</h3><ul>\n<li>根据不同的项目目标和特点，确定重要识别的资产类别</li>\n<li>明确所拥有和需要保护的信息资产，确定关键资产</li>\n<li>资产管理的目标是实现并保持组织资产的适当保护<h3 id=\"资产管理分类\"><a href=\"#资产管理分类\" class=\"headerlink\" title=\"资产管理分类\"></a>资产管理分类</h3>指导原则：</li>\n<li>组织价值、法律要求、敏感性、关键性</li>\n<li>权衡分类数量</li>\n<li>按保护级别进行</li>\n</ul>\n"},{"title":"SSL/TLS","date":"2017-02-03T08:27:50.000Z","_content":"## SSL/TLS协议运行机制\n---\n互联网的通信安全，建立在 SSL/TLS 协议之上。   \n本文简要介绍 SSL/TLS 协议的运行机制。   \n### 一.作用\n不使用 SSL/TLS 的 HTTP 通信，就是不加密的通信。所有信息明文传播，带来了三大风险：\n\n<pre>\n1.窃听风险 \n2.篡改风险\n3.冒充风险\n</pre>\n\nSSL/TLS 协议就是为了解决这三大风险而设计的，希望达到：\n\n<pre>\n1.所有信息都是加密传播，第三方无法窃听。\n2.具有校验机制，一旦被篡改，通信双方会立刻发现。\n3.具有身份证书，防止身份被冒充。\n</pre>\n\n互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得 SSL/TLS 协议变得异常复杂。\n### 二.历史\n互联网加密通信协议的历史，几乎与互联网一样长。\n\n<pre>\n1994年，NetScape 公司设计了 SSL 协议1.0版本，但是未发布。\n1995年，NetScape 公司发布了 SSL 2.0版，但很快发现有严重漏洞。\n1996年，SSL 3.0 版问世，得到大规模应用。\n1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0版。\n2006年和2008年，TLS 进行了两次升级，分别是 TLS 1.1版和 TLS 1.2版。\n</pre>\n\n目前，应用最广泛的是 TLS 1.0，接下来是 SSL 3.0。但是，主流浏览器都实现了 TLS 1.2的支持。   \nTLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3。\n### 三.基本的运行过程\nSSL/TLS 协议的基本思路是采用公钥加密法，也就是说客户端先向服务器端索要公钥，然后用公钥加密信息，服务器接收密文后，用自己的私钥解密。   \n但是，这里有两个问题：\n\n<pre>\n1.如何保证公钥不被篡改？\n解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n2.公钥加密计算量太大，如何减少耗用的时间？\n解决方法：每一次对话（session），客户端和服务器端都生成一个“对话密钥”（session key），用它来加密信息。\n由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运\n算的消耗时间。\n</pre>\n\n因此，SSL/TLS协议的基本过程是这样的：\n\n<pre>\n1.客户端向服务器端所要并验证公钥。\n2.双方协商生成“对话密钥”。\n3.双方采用“对话密钥”进行加密通信。\n</pre>\n\n上面过程的前两步，又称为“握手阶段”。\n### 四.握手阶段的详细过程\n“握手阶段”设计四次通信，我们一个个来看。需要注意的是，“握手阶段”的所有通信都是明文的。\n\n#### 4.1客户端发出请求\n首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做 ClientHello 请求。   \n在这一步，客户端主要向服务器提供一下信息：\n\n<pre>\n1.支持的协议的版本。\n2.一个客户端生成的随机数，稍后用于生成”对话密钥“。\n3.支持的加密方法。\n4.支持的压缩方法。\n</pre>\n\n这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则\n会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。   \n\n对于虚拟主机用户来说，这当然不方便。2006年，TLS协议加入了一个 Server Name Indication 扩展，允许客户\n端向服务器提供它请求的域名。   \n\n#### 4.2服务器回应\n服务器收到客户端请求后，向客户端发出回应，这叫做 ServerHello。服务器的回应包含以下内容。\n\n<pre>\n1.确认使用的加密通信协议版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n2.一个服务器生成的随机数，稍后用于生成”对话密钥“。\n3.确认使用的加密方法。\n4.服务器证书。\n</pre>\n\n除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书“。比如，金融机构往往只允许认证客户端连入自己的网络，就会向正式客户提供USB密钥，里面包含了一张客户端证书。   \n\n#### 4.3客户端回应\n客户端收到服务器回应后，首先验证服务器证书。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。   \n\n如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。\n\n<pre>\n1.一个随机数。该随机数用于服务器公钥加密，防止被窃听。\n2.编码改变通知，表示随后的信息都用双方商定的加密方法和密钥发送。\n3.客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供服务器校验。\n</pre>\n\n上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称\"pre-master key\"。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把\"会话密钥\"。   \n\n至于为什么一定要用三个随机数，来生成\"会话密钥\"，解释：   \n>\"不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。\n对于 RSA 密钥交换算法来说，pre-master-key 本身就是一个随机数，再加上 hello 消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。\npre master 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么 pre master secret 就有可能被猜出来，那么仅适用 pre master secret 作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上 pre master secret 三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。\"\n\n此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。   \n\n#### 4.4 服务器的最后回应\n服务器收到客户端的第三个随机数 pre-master key 之后，计算生成本次会话所用的\"会话密钥\"。然后，向客户端最后发送下面信息。\n\n<pre>\n1.编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。\n2.服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供客户端校验。\n</pre>\n\n至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用\"会话密钥\"加密内容。","source":"_posts/SSL-TLS.md","raw":"title: SSL/TLS\ndate: 2017-02-03 16:27:50\ntags: SSL/TLS\n---\n## SSL/TLS协议运行机制\n---\n互联网的通信安全，建立在 SSL/TLS 协议之上。   \n本文简要介绍 SSL/TLS 协议的运行机制。   \n### 一.作用\n不使用 SSL/TLS 的 HTTP 通信，就是不加密的通信。所有信息明文传播，带来了三大风险：\n\n<pre>\n1.窃听风险 \n2.篡改风险\n3.冒充风险\n</pre>\n\nSSL/TLS 协议就是为了解决这三大风险而设计的，希望达到：\n\n<pre>\n1.所有信息都是加密传播，第三方无法窃听。\n2.具有校验机制，一旦被篡改，通信双方会立刻发现。\n3.具有身份证书，防止身份被冒充。\n</pre>\n\n互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得 SSL/TLS 协议变得异常复杂。\n### 二.历史\n互联网加密通信协议的历史，几乎与互联网一样长。\n\n<pre>\n1994年，NetScape 公司设计了 SSL 协议1.0版本，但是未发布。\n1995年，NetScape 公司发布了 SSL 2.0版，但很快发现有严重漏洞。\n1996年，SSL 3.0 版问世，得到大规模应用。\n1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0版。\n2006年和2008年，TLS 进行了两次升级，分别是 TLS 1.1版和 TLS 1.2版。\n</pre>\n\n目前，应用最广泛的是 TLS 1.0，接下来是 SSL 3.0。但是，主流浏览器都实现了 TLS 1.2的支持。   \nTLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3。\n### 三.基本的运行过程\nSSL/TLS 协议的基本思路是采用公钥加密法，也就是说客户端先向服务器端索要公钥，然后用公钥加密信息，服务器接收密文后，用自己的私钥解密。   \n但是，这里有两个问题：\n\n<pre>\n1.如何保证公钥不被篡改？\n解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n2.公钥加密计算量太大，如何减少耗用的时间？\n解决方法：每一次对话（session），客户端和服务器端都生成一个“对话密钥”（session key），用它来加密信息。\n由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运\n算的消耗时间。\n</pre>\n\n因此，SSL/TLS协议的基本过程是这样的：\n\n<pre>\n1.客户端向服务器端所要并验证公钥。\n2.双方协商生成“对话密钥”。\n3.双方采用“对话密钥”进行加密通信。\n</pre>\n\n上面过程的前两步，又称为“握手阶段”。\n### 四.握手阶段的详细过程\n“握手阶段”设计四次通信，我们一个个来看。需要注意的是，“握手阶段”的所有通信都是明文的。\n\n#### 4.1客户端发出请求\n首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做 ClientHello 请求。   \n在这一步，客户端主要向服务器提供一下信息：\n\n<pre>\n1.支持的协议的版本。\n2.一个客户端生成的随机数，稍后用于生成”对话密钥“。\n3.支持的加密方法。\n4.支持的压缩方法。\n</pre>\n\n这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则\n会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。   \n\n对于虚拟主机用户来说，这当然不方便。2006年，TLS协议加入了一个 Server Name Indication 扩展，允许客户\n端向服务器提供它请求的域名。   \n\n#### 4.2服务器回应\n服务器收到客户端请求后，向客户端发出回应，这叫做 ServerHello。服务器的回应包含以下内容。\n\n<pre>\n1.确认使用的加密通信协议版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n2.一个服务器生成的随机数，稍后用于生成”对话密钥“。\n3.确认使用的加密方法。\n4.服务器证书。\n</pre>\n\n除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书“。比如，金融机构往往只允许认证客户端连入自己的网络，就会向正式客户提供USB密钥，里面包含了一张客户端证书。   \n\n#### 4.3客户端回应\n客户端收到服务器回应后，首先验证服务器证书。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。   \n\n如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。\n\n<pre>\n1.一个随机数。该随机数用于服务器公钥加密，防止被窃听。\n2.编码改变通知，表示随后的信息都用双方商定的加密方法和密钥发送。\n3.客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供服务器校验。\n</pre>\n\n上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称\"pre-master key\"。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把\"会话密钥\"。   \n\n至于为什么一定要用三个随机数，来生成\"会话密钥\"，解释：   \n>\"不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。\n对于 RSA 密钥交换算法来说，pre-master-key 本身就是一个随机数，再加上 hello 消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。\npre master 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么 pre master secret 就有可能被猜出来，那么仅适用 pre master secret 作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上 pre master secret 三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。\"\n\n此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。   \n\n#### 4.4 服务器的最后回应\n服务器收到客户端的第三个随机数 pre-master key 之后，计算生成本次会话所用的\"会话密钥\"。然后，向客户端最后发送下面信息。\n\n<pre>\n1.编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。\n2.服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供客户端校验。\n</pre>\n\n至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用\"会话密钥\"加密内容。","slug":"SSL-TLS","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nn000d7ysloqba5x2r","content":"<h2 id=\"SSL-TLS协议运行机制\"><a href=\"#SSL-TLS协议运行机制\" class=\"headerlink\" title=\"SSL/TLS协议运行机制\"></a>SSL/TLS协议运行机制</h2><hr>\n<p>互联网的通信安全，建立在 SSL/TLS 协议之上。<br>本文简要介绍 SSL/TLS 协议的运行机制。   </p>\n<h3 id=\"一-作用\"><a href=\"#一-作用\" class=\"headerlink\" title=\"一.作用\"></a>一.作用</h3><p>不使用 SSL/TLS 的 HTTP 通信，就是不加密的通信。所有信息明文传播，带来了三大风险：</p>\n<pre>\n1.窃听风险 \n2.篡改风险\n3.冒充风险\n</pre>\n\n<p>SSL/TLS 协议就是为了解决这三大风险而设计的，希望达到：</p>\n<pre>\n1.所有信息都是加密传播，第三方无法窃听。\n2.具有校验机制，一旦被篡改，通信双方会立刻发现。\n3.具有身份证书，防止身份被冒充。\n</pre>\n\n<p>互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得 SSL/TLS 协议变得异常复杂。</p>\n<h3 id=\"二-历史\"><a href=\"#二-历史\" class=\"headerlink\" title=\"二.历史\"></a>二.历史</h3><p>互联网加密通信协议的历史，几乎与互联网一样长。</p>\n<pre>\n1994年，NetScape 公司设计了 SSL 协议1.0版本，但是未发布。\n1995年，NetScape 公司发布了 SSL 2.0版，但很快发现有严重漏洞。\n1996年，SSL 3.0 版问世，得到大规模应用。\n1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0版。\n2006年和2008年，TLS 进行了两次升级，分别是 TLS 1.1版和 TLS 1.2版。\n</pre>\n\n<p>目前，应用最广泛的是 TLS 1.0，接下来是 SSL 3.0。但是，主流浏览器都实现了 TLS 1.2的支持。<br>TLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3。</p>\n<h3 id=\"三-基本的运行过程\"><a href=\"#三-基本的运行过程\" class=\"headerlink\" title=\"三.基本的运行过程\"></a>三.基本的运行过程</h3><p>SSL/TLS 协议的基本思路是采用公钥加密法，也就是说客户端先向服务器端索要公钥，然后用公钥加密信息，服务器接收密文后，用自己的私钥解密。<br>但是，这里有两个问题：</p>\n<pre>\n1.如何保证公钥不被篡改？\n解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n2.公钥加密计算量太大，如何减少耗用的时间？\n解决方法：每一次对话（session），客户端和服务器端都生成一个“对话密钥”（session key），用它来加密信息。\n由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运\n算的消耗时间。\n</pre>\n\n<p>因此，SSL/TLS协议的基本过程是这样的：</p>\n<pre>\n1.客户端向服务器端所要并验证公钥。\n2.双方协商生成“对话密钥”。\n3.双方采用“对话密钥”进行加密通信。\n</pre>\n\n<p>上面过程的前两步，又称为“握手阶段”。</p>\n<h3 id=\"四-握手阶段的详细过程\"><a href=\"#四-握手阶段的详细过程\" class=\"headerlink\" title=\"四.握手阶段的详细过程\"></a>四.握手阶段的详细过程</h3><p>“握手阶段”设计四次通信，我们一个个来看。需要注意的是，“握手阶段”的所有通信都是明文的。</p>\n<h4 id=\"4-1客户端发出请求\"><a href=\"#4-1客户端发出请求\" class=\"headerlink\" title=\"4.1客户端发出请求\"></a>4.1客户端发出请求</h4><p>首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做 ClientHello 请求。<br>在这一步，客户端主要向服务器提供一下信息：</p>\n<pre>\n1.支持的协议的版本。\n2.一个客户端生成的随机数，稍后用于生成”对话密钥“。\n3.支持的加密方法。\n4.支持的压缩方法。\n</pre>\n\n<p>这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则<br>会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。   </p>\n<p>对于虚拟主机用户来说，这当然不方便。2006年，TLS协议加入了一个 Server Name Indication 扩展，允许客户<br>端向服务器提供它请求的域名。   </p>\n<h4 id=\"4-2服务器回应\"><a href=\"#4-2服务器回应\" class=\"headerlink\" title=\"4.2服务器回应\"></a>4.2服务器回应</h4><p>服务器收到客户端请求后，向客户端发出回应，这叫做 ServerHello。服务器的回应包含以下内容。</p>\n<pre>\n1.确认使用的加密通信协议版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n2.一个服务器生成的随机数，稍后用于生成”对话密钥“。\n3.确认使用的加密方法。\n4.服务器证书。\n</pre>\n\n<p>除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书“。比如，金融机构往往只允许认证客户端连入自己的网络，就会向正式客户提供USB密钥，里面包含了一张客户端证书。   </p>\n<h4 id=\"4-3客户端回应\"><a href=\"#4-3客户端回应\" class=\"headerlink\" title=\"4.3客户端回应\"></a>4.3客户端回应</h4><p>客户端收到服务器回应后，首先验证服务器证书。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。   </p>\n<p>如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。</p>\n<pre>\n1.一个随机数。该随机数用于服务器公钥加密，防止被窃听。\n2.编码改变通知，表示随后的信息都用双方商定的加密方法和密钥发送。\n3.客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供服务器校验。\n</pre>\n\n<p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。   </p>\n<p>至于为什么一定要用三个随机数，来生成”会话密钥”，解释：   </p>\n<blockquote>\n<p>“不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。<br>对于 RSA 密钥交换算法来说，pre-master-key 本身就是一个随机数，再加上 hello 消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。<br>pre master 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么 pre master secret 就有可能被猜出来，那么仅适用 pre master secret 作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上 pre master secret 三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。”</p>\n</blockquote>\n<p>此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。   </p>\n<h4 id=\"4-4-服务器的最后回应\"><a href=\"#4-4-服务器的最后回应\" class=\"headerlink\" title=\"4.4 服务器的最后回应\"></a>4.4 服务器的最后回应</h4><p>服务器收到客户端的第三个随机数 pre-master key 之后，计算生成本次会话所用的”会话密钥”。然后，向客户端最后发送下面信息。</p>\n<pre>\n1.编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。\n2.服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供客户端校验。\n</pre>\n\n<p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用”会话密钥”加密内容。</p>\n","excerpt":"","more":"<h2 id=\"SSL-TLS协议运行机制\"><a href=\"#SSL-TLS协议运行机制\" class=\"headerlink\" title=\"SSL/TLS协议运行机制\"></a>SSL/TLS协议运行机制</h2><hr>\n<p>互联网的通信安全，建立在 SSL/TLS 协议之上。<br>本文简要介绍 SSL/TLS 协议的运行机制。   </p>\n<h3 id=\"一-作用\"><a href=\"#一-作用\" class=\"headerlink\" title=\"一.作用\"></a>一.作用</h3><p>不使用 SSL/TLS 的 HTTP 通信，就是不加密的通信。所有信息明文传播，带来了三大风险：</p>\n<pre>\n1.窃听风险 \n2.篡改风险\n3.冒充风险\n</pre>\n\n<p>SSL/TLS 协议就是为了解决这三大风险而设计的，希望达到：</p>\n<pre>\n1.所有信息都是加密传播，第三方无法窃听。\n2.具有校验机制，一旦被篡改，通信双方会立刻发现。\n3.具有身份证书，防止身份被冒充。\n</pre>\n\n<p>互联网是开放环境，通信双方都是未知身份，这为协议的设计带来了很大的难度。而且，协议还必须能够经受所有匪夷所思的攻击，这使得 SSL/TLS 协议变得异常复杂。</p>\n<h3 id=\"二-历史\"><a href=\"#二-历史\" class=\"headerlink\" title=\"二.历史\"></a>二.历史</h3><p>互联网加密通信协议的历史，几乎与互联网一样长。</p>\n<pre>\n1994年，NetScape 公司设计了 SSL 协议1.0版本，但是未发布。\n1995年，NetScape 公司发布了 SSL 2.0版，但很快发现有严重漏洞。\n1996年，SSL 3.0 版问世，得到大规模应用。\n1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0版。\n2006年和2008年，TLS 进行了两次升级，分别是 TLS 1.1版和 TLS 1.2版。\n</pre>\n\n<p>目前，应用最广泛的是 TLS 1.0，接下来是 SSL 3.0。但是，主流浏览器都实现了 TLS 1.2的支持。<br>TLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3。</p>\n<h3 id=\"三-基本的运行过程\"><a href=\"#三-基本的运行过程\" class=\"headerlink\" title=\"三.基本的运行过程\"></a>三.基本的运行过程</h3><p>SSL/TLS 协议的基本思路是采用公钥加密法，也就是说客户端先向服务器端索要公钥，然后用公钥加密信息，服务器接收密文后，用自己的私钥解密。<br>但是，这里有两个问题：</p>\n<pre>\n1.如何保证公钥不被篡改？\n解决方法：将公钥放在数字证书中。只要证书是可信的，公钥就是可信的。\n\n2.公钥加密计算量太大，如何减少耗用的时间？\n解决方法：每一次对话（session），客户端和服务器端都生成一个“对话密钥”（session key），用它来加密信息。\n由于“对话密钥”是对称加密，所以运算速度非常快，而服务器公钥只用于加密“对话密钥”本身，这样就减少了加密运\n算的消耗时间。\n</pre>\n\n<p>因此，SSL/TLS协议的基本过程是这样的：</p>\n<pre>\n1.客户端向服务器端所要并验证公钥。\n2.双方协商生成“对话密钥”。\n3.双方采用“对话密钥”进行加密通信。\n</pre>\n\n<p>上面过程的前两步，又称为“握手阶段”。</p>\n<h3 id=\"四-握手阶段的详细过程\"><a href=\"#四-握手阶段的详细过程\" class=\"headerlink\" title=\"四.握手阶段的详细过程\"></a>四.握手阶段的详细过程</h3><p>“握手阶段”设计四次通信，我们一个个来看。需要注意的是，“握手阶段”的所有通信都是明文的。</p>\n<h4 id=\"4-1客户端发出请求\"><a href=\"#4-1客户端发出请求\" class=\"headerlink\" title=\"4.1客户端发出请求\"></a>4.1客户端发出请求</h4><p>首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做 ClientHello 请求。<br>在这一步，客户端主要向服务器提供一下信息：</p>\n<pre>\n1.支持的协议的版本。\n2.一个客户端生成的随机数，稍后用于生成”对话密钥“。\n3.支持的加密方法。\n4.支持的压缩方法。\n</pre>\n\n<p>这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则<br>会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。   </p>\n<p>对于虚拟主机用户来说，这当然不方便。2006年，TLS协议加入了一个 Server Name Indication 扩展，允许客户<br>端向服务器提供它请求的域名。   </p>\n<h4 id=\"4-2服务器回应\"><a href=\"#4-2服务器回应\" class=\"headerlink\" title=\"4.2服务器回应\"></a>4.2服务器回应</h4><p>服务器收到客户端请求后，向客户端发出回应，这叫做 ServerHello。服务器的回应包含以下内容。</p>\n<pre>\n1.确认使用的加密通信协议版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。\n2.一个服务器生成的随机数，稍后用于生成”对话密钥“。\n3.确认使用的加密方法。\n4.服务器证书。\n</pre>\n\n<p>除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书“。比如，金融机构往往只允许认证客户端连入自己的网络，就会向正式客户提供USB密钥，里面包含了一张客户端证书。   </p>\n<h4 id=\"4-3客户端回应\"><a href=\"#4-3客户端回应\" class=\"headerlink\" title=\"4.3客户端回应\"></a>4.3客户端回应</h4><p>客户端收到服务器回应后，首先验证服务器证书。如果证书不是可信机构颁布，或者证书中的域名与实际域名不一致，或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。   </p>\n<p>如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。</p>\n<pre>\n1.一个随机数。该随机数用于服务器公钥加密，防止被窃听。\n2.编码改变通知，表示随后的信息都用双方商定的加密方法和密钥发送。\n3.客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供服务器校验。\n</pre>\n\n<p>上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。   </p>\n<p>至于为什么一定要用三个随机数，来生成”会话密钥”，解释：   </p>\n<blockquote>\n<p>“不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。<br>对于 RSA 密钥交换算法来说，pre-master-key 本身就是一个随机数，再加上 hello 消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。<br>pre master 的存在在于 SSL 协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么 pre master secret 就有可能被猜出来，那么仅适用 pre master secret 作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上 pre master secret 三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。”</p>\n</blockquote>\n<p>此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。   </p>\n<h4 id=\"4-4-服务器的最后回应\"><a href=\"#4-4-服务器的最后回应\" class=\"headerlink\" title=\"4.4 服务器的最后回应\"></a>4.4 服务器的最后回应</h4><p>服务器收到客户端的第三个随机数 pre-master key 之后，计算生成本次会话所用的”会话密钥”。然后，向客户端最后发送下面信息。</p>\n<pre>\n1.编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。\n2.服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的 hash 值，用来\n供客户端校验。\n</pre>\n\n<p>至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用”会话密钥”加密内容。</p>\n"},{"title":"信息系统管理与安全(3)","date":"2016-03-31T05:42:40.000Z","_content":"## 信息安全   \n### 资产管理：责任划分   \n### 编制资产清单：   \n - 识别所有资产   \n - 对资产的所有权、信息进行分类，并形成文件   \n - 资产清单内容：资产类型、格式、位置、备份信息、许可信息、业务价值   \n\n### 明确资产所有权：   \n - 与信息处理有关的所有信息资产都应当由指定的部门   \n\n### 资产的使用   \n - 应当明确信息资产的使用规划，并形成文件，加以实施   \n\n### 风险因素评估：信息资产评估   \n>根据客户的行业特点、应用特性的安全目标，信息资产的赋值形式：   \n - 形式一：为机密性、完整性、可用性分别赋予不同的价值等级   \n - 形式二：依据机密性、完整性、可用性赋予等级，经过综合评定得出资产价值   \n - 形式三：用相对信息价值的货币来衡量   \n\n### 资产的机密性赋值参考   \n - 3 高   \n - 2 中等   \n - 1 低   \n - 0 可忽略   \n\n### 资产的重要性等级划分参考   \n - 4 高 严重损失   \n - 3 中 中等程度损失   \n - 2 低   \n - 1 很低   \n\n### 信息资产价值的货币化表示   \n\n### 威胁分析   \n - 潜在威胁分析   \n - 威胁审计和入侵检测   \n - 安全威胁综合分析   \n\n### 威胁来源于识别   \n> 外在   \n > 环境因素   \n  - 自然环境   \n  - 物流环境   \n  - 人文环境   \n > 人为因素   \n  - 无恶意内部人员   \n  - 有恶意内部人员   \n  - 第三方   \n  - 外部人员   \n> 内在   \n - 任务确定   \n - 系统设计   \n\n### 威胁发生的可能性   \n - 应根据经验和有关统计数据判断威胁发生的频率或概率   \n - 影响威胁发生可能性的因素：   \n  - 资产的吸引力   \n  - 组织的知名度   \n  - 资产转换成利益的容易程度   \n  - 威胁的技术力量   \n  - 脆弱性被利用的难易程度   \n - 有关统计信息获取的取到包括   \n  - 依赖历史纪录或安全事件报告   \n  - 通过各种设备，获取威胁发生的数据统计和分析结果   \n  - 各种日志中威胁发生的数据统计和分析结果   \n  - 近年来权威机构发布的报告   \n\n### 威胁产生的影响   \n - 对威胁发生概率和产生影响的评估结论是识别和确定每种威胁发生风险的等级   \n  - 先确定没有控制措施条件下威胁所产生的影响，建立基本风险基线   \n  - 考虑已有控制措施对威胁可能产生的阻碍作用，确定风险级别   \n\n### 脆弱性分类   \n技术脆弱性：物理安全、网络安全、系统安全、应用安全   \n管理脆弱性：安全管理   \n","source":"_posts/course-note-3.md","raw":"title: 信息系统管理与安全(3)\ndate: 2016-03-31 13:42:40\ntags: 信息系统管理与安全\n---\n## 信息安全   \n### 资产管理：责任划分   \n### 编制资产清单：   \n - 识别所有资产   \n - 对资产的所有权、信息进行分类，并形成文件   \n - 资产清单内容：资产类型、格式、位置、备份信息、许可信息、业务价值   \n\n### 明确资产所有权：   \n - 与信息处理有关的所有信息资产都应当由指定的部门   \n\n### 资产的使用   \n - 应当明确信息资产的使用规划，并形成文件，加以实施   \n\n### 风险因素评估：信息资产评估   \n>根据客户的行业特点、应用特性的安全目标，信息资产的赋值形式：   \n - 形式一：为机密性、完整性、可用性分别赋予不同的价值等级   \n - 形式二：依据机密性、完整性、可用性赋予等级，经过综合评定得出资产价值   \n - 形式三：用相对信息价值的货币来衡量   \n\n### 资产的机密性赋值参考   \n - 3 高   \n - 2 中等   \n - 1 低   \n - 0 可忽略   \n\n### 资产的重要性等级划分参考   \n - 4 高 严重损失   \n - 3 中 中等程度损失   \n - 2 低   \n - 1 很低   \n\n### 信息资产价值的货币化表示   \n\n### 威胁分析   \n - 潜在威胁分析   \n - 威胁审计和入侵检测   \n - 安全威胁综合分析   \n\n### 威胁来源于识别   \n> 外在   \n > 环境因素   \n  - 自然环境   \n  - 物流环境   \n  - 人文环境   \n > 人为因素   \n  - 无恶意内部人员   \n  - 有恶意内部人员   \n  - 第三方   \n  - 外部人员   \n> 内在   \n - 任务确定   \n - 系统设计   \n\n### 威胁发生的可能性   \n - 应根据经验和有关统计数据判断威胁发生的频率或概率   \n - 影响威胁发生可能性的因素：   \n  - 资产的吸引力   \n  - 组织的知名度   \n  - 资产转换成利益的容易程度   \n  - 威胁的技术力量   \n  - 脆弱性被利用的难易程度   \n - 有关统计信息获取的取到包括   \n  - 依赖历史纪录或安全事件报告   \n  - 通过各种设备，获取威胁发生的数据统计和分析结果   \n  - 各种日志中威胁发生的数据统计和分析结果   \n  - 近年来权威机构发布的报告   \n\n### 威胁产生的影响   \n - 对威胁发生概率和产生影响的评估结论是识别和确定每种威胁发生风险的等级   \n  - 先确定没有控制措施条件下威胁所产生的影响，建立基本风险基线   \n  - 考虑已有控制措施对威胁可能产生的阻碍作用，确定风险级别   \n\n### 脆弱性分类   \n技术脆弱性：物理安全、网络安全、系统安全、应用安全   \n管理脆弱性：安全管理   \n","slug":"course-note-3","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9np000f7ysl1k5pjl9a","content":"<h2 id=\"信息安全\"><a href=\"#信息安全\" class=\"headerlink\" title=\"信息安全\"></a>信息安全</h2><h3 id=\"资产管理：责任划分\"><a href=\"#资产管理：责任划分\" class=\"headerlink\" title=\"资产管理：责任划分\"></a>资产管理：责任划分</h3><h3 id=\"编制资产清单：\"><a href=\"#编制资产清单：\" class=\"headerlink\" title=\"编制资产清单：\"></a>编制资产清单：</h3><ul>\n<li>识别所有资产   </li>\n<li>对资产的所有权、信息进行分类，并形成文件   </li>\n<li>资产清单内容：资产类型、格式、位置、备份信息、许可信息、业务价值   </li>\n</ul>\n<h3 id=\"明确资产所有权：\"><a href=\"#明确资产所有权：\" class=\"headerlink\" title=\"明确资产所有权：\"></a>明确资产所有权：</h3><ul>\n<li>与信息处理有关的所有信息资产都应当由指定的部门   </li>\n</ul>\n<h3 id=\"资产的使用\"><a href=\"#资产的使用\" class=\"headerlink\" title=\"资产的使用\"></a>资产的使用</h3><ul>\n<li>应当明确信息资产的使用规划，并形成文件，加以实施   </li>\n</ul>\n<h3 id=\"风险因素评估：信息资产评估\"><a href=\"#风险因素评估：信息资产评估\" class=\"headerlink\" title=\"风险因素评估：信息资产评估\"></a>风险因素评估：信息资产评估</h3><blockquote>\n<p>根据客户的行业特点、应用特性的安全目标，信息资产的赋值形式：   </p>\n<ul>\n<li>形式一：为机密性、完整性、可用性分别赋予不同的价值等级   </li>\n<li>形式二：依据机密性、完整性、可用性赋予等级，经过综合评定得出资产价值   </li>\n<li>形式三：用相对信息价值的货币来衡量   </li>\n</ul>\n</blockquote>\n<h3 id=\"资产的机密性赋值参考\"><a href=\"#资产的机密性赋值参考\" class=\"headerlink\" title=\"资产的机密性赋值参考\"></a>资产的机密性赋值参考</h3><ul>\n<li>3 高   </li>\n<li>2 中等   </li>\n<li>1 低   </li>\n<li>0 可忽略   </li>\n</ul>\n<h3 id=\"资产的重要性等级划分参考\"><a href=\"#资产的重要性等级划分参考\" class=\"headerlink\" title=\"资产的重要性等级划分参考\"></a>资产的重要性等级划分参考</h3><ul>\n<li>4 高 严重损失   </li>\n<li>3 中 中等程度损失   </li>\n<li>2 低   </li>\n<li>1 很低   </li>\n</ul>\n<h3 id=\"信息资产价值的货币化表示\"><a href=\"#信息资产价值的货币化表示\" class=\"headerlink\" title=\"信息资产价值的货币化表示\"></a>信息资产价值的货币化表示</h3><h3 id=\"威胁分析\"><a href=\"#威胁分析\" class=\"headerlink\" title=\"威胁分析\"></a>威胁分析</h3><ul>\n<li>潜在威胁分析   </li>\n<li>威胁审计和入侵检测   </li>\n<li>安全威胁综合分析   </li>\n</ul>\n<h3 id=\"威胁来源于识别\"><a href=\"#威胁来源于识别\" class=\"headerlink\" title=\"威胁来源于识别\"></a>威胁来源于识别</h3><blockquote>\n<p>外在<br>环境因素   </p>\n<ul>\n<li>自然环境   </li>\n<li>物流环境   </li>\n<li>人文环境<br>人为因素   </li>\n<li>无恶意内部人员   </li>\n<li>有恶意内部人员   </li>\n<li>第三方   </li>\n<li>外部人员<br>内在   <ul>\n<li>任务确定   </li>\n<li>系统设计   </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"威胁发生的可能性\"><a href=\"#威胁发生的可能性\" class=\"headerlink\" title=\"威胁发生的可能性\"></a>威胁发生的可能性</h3><ul>\n<li>应根据经验和有关统计数据判断威胁发生的频率或概率   </li>\n<li>影响威胁发生可能性的因素：   <ul>\n<li>资产的吸引力   </li>\n<li>组织的知名度   </li>\n<li>资产转换成利益的容易程度   </li>\n<li>威胁的技术力量   </li>\n<li>脆弱性被利用的难易程度   </li>\n</ul>\n</li>\n<li>有关统计信息获取的取到包括   <ul>\n<li>依赖历史纪录或安全事件报告   </li>\n<li>通过各种设备，获取威胁发生的数据统计和分析结果   </li>\n<li>各种日志中威胁发生的数据统计和分析结果   </li>\n<li>近年来权威机构发布的报告   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"威胁产生的影响\"><a href=\"#威胁产生的影响\" class=\"headerlink\" title=\"威胁产生的影响\"></a>威胁产生的影响</h3><ul>\n<li>对威胁发生概率和产生影响的评估结论是识别和确定每种威胁发生风险的等级   <ul>\n<li>先确定没有控制措施条件下威胁所产生的影响，建立基本风险基线   </li>\n<li>考虑已有控制措施对威胁可能产生的阻碍作用，确定风险级别   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"脆弱性分类\"><a href=\"#脆弱性分类\" class=\"headerlink\" title=\"脆弱性分类\"></a>脆弱性分类</h3><p>技术脆弱性：物理安全、网络安全、系统安全、应用安全<br>管理脆弱性：安全管理   </p>\n","excerpt":"","more":"<h2 id=\"信息安全\"><a href=\"#信息安全\" class=\"headerlink\" title=\"信息安全\"></a>信息安全</h2><h3 id=\"资产管理：责任划分\"><a href=\"#资产管理：责任划分\" class=\"headerlink\" title=\"资产管理：责任划分\"></a>资产管理：责任划分</h3><h3 id=\"编制资产清单：\"><a href=\"#编制资产清单：\" class=\"headerlink\" title=\"编制资产清单：\"></a>编制资产清单：</h3><ul>\n<li>识别所有资产   </li>\n<li>对资产的所有权、信息进行分类，并形成文件   </li>\n<li>资产清单内容：资产类型、格式、位置、备份信息、许可信息、业务价值   </li>\n</ul>\n<h3 id=\"明确资产所有权：\"><a href=\"#明确资产所有权：\" class=\"headerlink\" title=\"明确资产所有权：\"></a>明确资产所有权：</h3><ul>\n<li>与信息处理有关的所有信息资产都应当由指定的部门   </li>\n</ul>\n<h3 id=\"资产的使用\"><a href=\"#资产的使用\" class=\"headerlink\" title=\"资产的使用\"></a>资产的使用</h3><ul>\n<li>应当明确信息资产的使用规划，并形成文件，加以实施   </li>\n</ul>\n<h3 id=\"风险因素评估：信息资产评估\"><a href=\"#风险因素评估：信息资产评估\" class=\"headerlink\" title=\"风险因素评估：信息资产评估\"></a>风险因素评估：信息资产评估</h3><blockquote>\n<p>根据客户的行业特点、应用特性的安全目标，信息资产的赋值形式：   </p>\n<ul>\n<li>形式一：为机密性、完整性、可用性分别赋予不同的价值等级   </li>\n<li>形式二：依据机密性、完整性、可用性赋予等级，经过综合评定得出资产价值   </li>\n<li>形式三：用相对信息价值的货币来衡量   </li>\n</ul>\n</blockquote>\n<h3 id=\"资产的机密性赋值参考\"><a href=\"#资产的机密性赋值参考\" class=\"headerlink\" title=\"资产的机密性赋值参考\"></a>资产的机密性赋值参考</h3><ul>\n<li>3 高   </li>\n<li>2 中等   </li>\n<li>1 低   </li>\n<li>0 可忽略   </li>\n</ul>\n<h3 id=\"资产的重要性等级划分参考\"><a href=\"#资产的重要性等级划分参考\" class=\"headerlink\" title=\"资产的重要性等级划分参考\"></a>资产的重要性等级划分参考</h3><ul>\n<li>4 高 严重损失   </li>\n<li>3 中 中等程度损失   </li>\n<li>2 低   </li>\n<li>1 很低   </li>\n</ul>\n<h3 id=\"信息资产价值的货币化表示\"><a href=\"#信息资产价值的货币化表示\" class=\"headerlink\" title=\"信息资产价值的货币化表示\"></a>信息资产价值的货币化表示</h3><h3 id=\"威胁分析\"><a href=\"#威胁分析\" class=\"headerlink\" title=\"威胁分析\"></a>威胁分析</h3><ul>\n<li>潜在威胁分析   </li>\n<li>威胁审计和入侵检测   </li>\n<li>安全威胁综合分析   </li>\n</ul>\n<h3 id=\"威胁来源于识别\"><a href=\"#威胁来源于识别\" class=\"headerlink\" title=\"威胁来源于识别\"></a>威胁来源于识别</h3><blockquote>\n<p>外在<br>环境因素   </p>\n<ul>\n<li>自然环境   </li>\n<li>物流环境   </li>\n<li>人文环境<br>人为因素   </li>\n<li>无恶意内部人员   </li>\n<li>有恶意内部人员   </li>\n<li>第三方   </li>\n<li>外部人员<br>内在   <ul>\n<li>任务确定   </li>\n<li>系统设计   </li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"威胁发生的可能性\"><a href=\"#威胁发生的可能性\" class=\"headerlink\" title=\"威胁发生的可能性\"></a>威胁发生的可能性</h3><ul>\n<li>应根据经验和有关统计数据判断威胁发生的频率或概率   </li>\n<li>影响威胁发生可能性的因素：   <ul>\n<li>资产的吸引力   </li>\n<li>组织的知名度   </li>\n<li>资产转换成利益的容易程度   </li>\n<li>威胁的技术力量   </li>\n<li>脆弱性被利用的难易程度   </li>\n</ul>\n</li>\n<li>有关统计信息获取的取到包括   <ul>\n<li>依赖历史纪录或安全事件报告   </li>\n<li>通过各种设备，获取威胁发生的数据统计和分析结果   </li>\n<li>各种日志中威胁发生的数据统计和分析结果   </li>\n<li>近年来权威机构发布的报告   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"威胁产生的影响\"><a href=\"#威胁产生的影响\" class=\"headerlink\" title=\"威胁产生的影响\"></a>威胁产生的影响</h3><ul>\n<li>对威胁发生概率和产生影响的评估结论是识别和确定每种威胁发生风险的等级   <ul>\n<li>先确定没有控制措施条件下威胁所产生的影响，建立基本风险基线   </li>\n<li>考虑已有控制措施对威胁可能产生的阻碍作用，确定风险级别   </li>\n</ul>\n</li>\n</ul>\n<h3 id=\"脆弱性分类\"><a href=\"#脆弱性分类\" class=\"headerlink\" title=\"脆弱性分类\"></a>脆弱性分类</h3><p>技术脆弱性：物理安全、网络安全、系统安全、应用安全<br>管理脆弱性：安全管理   </p>\n"},{"title":"信息系统管理与安全(1)","date":"2016-03-14T09:05:00.000Z","_content":"\n### 软件可信性问题：\n 1. 空间技术\n 2. 医疗系统   \n\t原因：总体安全设计有缺陷\n           软件编码错误\n\t   取消了硬件安全联锁\n\t   安全分析只考虑了硬件\n\t   操作人员的差错\n\t   对仪器的安全校验粗心大意   \n\n### 传统的定义：失效、故障   \n 1. 失效：电路（或系统）发生了违背设计规定功能的情况，便认为该电路（或系统）失效。   \n 2. 故障：有可能引起失效的一种物理缺陷（软件的缺陷也成为bug）   \n\n### 失效分析、失效模式和实效机理   \n\n 1. 失效分析：分析失效的发生和影响，确定失效模式，研究失效机理，尽可能提供改进的措施。\n 2. 失效模式：系统失效的表现形式\n 3. 失效机理：导致系统失效的内在原因   \n\n### 系统级软件异常（失效）的分类\n 1. 操作系统挂起\n 2. 程序挂起\n 3. 程序失败\n 4. 输入问题\n 5. 未达到要求的性能\n 6. 发现的整个产品失败\n 7. 系统错误信息\n 8. 输出问题\n 9. 其他\n\n### 差错/错误\n . 系统处在如下情况下时会发生失效\n   - 系统处于错误状态\n   - 错误状态的一部分包含在系统的外部状态中\n . 错误状态： 它是一种可以导致服务失效的状态\n . 故障是产生差错的原因，但故障不一定总是立即会产生差错\n . 从故障发生到由于该故障而发生差错的时间间隔称为故障潜伏期\n . 故障潜伏（没有发生失效），差错潜伏，发生差错/故障\n\n### 故障模型\n#### 指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型\n#### 建模要求：准确性，可处理性\n","source":"_posts/course-note-1.md","raw":"title: \"信息系统管理与安全(1)\"\ndate: 2016-03-14 17:05:00\ntags: 信息系统管理与安全\n---\n\n### 软件可信性问题：\n 1. 空间技术\n 2. 医疗系统   \n\t原因：总体安全设计有缺陷\n           软件编码错误\n\t   取消了硬件安全联锁\n\t   安全分析只考虑了硬件\n\t   操作人员的差错\n\t   对仪器的安全校验粗心大意   \n\n### 传统的定义：失效、故障   \n 1. 失效：电路（或系统）发生了违背设计规定功能的情况，便认为该电路（或系统）失效。   \n 2. 故障：有可能引起失效的一种物理缺陷（软件的缺陷也成为bug）   \n\n### 失效分析、失效模式和实效机理   \n\n 1. 失效分析：分析失效的发生和影响，确定失效模式，研究失效机理，尽可能提供改进的措施。\n 2. 失效模式：系统失效的表现形式\n 3. 失效机理：导致系统失效的内在原因   \n\n### 系统级软件异常（失效）的分类\n 1. 操作系统挂起\n 2. 程序挂起\n 3. 程序失败\n 4. 输入问题\n 5. 未达到要求的性能\n 6. 发现的整个产品失败\n 7. 系统错误信息\n 8. 输出问题\n 9. 其他\n\n### 差错/错误\n . 系统处在如下情况下时会发生失效\n   - 系统处于错误状态\n   - 错误状态的一部分包含在系统的外部状态中\n . 错误状态： 它是一种可以导致服务失效的状态\n . 故障是产生差错的原因，但故障不一定总是立即会产生差错\n . 从故障发生到由于该故障而发生差错的时间间隔称为故障潜伏期\n . 故障潜伏（没有发生失效），差错潜伏，发生差错/故障\n\n### 故障模型\n#### 指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型\n#### 建模要求：准确性，可处理性\n","slug":"course-note-1","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nr000h7ysltu0wpmpv","content":"<h3 id=\"软件可信性问题：\"><a href=\"#软件可信性问题：\" class=\"headerlink\" title=\"软件可信性问题：\"></a>软件可信性问题：</h3><ol>\n<li>空间技术</li>\n<li>医疗系统<br>原因：总体安全设计有缺陷<pre><code>软件编码错误\n</code></pre>   取消了硬件安全联锁<br>   安全分析只考虑了硬件<br>   操作人员的差错<br>   对仪器的安全校验粗心大意   </li>\n</ol>\n<h3 id=\"传统的定义：失效、故障\"><a href=\"#传统的定义：失效、故障\" class=\"headerlink\" title=\"传统的定义：失效、故障\"></a>传统的定义：失效、故障</h3><ol>\n<li>失效：电路（或系统）发生了违背设计规定功能的情况，便认为该电路（或系统）失效。   </li>\n<li>故障：有可能引起失效的一种物理缺陷（软件的缺陷也成为bug）   </li>\n</ol>\n<h3 id=\"失效分析、失效模式和实效机理\"><a href=\"#失效分析、失效模式和实效机理\" class=\"headerlink\" title=\"失效分析、失效模式和实效机理\"></a>失效分析、失效模式和实效机理</h3><ol>\n<li>失效分析：分析失效的发生和影响，确定失效模式，研究失效机理，尽可能提供改进的措施。</li>\n<li>失效模式：系统失效的表现形式</li>\n<li>失效机理：导致系统失效的内在原因   </li>\n</ol>\n<h3 id=\"系统级软件异常（失效）的分类\"><a href=\"#系统级软件异常（失效）的分类\" class=\"headerlink\" title=\"系统级软件异常（失效）的分类\"></a>系统级软件异常（失效）的分类</h3><ol>\n<li>操作系统挂起</li>\n<li>程序挂起</li>\n<li>程序失败</li>\n<li>输入问题</li>\n<li>未达到要求的性能</li>\n<li>发现的整个产品失败</li>\n<li>系统错误信息</li>\n<li>输出问题</li>\n<li>其他</li>\n</ol>\n<h3 id=\"差错-错误\"><a href=\"#差错-错误\" class=\"headerlink\" title=\"差错/错误\"></a>差错/错误</h3><p> . 系统处在如下情况下时会发生失效</p>\n<ul>\n<li>系统处于错误状态</li>\n<li>错误状态的一部分包含在系统的外部状态中<br>. 错误状态： 它是一种可以导致服务失效的状态<br>. 故障是产生差错的原因，但故障不一定总是立即会产生差错<br>. 从故障发生到由于该故障而发生差错的时间间隔称为故障潜伏期<br>. 故障潜伏（没有发生失效），差错潜伏，发生差错/故障</li>\n</ul>\n<h3 id=\"故障模型\"><a href=\"#故障模型\" class=\"headerlink\" title=\"故障模型\"></a>故障模型</h3><h4 id=\"指的是在系统的较高级别上（逻辑-门级、RTL、行为）描述物理故障的影响的模型\"><a href=\"#指的是在系统的较高级别上（逻辑-门级、RTL、行为）描述物理故障的影响的模型\" class=\"headerlink\" title=\"指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型\"></a>指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型</h4><h4 id=\"建模要求：准确性，可处理性\"><a href=\"#建模要求：准确性，可处理性\" class=\"headerlink\" title=\"建模要求：准确性，可处理性\"></a>建模要求：准确性，可处理性</h4>","excerpt":"","more":"<h3 id=\"软件可信性问题：\"><a href=\"#软件可信性问题：\" class=\"headerlink\" title=\"软件可信性问题：\"></a>软件可信性问题：</h3><ol>\n<li>空间技术</li>\n<li>医疗系统<br>原因：总体安全设计有缺陷<pre><code>软件编码错误\n</code></pre>   取消了硬件安全联锁<br>   安全分析只考虑了硬件<br>   操作人员的差错<br>   对仪器的安全校验粗心大意   </li>\n</ol>\n<h3 id=\"传统的定义：失效、故障\"><a href=\"#传统的定义：失效、故障\" class=\"headerlink\" title=\"传统的定义：失效、故障\"></a>传统的定义：失效、故障</h3><ol>\n<li>失效：电路（或系统）发生了违背设计规定功能的情况，便认为该电路（或系统）失效。   </li>\n<li>故障：有可能引起失效的一种物理缺陷（软件的缺陷也成为bug）   </li>\n</ol>\n<h3 id=\"失效分析、失效模式和实效机理\"><a href=\"#失效分析、失效模式和实效机理\" class=\"headerlink\" title=\"失效分析、失效模式和实效机理\"></a>失效分析、失效模式和实效机理</h3><ol>\n<li>失效分析：分析失效的发生和影响，确定失效模式，研究失效机理，尽可能提供改进的措施。</li>\n<li>失效模式：系统失效的表现形式</li>\n<li>失效机理：导致系统失效的内在原因   </li>\n</ol>\n<h3 id=\"系统级软件异常（失效）的分类\"><a href=\"#系统级软件异常（失效）的分类\" class=\"headerlink\" title=\"系统级软件异常（失效）的分类\"></a>系统级软件异常（失效）的分类</h3><ol>\n<li>操作系统挂起</li>\n<li>程序挂起</li>\n<li>程序失败</li>\n<li>输入问题</li>\n<li>未达到要求的性能</li>\n<li>发现的整个产品失败</li>\n<li>系统错误信息</li>\n<li>输出问题</li>\n<li>其他</li>\n</ol>\n<h3 id=\"差错-错误\"><a href=\"#差错-错误\" class=\"headerlink\" title=\"差错/错误\"></a>差错/错误</h3><p> . 系统处在如下情况下时会发生失效</p>\n<ul>\n<li>系统处于错误状态</li>\n<li>错误状态的一部分包含在系统的外部状态中<br>. 错误状态： 它是一种可以导致服务失效的状态<br>. 故障是产生差错的原因，但故障不一定总是立即会产生差错<br>. 从故障发生到由于该故障而发生差错的时间间隔称为故障潜伏期<br>. 故障潜伏（没有发生失效），差错潜伏，发生差错/故障</li>\n</ul>\n<h3 id=\"故障模型\"><a href=\"#故障模型\" class=\"headerlink\" title=\"故障模型\"></a>故障模型</h3><h4 id=\"指的是在系统的较高级别上（逻辑-门级、RTL、行为）描述物理故障的影响的模型\"><a href=\"#指的是在系统的较高级别上（逻辑-门级、RTL、行为）描述物理故障的影响的模型\" class=\"headerlink\" title=\"指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型\"></a>指的是在系统的较高级别上（逻辑/门级、RTL、行为）描述物理故障的影响的模型</h4><h4 id=\"建模要求：准确性，可处理性\"><a href=\"#建模要求：准确性，可处理性\" class=\"headerlink\" title=\"建模要求：准确性，可处理性\"></a>建模要求：准确性，可处理性</h4>"},{"title":"javascript-array-reduce","date":"2017-03-07T01:19:46.000Z","_content":"Javascript中，数据类型Array有一些非常实用而强大的原生方法，接下来对主要的四种方法：forEach, map, filter, reduce做一个使用总结，由于reduce方法用的少，而且该方法本身存在难点，所以会着重介绍reduce方法。\n\n### Array四大迭代利器\n#### 1.forEach()   \nforEach()方法接受一个回调函数。如果没有抛出异常，数组中的每个元素都将会执行一次该函数。   \n\n**语法**\n```javascript\narr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n```\n**参数**   \n\n| callback | 为每个元素执行的函数，接受三个参数 |\n| --- | --- |\n| currentValue | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | forEach()方法应用的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | undefined |\n\n**注意点**   \nforEach()将要处理的元素在callback函数第一次执行前就已经确定，所以在forEach()开始执行后添加到数组中的元素将不会被callback处理。   \n如果现有元素的值发生了改变，传到callback里的值是forEach()取到的值。   \n在取值前被删除的元素将不会被访问。如果被访问过的元素被删除了，之后的元素会被略过（索引发生了变化）。   \n没有办法停止或打断forEach()循环，除了抛出异常。\n\n#### 2.map()\nmap()方法会返回一个由提供的回调函数作用于数组中的每个元素后产生的新数组，“纯”方法，不会污染原数组。   \n\n**语法**\n```javascript\nvar new_array = arr.map(callback[, thisArg]);\n```\n**参数**   \n\n| callback | 产生新数组的函数，接受三个参数 |\n| --- | --- |\n| currentValue | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | forEach()方法应用的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | 回调函数产生的新数组 |\n\n**Examples**\n```javascript\n// 字符串中每个字符的字符码\nvar map = Array.prototype.map;\nvar a = map.call('string', function(c) {\n    return c.charCodeAt(0);\n});\n```\n```javascript\n// 反转字符串\nvar str = '12345';\nArray.prototype.map.call(str, function(c) {\n    return c;\n}).reverse().join('');\n```\n```javascript\n// 字符串转整型\n['1', '2', '3'].map(Number);\n```\n\n#### 3.filter()\nfilter()方法返回一个由提供的回调函数将数组中的每个元素过滤后组成的新数组\n\n**语法**   \n```javascript\nvar newArray = arr.filter(callback[, thisArg]);\n```\n**参数**   \n\n| callback | 用来检测数组中的每个元素，返回true保留元素，false不保留，接受三个参数 |\n| --- | --- |\n| element | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | 被过滤的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | 满足回调函数的新数组 |\n\n**Examples**\n```javascript\n// 筛选掉JSON数组中不满足条件的元素\nvar arr = [\n    {id: 15},\n    {id: -1},\n    {id: 0},\n    {id: 3},\n    {id: 12.2},\n    {},\n    {id: null},\n    {id: NaN},\n    {id: 'undefined'}\n];\n\nvar invalidEntries = 0;\nfunction isNumber(obj) {\n    return obj !== undefined && typeof(obj) === 'number' && !isNaN(obj);\n}\nfunction filterByID(item) {\n    if(isNumber(item.id)) {\n        return true;\n    }\n    invalidEntries++;\n    return false;\n}\n\nvar arrByID = arr.filter(filterByID);\n```\n```javascript\n// 数组元素查询\nvar fruits = ['apple', 'banana', 'grapes', 'mango', 'orange'];\nfunction filterItems(query) {\n    return query.filter(function(el) {\n        return el.toLowerCase().indexOf(query.toLowerCase()) > -1;\n    });\n}\n```\n\n#### 4.reduce()\n**官方定义：**The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.   \n\n**语法**   \n```javascript\narr.reduce(callback, [initialValue]);\n```\n**参数**   \n\n| callback | 作用于数组中每个元素的方法，接受四个参数 |\n| --- | --- |\n| accumulator | 作为每次迭代的初始值，同时也作为上一次迭代的结果值，如果是第一次执行callback，并且给了initialValue，则为initialValue的值，否则为数组第一个元素的值 |\n| currentValue | 数组中当前被处理的元素 |\n| currentIndex | 当前元素的索引，如果给了initialValue，索引从0开始，否则从1开始 |\n| array | reduce的数组 |\n| initialValue | (可选)callback第一次调用时使用的第一个值，即初始值 |\n| 返回值 | 返回最终的结果 |\n\n**描述**\nreduce()执行一个接受四个参数的回调函数。回调函数第一次调用时，如果有initialValue，accumulator的值为initialValue，currentValue的值为数组第一个元素的值。如果没有设置initialValue，accumulator的值为数组第一个元素的值，currentValue的值为数组第二个元素的值。   \n**Note** 如果没有提供initialValue，reduce将会从索引1开始执行callback，略过第一个索引。如果提供了，从索引0开始。   \n\n如果数组是空的，并且没有提供initialValue，将会抛出**TyoeError**。如果数组只有一个元素并且没有提供initialValue，或者数组是空的但提供了initialValue，reduce将会返回这一个孤独的值而不调用callback。   \n\n**Examples**   \n```javascript\n// 数组扁平化\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n```javascript\n// 统计数组中的值的种类\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n```javascript\n// 取出数组中的所有对象里的某一个属性的值，并返回一个包含这些值的新数组\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```","source":"_posts/javascript-array-reduce.md","raw":"title: javascript-array-reduce\ndate: 2017-03-07 09:19:46\ntags: javascript | array | method\n---\nJavascript中，数据类型Array有一些非常实用而强大的原生方法，接下来对主要的四种方法：forEach, map, filter, reduce做一个使用总结，由于reduce方法用的少，而且该方法本身存在难点，所以会着重介绍reduce方法。\n\n### Array四大迭代利器\n#### 1.forEach()   \nforEach()方法接受一个回调函数。如果没有抛出异常，数组中的每个元素都将会执行一次该函数。   \n\n**语法**\n```javascript\narr.forEach(function callback(currentValue, index, array) {\n    //your iterator\n}[, thisArg]);\n```\n**参数**   \n\n| callback | 为每个元素执行的函数，接受三个参数 |\n| --- | --- |\n| currentValue | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | forEach()方法应用的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | undefined |\n\n**注意点**   \nforEach()将要处理的元素在callback函数第一次执行前就已经确定，所以在forEach()开始执行后添加到数组中的元素将不会被callback处理。   \n如果现有元素的值发生了改变，传到callback里的值是forEach()取到的值。   \n在取值前被删除的元素将不会被访问。如果被访问过的元素被删除了，之后的元素会被略过（索引发生了变化）。   \n没有办法停止或打断forEach()循环，除了抛出异常。\n\n#### 2.map()\nmap()方法会返回一个由提供的回调函数作用于数组中的每个元素后产生的新数组，“纯”方法，不会污染原数组。   \n\n**语法**\n```javascript\nvar new_array = arr.map(callback[, thisArg]);\n```\n**参数**   \n\n| callback | 产生新数组的函数，接受三个参数 |\n| --- | --- |\n| currentValue | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | forEach()方法应用的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | 回调函数产生的新数组 |\n\n**Examples**\n```javascript\n// 字符串中每个字符的字符码\nvar map = Array.prototype.map;\nvar a = map.call('string', function(c) {\n    return c.charCodeAt(0);\n});\n```\n```javascript\n// 反转字符串\nvar str = '12345';\nArray.prototype.map.call(str, function(c) {\n    return c;\n}).reverse().join('');\n```\n```javascript\n// 字符串转整型\n['1', '2', '3'].map(Number);\n```\n\n#### 3.filter()\nfilter()方法返回一个由提供的回调函数将数组中的每个元素过滤后组成的新数组\n\n**语法**   \n```javascript\nvar newArray = arr.filter(callback[, thisArg]);\n```\n**参数**   \n\n| callback | 用来检测数组中的每个元素，返回true保留元素，false不保留，接受三个参数 |\n| --- | --- |\n| element | 数组中当前被处理的元素 |\n| index | 当前元素的索引 |\n| array | 被过滤的数组 |\n| thisArg | (可选)执行回调时使用this（即引用对象）的值 |\n| 返回值 | 满足回调函数的新数组 |\n\n**Examples**\n```javascript\n// 筛选掉JSON数组中不满足条件的元素\nvar arr = [\n    {id: 15},\n    {id: -1},\n    {id: 0},\n    {id: 3},\n    {id: 12.2},\n    {},\n    {id: null},\n    {id: NaN},\n    {id: 'undefined'}\n];\n\nvar invalidEntries = 0;\nfunction isNumber(obj) {\n    return obj !== undefined && typeof(obj) === 'number' && !isNaN(obj);\n}\nfunction filterByID(item) {\n    if(isNumber(item.id)) {\n        return true;\n    }\n    invalidEntries++;\n    return false;\n}\n\nvar arrByID = arr.filter(filterByID);\n```\n```javascript\n// 数组元素查询\nvar fruits = ['apple', 'banana', 'grapes', 'mango', 'orange'];\nfunction filterItems(query) {\n    return query.filter(function(el) {\n        return el.toLowerCase().indexOf(query.toLowerCase()) > -1;\n    });\n}\n```\n\n#### 4.reduce()\n**官方定义：**The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.   \n\n**语法**   \n```javascript\narr.reduce(callback, [initialValue]);\n```\n**参数**   \n\n| callback | 作用于数组中每个元素的方法，接受四个参数 |\n| --- | --- |\n| accumulator | 作为每次迭代的初始值，同时也作为上一次迭代的结果值，如果是第一次执行callback，并且给了initialValue，则为initialValue的值，否则为数组第一个元素的值 |\n| currentValue | 数组中当前被处理的元素 |\n| currentIndex | 当前元素的索引，如果给了initialValue，索引从0开始，否则从1开始 |\n| array | reduce的数组 |\n| initialValue | (可选)callback第一次调用时使用的第一个值，即初始值 |\n| 返回值 | 返回最终的结果 |\n\n**描述**\nreduce()执行一个接受四个参数的回调函数。回调函数第一次调用时，如果有initialValue，accumulator的值为initialValue，currentValue的值为数组第一个元素的值。如果没有设置initialValue，accumulator的值为数组第一个元素的值，currentValue的值为数组第二个元素的值。   \n**Note** 如果没有提供initialValue，reduce将会从索引1开始执行callback，略过第一个索引。如果提供了，从索引0开始。   \n\n如果数组是空的，并且没有提供initialValue，将会抛出**TyoeError**。如果数组只有一个元素并且没有提供initialValue，或者数组是空的但提供了initialValue，reduce将会返回这一个孤独的值而不调用callback。   \n\n**Examples**   \n```javascript\n// 数组扁平化\nvar flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(a, b) {\n    return a.concat(b);\n  },\n  []\n);\n// flattened is [0, 1, 2, 3, 4, 5]\n```\n```javascript\n// 统计数组中的值的种类\nvar names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice'];\n\nvar countedNames = names.reduce(function (allNames, name) { \n  if (name in allNames) {\n    allNames[name]++;\n  }\n  else {\n    allNames[name] = 1;\n  }\n  return allNames;\n}, {});\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n```\n```javascript\n// 取出数组中的所有对象里的某一个属性的值，并返回一个包含这些值的新数组\n// friends - an array of objects \n// where object field \"books\" - list of favorite books \nvar friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}];\n\n// allbooks - list which will contain all friends books +  \n// additional list contained in initialValue\nvar allbooks = friends.reduce(function(prev, curr) {\n  return [...prev, ...curr.books];\n}, ['Alphabet']);\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', \n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n```","slug":"javascript-array-reduce","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9ns000j7yslc2sxganj","content":"<p>Javascript中，数据类型Array有一些非常实用而强大的原生方法，接下来对主要的四种方法：forEach, map, filter, reduce做一个使用总结，由于reduce方法用的少，而且该方法本身存在难点，所以会着重介绍reduce方法。</p>\n<h3 id=\"Array四大迭代利器\"><a href=\"#Array四大迭代利器\" class=\"headerlink\" title=\"Array四大迭代利器\"></a>Array四大迭代利器</h3><h4 id=\"1-forEach\"><a href=\"#1-forEach\" class=\"headerlink\" title=\"1.forEach()\"></a>1.forEach()</h4><p>forEach()方法接受一个回调函数。如果没有抛出异常，数组中的每个元素都将会执行一次该函数。   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//your iterator</span></div><div class=\"line\">&#125;[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>为每个元素执行的函数，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>forEach()方法应用的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意点</strong><br>forEach()将要处理的元素在callback函数第一次执行前就已经确定，所以在forEach()开始执行后添加到数组中的元素将不会被callback处理。<br>如果现有元素的值发生了改变，传到callback里的值是forEach()取到的值。<br>在取值前被删除的元素将不会被访问。如果被访问过的元素被删除了，之后的元素会被略过（索引发生了变化）。<br>没有办法停止或打断forEach()循环，除了抛出异常。</p>\n<h4 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map()\"></a>2.map()</h4><p>map()方法会返回一个由提供的回调函数作用于数组中的每个元素后产生的新数组，“纯”方法，不会污染原数组。   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(callback[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>产生新数组的函数，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>forEach()方法应用的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>回调函数产生的新数组</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中每个字符的字符码</span></div><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map;</div><div class=\"line\"><span class=\"keyword\">var</span> a = map.call(<span class=\"string\">'string'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c.charCodeAt(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反转字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串转整型</span></div><div class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"built_in\">Number</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3.filter()\"></a>3.filter()</h4><p>filter()方法返回一个由提供的回调函数将数组中的每个元素过滤后组成的新数组</p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = arr.filter(callback[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>用来检测数组中的每个元素，返回true保留元素，false不保留，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>element</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>被过滤的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>满足回调函数的新数组</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 筛选掉JSON数组中不满足条件的元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">15</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">-1</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">12.2</span>&#125;,</div><div class=\"line\">    &#123;&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"literal\">null</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"literal\">NaN</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"string\">'undefined'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invalidEntries = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">typeof</span>(obj) === <span class=\"string\">'number'</span> &amp;&amp; !<span class=\"built_in\">isNaN</span>(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterByID</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(isNumber(item.id)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    invalidEntries++;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrByID = arr.filter(filterByID);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组元素查询</span></div><div class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'grapes'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'orange'</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterItems</span>(<span class=\"params\">query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> query.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el.toLowerCase().indexOf(query.toLowerCase()) &gt; <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-reduce\"><a href=\"#4-reduce\" class=\"headerlink\" title=\"4.reduce()\"></a>4.reduce()</h4><p><strong>官方定义：</strong>The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.reduce(callback, [initialValue]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>作用于数组中每个元素的方法，接受四个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accumulator</td>\n<td>作为每次迭代的初始值，同时也作为上一次迭代的结果值，如果是第一次执行callback，并且给了initialValue，则为initialValue的值，否则为数组第一个元素的值</td>\n</tr>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>currentIndex</td>\n<td>当前元素的索引，如果给了initialValue，索引从0开始，否则从1开始</td>\n</tr>\n<tr>\n<td>array</td>\n<td>reduce的数组</td>\n</tr>\n<tr>\n<td>initialValue</td>\n<td>(可选)callback第一次调用时使用的第一个值，即初始值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>返回最终的结果</td>\n</tr>\n</tbody>\n</table>\n<p><strong>描述</strong><br>reduce()执行一个接受四个参数的回调函数。回调函数第一次调用时，如果有initialValue，accumulator的值为initialValue，currentValue的值为数组第一个元素的值。如果没有设置initialValue，accumulator的值为数组第一个元素的值，currentValue的值为数组第二个元素的值。<br><strong>Note</strong> 如果没有提供initialValue，reduce将会从索引1开始执行callback，略过第一个索引。如果提供了，从索引0开始。   </p>\n<p>如果数组是空的，并且没有提供initialValue，将会抛出<strong>TyoeError</strong>。如果数组只有一个元素并且没有提供initialValue，或者数组是空的但提供了initialValue，reduce将会返回这一个孤独的值而不调用callback。   </p>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组扁平化</span></div><div class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  []</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 统计数组中的值的种类</span></div><div class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</div><div class=\"line\">    allNames[name]++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> allNames;</div><div class=\"line\">&#125;, &#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// countedNames is:</span></div><div class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 取出数组中的所有对象里的某一个属性的值，并返回一个包含这些值的新数组</span></div><div class=\"line\"><span class=\"comment\">// friends - an array of objects </span></div><div class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></div><div class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Anna'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">21</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">26</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Alice'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends books +  </span></div><div class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></div><div class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</div><div class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks = [</span></div><div class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></div><div class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></div><div class=\"line\"><span class=\"comment\">//   'The Shining'</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div></pre></td></tr></table></figure>","excerpt":"","more":"<p>Javascript中，数据类型Array有一些非常实用而强大的原生方法，接下来对主要的四种方法：forEach, map, filter, reduce做一个使用总结，由于reduce方法用的少，而且该方法本身存在难点，所以会着重介绍reduce方法。</p>\n<h3 id=\"Array四大迭代利器\"><a href=\"#Array四大迭代利器\" class=\"headerlink\" title=\"Array四大迭代利器\"></a>Array四大迭代利器</h3><h4 id=\"1-forEach\"><a href=\"#1-forEach\" class=\"headerlink\" title=\"1.forEach()\"></a>1.forEach()</h4><p>forEach()方法接受一个回调函数。如果没有抛出异常，数组中的每个元素都将会执行一次该函数。   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">callback</span>(<span class=\"params\">currentValue, index, array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//your iterator</span></div><div class=\"line\">&#125;[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>为每个元素执行的函数，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>forEach()方法应用的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>undefined</td>\n</tr>\n</tbody>\n</table>\n<p><strong>注意点</strong><br>forEach()将要处理的元素在callback函数第一次执行前就已经确定，所以在forEach()开始执行后添加到数组中的元素将不会被callback处理。<br>如果现有元素的值发生了改变，传到callback里的值是forEach()取到的值。<br>在取值前被删除的元素将不会被访问。如果被访问过的元素被删除了，之后的元素会被略过（索引发生了变化）。<br>没有办法停止或打断forEach()循环，除了抛出异常。</p>\n<h4 id=\"2-map\"><a href=\"#2-map\" class=\"headerlink\" title=\"2.map()\"></a>2.map()</h4><p>map()方法会返回一个由提供的回调函数作用于数组中的每个元素后产生的新数组，“纯”方法，不会污染原数组。   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> new_array = arr.map(callback[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>产生新数组的函数，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>forEach()方法应用的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>回调函数产生的新数组</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串中每个字符的字符码</span></div><div class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"built_in\">Array</span>.prototype.map;</div><div class=\"line\"><span class=\"keyword\">var</span> a = map.call(<span class=\"string\">'string'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c.charCodeAt(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反转字符串</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">'12345'</span>;</div><div class=\"line\"><span class=\"built_in\">Array</span>.prototype.map.call(str, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">c</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> c;</div><div class=\"line\">&#125;).reverse().join(<span class=\"string\">''</span>);</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 字符串转整型</span></div><div class=\"line\">[<span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"string\">'3'</span>].map(<span class=\"built_in\">Number</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"3-filter\"><a href=\"#3-filter\" class=\"headerlink\" title=\"3.filter()\"></a>3.filter()</h4><p>filter()方法返回一个由提供的回调函数将数组中的每个元素过滤后组成的新数组</p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> newArray = arr.filter(callback[, thisArg]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>用来检测数组中的每个元素，返回true保留元素，false不保留，接受三个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>element</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>index</td>\n<td>当前元素的索引</td>\n</tr>\n<tr>\n<td>array</td>\n<td>被过滤的数组</td>\n</tr>\n<tr>\n<td>thisArg</td>\n<td>(可选)执行回调时使用this（即引用对象）的值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>满足回调函数的新数组</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 筛选掉JSON数组中不满足条件的元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">15</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">-1</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">0</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">3</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"number\">12.2</span>&#125;,</div><div class=\"line\">    &#123;&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"literal\">null</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"literal\">NaN</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">id</span>: <span class=\"string\">'undefined'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> invalidEntries = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isNumber</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj !== <span class=\"literal\">undefined</span> &amp;&amp; <span class=\"keyword\">typeof</span>(obj) === <span class=\"string\">'number'</span> &amp;&amp; !<span class=\"built_in\">isNaN</span>(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterByID</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(isNumber(item.id)) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    invalidEntries++;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrByID = arr.filter(filterByID);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组元素查询</span></div><div class=\"line\"><span class=\"keyword\">var</span> fruits = [<span class=\"string\">'apple'</span>, <span class=\"string\">'banana'</span>, <span class=\"string\">'grapes'</span>, <span class=\"string\">'mango'</span>, <span class=\"string\">'orange'</span>];</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">filterItems</span>(<span class=\"params\">query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> query.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el.toLowerCase().indexOf(query.toLowerCase()) &gt; <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"4-reduce\"><a href=\"#4-reduce\" class=\"headerlink\" title=\"4.reduce()\"></a>4.reduce()</h4><p><strong>官方定义：</strong>The reduce() method applies a function against an accumulator and each value of the array (from left-to-right) to reduce it to a single value.   </p>\n<p><strong>语法</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.reduce(callback, [initialValue]);</div></pre></td></tr></table></figure></p>\n<p><strong>参数</strong>   </p>\n<table>\n<thead>\n<tr>\n<th>callback</th>\n<th>作用于数组中每个元素的方法，接受四个参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>accumulator</td>\n<td>作为每次迭代的初始值，同时也作为上一次迭代的结果值，如果是第一次执行callback，并且给了initialValue，则为initialValue的值，否则为数组第一个元素的值</td>\n</tr>\n<tr>\n<td>currentValue</td>\n<td>数组中当前被处理的元素</td>\n</tr>\n<tr>\n<td>currentIndex</td>\n<td>当前元素的索引，如果给了initialValue，索引从0开始，否则从1开始</td>\n</tr>\n<tr>\n<td>array</td>\n<td>reduce的数组</td>\n</tr>\n<tr>\n<td>initialValue</td>\n<td>(可选)callback第一次调用时使用的第一个值，即初始值</td>\n</tr>\n<tr>\n<td>返回值</td>\n<td>返回最终的结果</td>\n</tr>\n</tbody>\n</table>\n<p><strong>描述</strong><br>reduce()执行一个接受四个参数的回调函数。回调函数第一次调用时，如果有initialValue，accumulator的值为initialValue，currentValue的值为数组第一个元素的值。如果没有设置initialValue，accumulator的值为数组第一个元素的值，currentValue的值为数组第二个元素的值。<br><strong>Note</strong> 如果没有提供initialValue，reduce将会从索引1开始执行callback，略过第一个索引。如果提供了，从索引0开始。   </p>\n<p>如果数组是空的，并且没有提供initialValue，将会抛出<strong>TyoeError</strong>。如果数组只有一个元素并且没有提供initialValue，或者数组是空的但提供了initialValue，reduce将会返回这一个孤独的值而不调用callback。   </p>\n<p><strong>Examples</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数组扁平化</span></div><div class=\"line\"><span class=\"keyword\">var</span> flattened = [[<span class=\"number\">0</span>, <span class=\"number\">1</span>], [<span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"number\">4</span>, <span class=\"number\">5</span>]].reduce(</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a.concat(b);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  []</div><div class=\"line\">);</div><div class=\"line\"><span class=\"comment\">// flattened is [0, 1, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 统计数组中的值的种类</span></div><div class=\"line\"><span class=\"keyword\">var</span> names = [<span class=\"string\">'Alice'</span>, <span class=\"string\">'Bob'</span>, <span class=\"string\">'Tiff'</span>, <span class=\"string\">'Bruce'</span>, <span class=\"string\">'Alice'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> countedNames = names.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">allNames, name</span>) </span>&#123; </div><div class=\"line\">  <span class=\"keyword\">if</span> (name <span class=\"keyword\">in</span> allNames) &#123;</div><div class=\"line\">    allNames[name]++;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    allNames[name] = <span class=\"number\">1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> allNames;</div><div class=\"line\">&#125;, &#123;&#125;);</div><div class=\"line\"><span class=\"comment\">// countedNames is:</span></div><div class=\"line\"><span class=\"comment\">// &#123; 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 &#125;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 取出数组中的所有对象里的某一个属性的值，并返回一个包含这些值的新数组</span></div><div class=\"line\"><span class=\"comment\">// friends - an array of objects </span></div><div class=\"line\"><span class=\"comment\">// where object field \"books\" - list of favorite books </span></div><div class=\"line\"><span class=\"keyword\">var</span> friends = [&#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Anna'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'Bible'</span>, <span class=\"string\">'Harry Potter'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">21</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Bob'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'War and peace'</span>, <span class=\"string\">'Romeo and Juliet'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">26</span></div><div class=\"line\">&#125;, &#123;</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'Alice'</span>,</div><div class=\"line\">  <span class=\"attr\">books</span>: [<span class=\"string\">'The Lord of the Rings'</span>, <span class=\"string\">'The Shining'</span>],</div><div class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span></div><div class=\"line\">&#125;];</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks - list which will contain all friends books +  </span></div><div class=\"line\"><span class=\"comment\">// additional list contained in initialValue</span></div><div class=\"line\"><span class=\"keyword\">var</span> allbooks = friends.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, curr</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [...prev, ...curr.books];</div><div class=\"line\">&#125;, [<span class=\"string\">'Alphabet'</span>]);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// allbooks = [</span></div><div class=\"line\"><span class=\"comment\">//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace', </span></div><div class=\"line\"><span class=\"comment\">//   'Romeo and Juliet', 'The Lord of the Rings',</span></div><div class=\"line\"><span class=\"comment\">//   'The Shining'</span></div><div class=\"line\"><span class=\"comment\">// ]</span></div></pre></td></tr></table></figure>"},{"title":"css-centering","date":"2017-02-18T12:26:34.000Z","_content":"CSS居中总结：CSS居中是任何一个前端开发者必备的基础技能，实现居中不算很有技术难度的事情，但能实现居中的方式实在是太多了，这里对各种居中方法做一个总结，毕竟温故而知新嘛！\n\n### 一.水平居中\n##### 1.inline or line-* 元素\n在块级父元素内的行内元素可以通过设置 **text-align:center** 来进行水平居中。\n\n```css\ndiv {\n    margin: 10px;\n}\n.parent {\n    width: 200px;\n    height: 50px;\n    text-align: center;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"parent\">水平居中</div>\n```\n![pic_1](http://o7bp9e1ec.bkt.clouddn.com/1488720138086)\n\n```css\nnav {\n    margin: 10px;\n    text-align: center;\n    padding: 10px;\n    border: 1px solid #000000;\n}\nnav a {\n    text-decoration: none;\n    background: #333;\n    border-radius: 5px;\n    color: white;\n    padding: 3px 8px;\n}\n```\n\n```html \n<nav role='navigation'>\n    <a href=\"#0\">One</a>\n    <a href=\"#0\">Two</a>\n    <a href=\"#0\">Three</a>\n    <a href=\"#0\">Four</a>\n</nav>\n```\n![pic_2](http://o7bp9e1ec.bkt.clouddn.com/1488720502935)\n\n##### 2.块级元素\n如果该块级元素有具体的 width，可以通过设置块级元素的 **margin-left** 和 **margin-right** 的值为 **auto** 来居中。\n```css\n.main {\n    background: white;\n    margin: 20px 0;\n    padding: 10px;\n    border: 1px solid red;\n}\n.center {\n    margin: 0 auto;\n    width: 200px;\n    padding: 20px;\n    color: #000000;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"main\">\n    <div class=\"center\">\n    I'm a block level element and am centered.\n    </div>\n</div>\n```\n![pic_3](http://o7bp9e1ec.bkt.clouddn.com/1488721052778)\n\n##### 3.多个块级元素\n如果你需要把两个或两个以上的块级元素在一行水平居中，你需要把这些块级元素的 **display** 设置为 **inline-block**，或者使用 **flex** 布局。\n\n设置 display，**需设置块级元素的宽度**\n```css\n.inline-block-center {\n    text-align: center;\n    border: 1px solid red;\n}\n.inline-block-center div {\n    max-width: 125px;\n    display: inline-block;\n    text-align: left;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"inline-block-center\">\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n</div>\n```\n![pic_4](http://o7bp9e1ec.bkt.clouddn.com/1488722458999)\n\n使用 flex 布局\n```css\n.flex-center {\n    display: flex;\n    justify-content: center;\n    border: 1px solid red;\n}\n.flex-center div {\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"flex-center\">\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n</div>\n```\n![pic_5](http://o7bp9e1ec.bkt.clouddn.com/1488722803508)\n\n### 二.垂直居中\n##### 1.inline or line-* 元素\n单行   \n(1).设置相同的 padding-top 和 padding-bottom 值。\n```css\n.single {\n    margin: 20px 0;\n    padding: 50px;\n    border: 1px solid red;\n}\n\n.single a {\n    background: black;\n    color: white;\n    padding: 40px 30px;\n    text-decoration: none;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"single\">\n    <a href=\"#0\">We're</a>\n    <a href=\"#0\">Centered</a>\n    <a href=\"#0\">Bits of</a>\n    <a href=\"#0\"></a>\n</div>\n```\n![pic_6](http://o7bp9e1ec.bkt.clouddn.com/1488723144293)\n\n(2).设置 line-height 与 父元素 height 相等\n```css\n.single-lineheight {\n    background: white;\n    margin: 20px 0;\n    padding: 40px;\n    border: 1px solid red;\n}\n.single-lineheight div {\n    color: black;\n    height: 100px;\n    line-height: 100px;\n    padding: 20px;\n    width: 50%;\n    white-space: nowrap;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"single-lineheight\">\n    <div>\n    I'm a centered line.\n    </div>\n</div>\n```\n![pic_7](http://o7bp9e1ec.bkt.clouddn.com/1488723707299)\n\n多行   \nflex 布局\n```css\n.flex-center-more {\n    width: 240px;\n    margin: 20px;\n    color: #000000;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 200px;\n    overflow: auto;\n    border: 1px solid red;\n}\n.flex-center-more p {\n    margin: 0;\n    padding: 20px;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"flex-center-more\">\n    <p>I'm vertically centered multiple lines of text in a flexbox container.</p>\n</div>\n```\n![pic_8](http://o7bp9e1ec.bkt.clouddn.com/1488724047544)\n\n","source":"_posts/css-centering.md","raw":"title: css-centering\ndate: 2017-02-18 20:26:34\ntags:\n---\nCSS居中总结：CSS居中是任何一个前端开发者必备的基础技能，实现居中不算很有技术难度的事情，但能实现居中的方式实在是太多了，这里对各种居中方法做一个总结，毕竟温故而知新嘛！\n\n### 一.水平居中\n##### 1.inline or line-* 元素\n在块级父元素内的行内元素可以通过设置 **text-align:center** 来进行水平居中。\n\n```css\ndiv {\n    margin: 10px;\n}\n.parent {\n    width: 200px;\n    height: 50px;\n    text-align: center;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"parent\">水平居中</div>\n```\n![pic_1](http://o7bp9e1ec.bkt.clouddn.com/1488720138086)\n\n```css\nnav {\n    margin: 10px;\n    text-align: center;\n    padding: 10px;\n    border: 1px solid #000000;\n}\nnav a {\n    text-decoration: none;\n    background: #333;\n    border-radius: 5px;\n    color: white;\n    padding: 3px 8px;\n}\n```\n\n```html \n<nav role='navigation'>\n    <a href=\"#0\">One</a>\n    <a href=\"#0\">Two</a>\n    <a href=\"#0\">Three</a>\n    <a href=\"#0\">Four</a>\n</nav>\n```\n![pic_2](http://o7bp9e1ec.bkt.clouddn.com/1488720502935)\n\n##### 2.块级元素\n如果该块级元素有具体的 width，可以通过设置块级元素的 **margin-left** 和 **margin-right** 的值为 **auto** 来居中。\n```css\n.main {\n    background: white;\n    margin: 20px 0;\n    padding: 10px;\n    border: 1px solid red;\n}\n.center {\n    margin: 0 auto;\n    width: 200px;\n    padding: 20px;\n    color: #000000;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"main\">\n    <div class=\"center\">\n    I'm a block level element and am centered.\n    </div>\n</div>\n```\n![pic_3](http://o7bp9e1ec.bkt.clouddn.com/1488721052778)\n\n##### 3.多个块级元素\n如果你需要把两个或两个以上的块级元素在一行水平居中，你需要把这些块级元素的 **display** 设置为 **inline-block**，或者使用 **flex** 布局。\n\n设置 display，**需设置块级元素的宽度**\n```css\n.inline-block-center {\n    text-align: center;\n    border: 1px solid red;\n}\n.inline-block-center div {\n    max-width: 125px;\n    display: inline-block;\n    text-align: left;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"inline-block-center\">\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n</div>\n```\n![pic_4](http://o7bp9e1ec.bkt.clouddn.com/1488722458999)\n\n使用 flex 布局\n```css\n.flex-center {\n    display: flex;\n    justify-content: center;\n    border: 1px solid red;\n}\n.flex-center div {\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"flex-center\">\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.\n    </div>\n    <div>\n    I'm an element that is block-like with my siblings and we're centered in a row.\n    </div>\n</div>\n```\n![pic_5](http://o7bp9e1ec.bkt.clouddn.com/1488722803508)\n\n### 二.垂直居中\n##### 1.inline or line-* 元素\n单行   \n(1).设置相同的 padding-top 和 padding-bottom 值。\n```css\n.single {\n    margin: 20px 0;\n    padding: 50px;\n    border: 1px solid red;\n}\n\n.single a {\n    background: black;\n    color: white;\n    padding: 40px 30px;\n    text-decoration: none;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"single\">\n    <a href=\"#0\">We're</a>\n    <a href=\"#0\">Centered</a>\n    <a href=\"#0\">Bits of</a>\n    <a href=\"#0\"></a>\n</div>\n```\n![pic_6](http://o7bp9e1ec.bkt.clouddn.com/1488723144293)\n\n(2).设置 line-height 与 父元素 height 相等\n```css\n.single-lineheight {\n    background: white;\n    margin: 20px 0;\n    padding: 40px;\n    border: 1px solid red;\n}\n.single-lineheight div {\n    color: black;\n    height: 100px;\n    line-height: 100px;\n    padding: 20px;\n    width: 50%;\n    white-space: nowrap;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"single-lineheight\">\n    <div>\n    I'm a centered line.\n    </div>\n</div>\n```\n![pic_7](http://o7bp9e1ec.bkt.clouddn.com/1488723707299)\n\n多行   \nflex 布局\n```css\n.flex-center-more {\n    width: 240px;\n    margin: 20px;\n    color: #000000;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    height: 200px;\n    overflow: auto;\n    border: 1px solid red;\n}\n.flex-center-more p {\n    margin: 0;\n    padding: 20px;\n    border: 1px solid #000000;\n}\n```\n\n```html\n<div class=\"flex-center-more\">\n    <p>I'm vertically centered multiple lines of text in a flexbox container.</p>\n</div>\n```\n![pic_8](http://o7bp9e1ec.bkt.clouddn.com/1488724047544)\n\n","slug":"css-centering","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nu000l7ysl1ensi7xj","content":"<p>CSS居中总结：CSS居中是任何一个前端开发者必备的基础技能，实现居中不算很有技术难度的事情，但能实现居中的方式实在是太多了，这里对各种居中方法做一个总结，毕竟温故而知新嘛！</p>\n<h3 id=\"一-水平居中\"><a href=\"#一-水平居中\" class=\"headerlink\" title=\"一.水平居中\"></a>一.水平居中</h3><h5 id=\"1-inline-or-line-元素\"><a href=\"#1-inline-or-line-元素\" class=\"headerlink\" title=\"1.inline or line-* 元素\"></a>1.inline or line-* 元素</h5><p>在块级父元素内的行内元素可以通过设置 <strong>text-align:center</strong> 来进行水平居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span>水平居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488720138086\" alt=\"pic_1\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">3px</span> <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">role</span>=<span class=\"string\">'navigation'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Three<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Four<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488720502935\" alt=\"pic_2\"></p>\n<h5 id=\"2-块级元素\"><a href=\"#2-块级元素\" class=\"headerlink\" title=\"2.块级元素\"></a>2.块级元素</h5><p>如果该块级元素有具体的 width，可以通过设置块级元素的 <strong>margin-left</strong> 和 <strong>margin-right</strong> 的值为 <strong>auto</strong> 来居中。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">    I'm a block level element and am centered.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488721052778\" alt=\"pic_3\"></p>\n<h5 id=\"3-多个块级元素\"><a href=\"#3-多个块级元素\" class=\"headerlink\" title=\"3.多个块级元素\"></a>3.多个块级元素</h5><p>如果你需要把两个或两个以上的块级元素在一行水平居中，你需要把这些块级元素的 <strong>display</strong> 设置为 <strong>inline-block</strong>，或者使用 <strong>flex</strong> 布局。</p>\n<p>设置 display，<strong>需设置块级元素的宽度</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.inline-block-center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.inline-block-center</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">125px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block-center\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488722458999\" alt=\"pic_4\"></p>\n<p>使用 flex 布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flex-center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.flex-center</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488722803508\" alt=\"pic_5\"></p>\n<h3 id=\"二-垂直居中\"><a href=\"#二-垂直居中\" class=\"headerlink\" title=\"二.垂直居中\"></a>二.垂直居中</h3><h5 id=\"1-inline-or-line-元素-1\"><a href=\"#1-inline-or-line-元素-1\" class=\"headerlink\" title=\"1.inline or line-* 元素\"></a>1.inline or line-* 元素</h5><p>单行<br>(1).设置相同的 padding-top 和 padding-bottom 值。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.single</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.single</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: black;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span> <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"single\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>We're<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Centered<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Bits of<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488723144293\" alt=\"pic_6\"></p>\n<p>(2).设置 line-height 与 父元素 height 相等<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.single-lineheight</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.single-lineheight</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: black;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"single-lineheight\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm a centered line.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488723707299\" alt=\"pic_7\"></p>\n<p>多行<br>flex 布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flex-center-more</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.flex-center-more</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center-more\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I'm vertically centered multiple lines of text in a flexbox container.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488724047544\" alt=\"pic_8\"></p>\n","excerpt":"","more":"<p>CSS居中总结：CSS居中是任何一个前端开发者必备的基础技能，实现居中不算很有技术难度的事情，但能实现居中的方式实在是太多了，这里对各种居中方法做一个总结，毕竟温故而知新嘛！</p>\n<h3 id=\"一-水平居中\"><a href=\"#一-水平居中\" class=\"headerlink\" title=\"一.水平居中\"></a>一.水平居中</h3><h5 id=\"1-inline-or-line-元素\"><a href=\"#1-inline-or-line-元素\" class=\"headerlink\" title=\"1.inline or line-* 元素\"></a>1.inline or line-* 元素</h5><p>在块级父元素内的行内元素可以通过设置 <strong>text-align:center</strong> 来进行水平居中。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"parent\"</span>&gt;</span>水平居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488720138086\" alt=\"pic_1\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#333</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">3px</span> <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">role</span>=<span class=\"string\">'navigation'</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>One<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Two<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Three<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Four<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488720502935\" alt=\"pic_2\"></p>\n<h5 id=\"2-块级元素\"><a href=\"#2-块级元素\" class=\"headerlink\" title=\"2.块级元素\"></a>2.块级元素</h5><p>如果该块级元素有具体的 width，可以通过设置块级元素的 <strong>margin-left</strong> 和 <strong>margin-right</strong> 的值为 <strong>auto</strong> 来居中。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.main</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"main\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"center\"</span>&gt;</span></div><div class=\"line\">    I'm a block level element and am centered.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488721052778\" alt=\"pic_3\"></p>\n<h5 id=\"3-多个块级元素\"><a href=\"#3-多个块级元素\" class=\"headerlink\" title=\"3.多个块级元素\"></a>3.多个块级元素</h5><p>如果你需要把两个或两个以上的块级元素在一行水平居中，你需要把这些块级元素的 <strong>display</strong> 设置为 <strong>inline-block</strong>，或者使用 <strong>flex</strong> 布局。</p>\n<p>设置 display，<strong>需设置块级元素的宽度</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.inline-block-center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.inline-block-center</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">125px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"inline-block-center\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488722458999\" alt=\"pic_4\"></p>\n<p>使用 flex 布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flex-center</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.flex-center</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row. I have more content in me than my siblings do.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm an element that is block-like with my siblings and we're centered in a row.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488722803508\" alt=\"pic_5\"></p>\n<h3 id=\"二-垂直居中\"><a href=\"#二-垂直居中\" class=\"headerlink\" title=\"二.垂直居中\"></a>二.垂直居中</h3><h5 id=\"1-inline-or-line-元素-1\"><a href=\"#1-inline-or-line-元素-1\" class=\"headerlink\" title=\"1.inline or line-* 元素\"></a>1.inline or line-* 元素</h5><p>单行<br>(1).设置相同的 padding-top 和 padding-bottom 值。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.single</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.single</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: black;</div><div class=\"line\">    <span class=\"attribute\">color</span>: white;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span> <span class=\"number\">30px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"single\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>We're<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Centered<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span>Bits of<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488723144293\" alt=\"pic_6\"></p>\n<p>(2).设置 line-height 与 父元素 height 相等<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.single-lineheight</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">background</span>: white;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.single-lineheight</span> <span class=\"selector-tag\">div</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: black;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">white-space</span>: nowrap;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"single-lineheight\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    I'm a centered line.</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488723707299\" alt=\"pic_7\"></p>\n<p>多行<br>flex 布局<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.flex-center-more</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">240px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#000000</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">    <span class=\"attribute\">flex-direction</span>: column;</div><div class=\"line\">    <span class=\"attribute\">justify-content</span>: center;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: auto;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid red;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.flex-center-more</span> <span class=\"selector-tag\">p</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#000000</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"flex-center-more\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>I'm vertically centered multiple lines of text in a flexbox container.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488724047544\" alt=\"pic_8\"></p>\n"},{"title":"javascript-methods","date":"2017-02-12T13:22:11.000Z","_content":"Javascript 包含了少量用在标准类型上的标准方法。\n---\n## Array\n### array.concat(item...)\nconcat方法返回一个新数组，它包含array的浅复制，，并将一个或多个参数 item 附加在其后。如果参数是一个数组，那么它的每个元素会被分别添加。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = ['x', 'y', 'z'];\nvar c = a.concat(b, true);\n// c 是 ['a', 'b', 'c', 'x', 'y', 'z', true]\n```\n\n### array.join(separator)\njoin方法把一个 array 构造成一个字符串。它将 array 中的每个元素构造成一个字符串，并且用一个 separator 作为分隔符把它们连接在一起。默认的 separator 是 ','。为了实现无间隔的连接，我们可以使用空字符串作为 separator。   \n如果你想把大量的片段组装成一个字符串，把这些片段放到一个数组中并用 join 方法连接它们通常比用 + 元素运算符连接这些片段要快。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.join('');\n// b 是 'abc';\n```\n\n### array.pop()\npop 和 push 方法使数组 array 像堆栈一样工作。pop 移除 array 中的最后一个元素并返回该元素。如果 array 是空的，它会返回 undefined。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.pop();\n// a 是 ['a', 'b'], b 是 'c'\n```\n\n### array.push(item...)\npush 方法将一个或者多个参数 item 附加到一个数组的尾部。不像 concat 方法那样，它会修改数组 array，如果参数 item 是一个数组，它会将参数数组作为整个添加到数组中。它返回这个数组 array 的新长度值。\n```\nvar a = ['a', 'b', 'c'];\nvar b = ['x', 'y', 'z'];\nvar c = a.push(b, true);\n// a 是['a', 'b', 'c', ['x', 'y', 'z'], true], c 是 5\n```\n\n### array.reverse()\nreverse 方法反转数组 array 中元素的顺序。它返回当前的 array\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.reverse();\n// a 和 b 都是 ['c', 'b', 'a']\n```\n\n### array.shift()\nshift 方法移除数组 array 中的第一个元素。如果这个数组是空的，它会返回 undefined。shift 通常比 pop 慢得多。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.shift();\n// a 是 ['b', 'c'], b 是 'a'\n```\n\n### array.slice(start, end)\nslice 对 array 中的一段做浅复制。第一个被复制的元素是 array[start]，它将一直复制到 array[end]为止。end 参数是可选的，并且默认值是该数组的长度。如果两个参数中的任何一个是负数，array.length 将和它们相加起来试图使它们成为非负数。如果 start 大于等于 array.length，得到的结果将是一个新的空数组。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.slice(0, 1); // b 是 'a'\n```\n\n### array.sort()\nsort 方法对 array 进行适当的排序，它不能正确给一组数字排序，因为该方法假定排序的元素是字符串，所以会把数字转换为字符串，从而数字数组排序会得到一个“错误”的结果。但可以使用自己的比较函数。\n```javascript\nvar a = [10, 2, 4, 7];\n// 从小到大排序\na.sort(function(a, b) {\n    return a - b;\n});\n// a 是 [2, 4, 7, 10]\n\n// 从大到小排序\na.sort(function(a, b) {\n    return b - a;\n});\n// a 是 [10, 7, 4, 2]\n```\n上面的方法只能给数字排序，如果给任意简单值数组排序，则必须做更多的工作\n```javascript\nvar a = ['aa', 'bb', 'd', 23, 12, 1, 45];\na.sort(function(a, b) {\n    if(a === b) {\n        return 0;\n    }\n    if(typeof a === typeof b) {\n        return a < b ? -1 : 1;\n    }\n    return typeof a < typeof b ? -1 : 1;\n});\n// a 是 [1, 12, 23, 45, \"aa\", \"bb\", \"d\"]\n```\n给对象数组排序\n```javascript\n// by 函数接受一个成员名字符串作为参数\n// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数\nvar by = function(name) {\n    return function(o, p) {\n        var a, b;\n        if(typeof o === 'object' && typeof p === 'object' && o && p) {\n            a = o[name];\n            b = p[name];\n            if(a === b) {\n                return 0;\n            }\n            if(typeof a === typeof b) {\n                return a < b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        } else {\n            throw {\n                name: 'Error',\n                message: 'Expected an object when sorting by ' + name\n            };\n        }\n    };\n}\nvar s = [\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Shemp', last: 'Howward'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n];\ns.sort(by('first'));\n/* s 是 \n[\n    {first: 'Currly', last: 'Howard'}\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Shemp', last: 'Howward'},\n];\n*／\n```\n基于多个键值排序，可以修改 by 函数，让其可以接受第二个参数，当主要的键值产生一个匹配的时候，另一个 compare 方法将被调用以决出高下。\n```javascript\n// by 函数接受一个成员名字符串和一个可选的次要比较函数作为参数，\n// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数。\n// 当 o[name] === p[name] 时，次要比较函数被用来决出高下\nvar by = function(name, minor) {\n    return function(o, p) {\n        var a, b;\n        if(o && p && typeof o === 'object' && typeof p === 'object') {\n            a = o[name];\n            b = p[name];\n            if(a === b) {\n                return typeof minor === 'function' ? minor(o, p) : 0;\n            }\n            if(typeof a === typeof b) {\n                return a < b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        } else {\n            throw {\n                name: 'Error',\n                message: 'Expected an object when sorting by ' + name\n            };\n        }\n    }\n}\nvar s = [\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Shemp', last: 'Howward'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n];\ns.sort(by('last', by('first')));\n/* s 是 \n[\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Shemp', last: 'Howward'},\n];\n*／\n```\n\n### array.splice(start, deleteCount, item...)\nsplice 方法从 array 中移除 1 个或多个元素，并用新的 item 替换它们。参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除元素的个数。如果有额外的参数那些 item 都将插入到所移除元素的位置上它返回一个包含被移除元素的数组。   \nsplice 最主要的用处是从一个数组中删除元素。千万不要与 slice 混淆，slice 主要的用处是对数组的一段做浅复制。\n\n### array.unshift(item...)\nunshift 方法像 push 方法一样用于将元素添加到数组中，但它是把元素插入到 array 的开始部分而不是尾部。它返回 array 的新的长度值。\n\n\n## Function\n### function.apply(thisArg, argArray)\napply 方法调用函数 function，传递一个将被绑定到 this 的对象和一个可选的参数数组。apply 方法被用在apply调用模式中。\n\n## Number\n### number.toExponential(fractionDigits)\ntoExponential 方法把这个 number 转换成一个指数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。\n\n### number.toFixed(fractionDigits)\ntoFixed 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。默认为 0.\n\n### number.toPrecision(precision)\ntoPrecision 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 precision 控制有效数字的位数。它的值必须在 0 至 21 之间。\n\n### number.toString(radix)\ntoString 方法把这个 number 转换成为一个字符串。可选参数 radix 控制基数。它的值必须在 2 和 36 之间。默认的 radix 是以 10 为基数的。radix 参数最常用的是整数，但它可以用任意的数字。\n\n## Object\n### object.hadOwnProperty(name)\n如果这个 object 包含了一个名为 name 的属性，那么这个 hasOwnProperty 方法返回 true。原型链中的同名属性是不会被检查的。\n\n## RegExp\n### regexp.exec(string)\nexec 方法是使用正则表达式的最强大（和最慢）的方法。如果它成功地匹配 regexp 和字符串 string，它会返回一个数组。数组中下标为 0 的元素将包含正则表达式 regexp 匹配的子字符串。下标为 1 的元素是分组 1 捕获的文本，下标为 2 元素是分组 2 捕获的文本，以此类推。如果匹配失败，那么它会返回 null。   \n\n如果 regexp 带有一个 g 标志（全剧标志），事情变得有点更加复杂了。查找不是从这个字符串的起始位置开始，而是从 regexp.lastIndex（它初始化为 0）位置开始。如果匹配成功，那么 regexp.lastIndex将被设置为该匹配后第一个字符串的位置。不成功的匹配会重置 regexp.lastIndex为 0。   \n\n这就允许你通过在一个循环中调用 exec 去查询一个匹配模式在一个字符串中发生几次。有两件事情需要注意。如果你提前退出了这个循环，再次进入这个循环前必须把 regexp.lastIndex 重置到 0。^ 因子也仅匹配 regexp.lastIndex为 0的情况。\n\n### regexp.test(string)\ntest 方法是使用正则表达式的最简单（和最快）的方法。如果该 regexp 匹配 string，它返回 true，否则，返回 false。不要对这个方法使用 g 标识。\n\n## String\n### string.charAt(pos)\ncharAt 方法返回在 string 中 pos 位置处的字符串。如果 pos 小于 0 或大于等于字符串的长度 string.length，它会返回空字符串。JavaScript 没有字符类型。这个方法返回的结果是一个字符串。\n\n### string.charCodeAt(pos)\ncharCodeAt 方法同 charAt 一样，只不过它返回的不是一个字符串，而是以整数形式表示的在 string 中的 pos 位置处的字符串的字符码位。\n\n### string.concat(string...)\nconcat 方法通过将其他的字符串连接在一起来构造一个新的字符串。它很少被使用，因为 + 运算符更为方便。\n\n### string.indexOf(searchString, position)\nconcat 方法在 string 内查找另一个字符串 searchString。如果它被找到，则返回第一个匹配字符的位置，否则返回 -1。可选参数 position 可设置从 string 的某个指定的位置开始查找。\n\n### string.lastIndexOf(searchString, position)\nlastIndexOf 方法和 indexOf 方法类似，只不过它是从该字符串的末尾开始查找而不是从开头。\n\n### string.localeCompare(that)\nlocaleCompare 方法比较两个字符串。如何比较字符串的规则没有详细说明。如果 string 比字符串 that 小，那么结果为负数。如果它们是相等的，那么结果为0。这类似于 array.sort比较函数的约定。\n\n未完。。。","source":"_posts/javascript-methods.md","raw":"title: javascript-methods\ndate: 2017-02-12 21:22:11\ntags: javascript\n---\nJavascript 包含了少量用在标准类型上的标准方法。\n---\n## Array\n### array.concat(item...)\nconcat方法返回一个新数组，它包含array的浅复制，，并将一个或多个参数 item 附加在其后。如果参数是一个数组，那么它的每个元素会被分别添加。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = ['x', 'y', 'z'];\nvar c = a.concat(b, true);\n// c 是 ['a', 'b', 'c', 'x', 'y', 'z', true]\n```\n\n### array.join(separator)\njoin方法把一个 array 构造成一个字符串。它将 array 中的每个元素构造成一个字符串，并且用一个 separator 作为分隔符把它们连接在一起。默认的 separator 是 ','。为了实现无间隔的连接，我们可以使用空字符串作为 separator。   \n如果你想把大量的片段组装成一个字符串，把这些片段放到一个数组中并用 join 方法连接它们通常比用 + 元素运算符连接这些片段要快。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.join('');\n// b 是 'abc';\n```\n\n### array.pop()\npop 和 push 方法使数组 array 像堆栈一样工作。pop 移除 array 中的最后一个元素并返回该元素。如果 array 是空的，它会返回 undefined。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.pop();\n// a 是 ['a', 'b'], b 是 'c'\n```\n\n### array.push(item...)\npush 方法将一个或者多个参数 item 附加到一个数组的尾部。不像 concat 方法那样，它会修改数组 array，如果参数 item 是一个数组，它会将参数数组作为整个添加到数组中。它返回这个数组 array 的新长度值。\n```\nvar a = ['a', 'b', 'c'];\nvar b = ['x', 'y', 'z'];\nvar c = a.push(b, true);\n// a 是['a', 'b', 'c', ['x', 'y', 'z'], true], c 是 5\n```\n\n### array.reverse()\nreverse 方法反转数组 array 中元素的顺序。它返回当前的 array\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.reverse();\n// a 和 b 都是 ['c', 'b', 'a']\n```\n\n### array.shift()\nshift 方法移除数组 array 中的第一个元素。如果这个数组是空的，它会返回 undefined。shift 通常比 pop 慢得多。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.shift();\n// a 是 ['b', 'c'], b 是 'a'\n```\n\n### array.slice(start, end)\nslice 对 array 中的一段做浅复制。第一个被复制的元素是 array[start]，它将一直复制到 array[end]为止。end 参数是可选的，并且默认值是该数组的长度。如果两个参数中的任何一个是负数，array.length 将和它们相加起来试图使它们成为非负数。如果 start 大于等于 array.length，得到的结果将是一个新的空数组。\n```javascript\nvar a = ['a', 'b', 'c'];\nvar b = a.slice(0, 1); // b 是 'a'\n```\n\n### array.sort()\nsort 方法对 array 进行适当的排序，它不能正确给一组数字排序，因为该方法假定排序的元素是字符串，所以会把数字转换为字符串，从而数字数组排序会得到一个“错误”的结果。但可以使用自己的比较函数。\n```javascript\nvar a = [10, 2, 4, 7];\n// 从小到大排序\na.sort(function(a, b) {\n    return a - b;\n});\n// a 是 [2, 4, 7, 10]\n\n// 从大到小排序\na.sort(function(a, b) {\n    return b - a;\n});\n// a 是 [10, 7, 4, 2]\n```\n上面的方法只能给数字排序，如果给任意简单值数组排序，则必须做更多的工作\n```javascript\nvar a = ['aa', 'bb', 'd', 23, 12, 1, 45];\na.sort(function(a, b) {\n    if(a === b) {\n        return 0;\n    }\n    if(typeof a === typeof b) {\n        return a < b ? -1 : 1;\n    }\n    return typeof a < typeof b ? -1 : 1;\n});\n// a 是 [1, 12, 23, 45, \"aa\", \"bb\", \"d\"]\n```\n给对象数组排序\n```javascript\n// by 函数接受一个成员名字符串作为参数\n// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数\nvar by = function(name) {\n    return function(o, p) {\n        var a, b;\n        if(typeof o === 'object' && typeof p === 'object' && o && p) {\n            a = o[name];\n            b = p[name];\n            if(a === b) {\n                return 0;\n            }\n            if(typeof a === typeof b) {\n                return a < b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        } else {\n            throw {\n                name: 'Error',\n                message: 'Expected an object when sorting by ' + name\n            };\n        }\n    };\n}\nvar s = [\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Shemp', last: 'Howward'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n];\ns.sort(by('first'));\n/* s 是 \n[\n    {first: 'Currly', last: 'Howard'}\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Shemp', last: 'Howward'},\n];\n*／\n```\n基于多个键值排序，可以修改 by 函数，让其可以接受第二个参数，当主要的键值产生一个匹配的时候，另一个 compare 方法将被调用以决出高下。\n```javascript\n// by 函数接受一个成员名字符串和一个可选的次要比较函数作为参数，\n// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数。\n// 当 o[name] === p[name] 时，次要比较函数被用来决出高下\nvar by = function(name, minor) {\n    return function(o, p) {\n        var a, b;\n        if(o && p && typeof o === 'object' && typeof p === 'object') {\n            a = o[name];\n            b = p[name];\n            if(a === b) {\n                return typeof minor === 'function' ? minor(o, p) : 0;\n            }\n            if(typeof a === typeof b) {\n                return a < b ? -1 : 1;\n            }\n            return typeof a < typeof b ? -1 : 1;\n        } else {\n            throw {\n                name: 'Error',\n                message: 'Expected an object when sorting by ' + name\n            };\n        }\n    }\n}\nvar s = [\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Shemp', last: 'Howward'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n];\ns.sort(by('last', by('first')));\n/* s 是 \n[\n    {first: 'Joe', last: 'Besser'},\n    {first: 'Joe', last: 'DeRita'},\n    {first: 'Larry', last: 'Fine'},\n    {first: 'Currly', last: 'Howard'}\n    {first: 'Moe', last: 'Howward'},\n    {first: 'Shemp', last: 'Howward'},\n];\n*／\n```\n\n### array.splice(start, deleteCount, item...)\nsplice 方法从 array 中移除 1 个或多个元素，并用新的 item 替换它们。参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除元素的个数。如果有额外的参数那些 item 都将插入到所移除元素的位置上它返回一个包含被移除元素的数组。   \nsplice 最主要的用处是从一个数组中删除元素。千万不要与 slice 混淆，slice 主要的用处是对数组的一段做浅复制。\n\n### array.unshift(item...)\nunshift 方法像 push 方法一样用于将元素添加到数组中，但它是把元素插入到 array 的开始部分而不是尾部。它返回 array 的新的长度值。\n\n\n## Function\n### function.apply(thisArg, argArray)\napply 方法调用函数 function，传递一个将被绑定到 this 的对象和一个可选的参数数组。apply 方法被用在apply调用模式中。\n\n## Number\n### number.toExponential(fractionDigits)\ntoExponential 方法把这个 number 转换成一个指数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。\n\n### number.toFixed(fractionDigits)\ntoFixed 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。默认为 0.\n\n### number.toPrecision(precision)\ntoPrecision 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 precision 控制有效数字的位数。它的值必须在 0 至 21 之间。\n\n### number.toString(radix)\ntoString 方法把这个 number 转换成为一个字符串。可选参数 radix 控制基数。它的值必须在 2 和 36 之间。默认的 radix 是以 10 为基数的。radix 参数最常用的是整数，但它可以用任意的数字。\n\n## Object\n### object.hadOwnProperty(name)\n如果这个 object 包含了一个名为 name 的属性，那么这个 hasOwnProperty 方法返回 true。原型链中的同名属性是不会被检查的。\n\n## RegExp\n### regexp.exec(string)\nexec 方法是使用正则表达式的最强大（和最慢）的方法。如果它成功地匹配 regexp 和字符串 string，它会返回一个数组。数组中下标为 0 的元素将包含正则表达式 regexp 匹配的子字符串。下标为 1 的元素是分组 1 捕获的文本，下标为 2 元素是分组 2 捕获的文本，以此类推。如果匹配失败，那么它会返回 null。   \n\n如果 regexp 带有一个 g 标志（全剧标志），事情变得有点更加复杂了。查找不是从这个字符串的起始位置开始，而是从 regexp.lastIndex（它初始化为 0）位置开始。如果匹配成功，那么 regexp.lastIndex将被设置为该匹配后第一个字符串的位置。不成功的匹配会重置 regexp.lastIndex为 0。   \n\n这就允许你通过在一个循环中调用 exec 去查询一个匹配模式在一个字符串中发生几次。有两件事情需要注意。如果你提前退出了这个循环，再次进入这个循环前必须把 regexp.lastIndex 重置到 0。^ 因子也仅匹配 regexp.lastIndex为 0的情况。\n\n### regexp.test(string)\ntest 方法是使用正则表达式的最简单（和最快）的方法。如果该 regexp 匹配 string，它返回 true，否则，返回 false。不要对这个方法使用 g 标识。\n\n## String\n### string.charAt(pos)\ncharAt 方法返回在 string 中 pos 位置处的字符串。如果 pos 小于 0 或大于等于字符串的长度 string.length，它会返回空字符串。JavaScript 没有字符类型。这个方法返回的结果是一个字符串。\n\n### string.charCodeAt(pos)\ncharCodeAt 方法同 charAt 一样，只不过它返回的不是一个字符串，而是以整数形式表示的在 string 中的 pos 位置处的字符串的字符码位。\n\n### string.concat(string...)\nconcat 方法通过将其他的字符串连接在一起来构造一个新的字符串。它很少被使用，因为 + 运算符更为方便。\n\n### string.indexOf(searchString, position)\nconcat 方法在 string 内查找另一个字符串 searchString。如果它被找到，则返回第一个匹配字符的位置，否则返回 -1。可选参数 position 可设置从 string 的某个指定的位置开始查找。\n\n### string.lastIndexOf(searchString, position)\nlastIndexOf 方法和 indexOf 方法类似，只不过它是从该字符串的末尾开始查找而不是从开头。\n\n### string.localeCompare(that)\nlocaleCompare 方法比较两个字符串。如何比较字符串的规则没有详细说明。如果 string 比字符串 that 小，那么结果为负数。如果它们是相等的，那么结果为0。这类似于 array.sort比较函数的约定。\n\n未完。。。","slug":"javascript-methods","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nv000n7ysl64ze47xi","content":"<h2 id=\"Javascript-包含了少量用在标准类型上的标准方法。\"><a href=\"#Javascript-包含了少量用在标准类型上的标准方法。\" class=\"headerlink\" title=\"Javascript 包含了少量用在标准类型上的标准方法。\"></a>Javascript 包含了少量用在标准类型上的标准方法。</h2><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2><h3 id=\"array-concat-item…\"><a href=\"#array-concat-item…\" class=\"headerlink\" title=\"array.concat(item…)\"></a>array.concat(item…)</h3><p>concat方法返回一个新数组，它包含array的浅复制，，并将一个或多个参数 item 附加在其后。如果参数是一个数组，那么它的每个元素会被分别添加。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> c = a.concat(b, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// c 是 ['a', 'b', 'c', 'x', 'y', 'z', true]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-join-separator\"><a href=\"#array-join-separator\" class=\"headerlink\" title=\"array.join(separator)\"></a>array.join(separator)</h3><p>join方法把一个 array 构造成一个字符串。它将 array 中的每个元素构造成一个字符串，并且用一个 separator 作为分隔符把它们连接在一起。默认的 separator 是 ‘,’。为了实现无间隔的连接，我们可以使用空字符串作为 separator。<br>如果你想把大量的片段组装成一个字符串，把这些片段放到一个数组中并用 join 方法连接它们通常比用 + 元素运算符连接这些片段要快。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.join(<span class=\"string\">''</span>);</div><div class=\"line\"><span class=\"comment\">// b 是 'abc';</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-pop\"><a href=\"#array-pop\" class=\"headerlink\" title=\"array.pop()\"></a>array.pop()</h3><p>pop 和 push 方法使数组 array 像堆栈一样工作。pop 移除 array 中的最后一个元素并返回该元素。如果 array 是空的，它会返回 undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.pop();</div><div class=\"line\"><span class=\"comment\">// a 是 ['a', 'b'], b 是 'c'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-push-item…\"><a href=\"#array-push-item…\" class=\"headerlink\" title=\"array.push(item…)\"></a>array.push(item…)</h3><p>push 方法将一个或者多个参数 item 附加到一个数组的尾部。不像 concat 方法那样，它会修改数组 array，如果参数 item 是一个数组，它会将参数数组作为整个添加到数组中。它返回这个数组 array 的新长度值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\">var b = [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;];</div><div class=\"line\">var c = a.push(b, true);</div><div class=\"line\">// a 是[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;], true], c 是 5</div></pre></td></tr></table></figure></p>\n<h3 id=\"array-reverse\"><a href=\"#array-reverse\" class=\"headerlink\" title=\"array.reverse()\"></a>array.reverse()</h3><p>reverse 方法反转数组 array 中元素的顺序。它返回当前的 array<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.reverse();</div><div class=\"line\"><span class=\"comment\">// a 和 b 都是 ['c', 'b', 'a']</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-shift\"><a href=\"#array-shift\" class=\"headerlink\" title=\"array.shift()\"></a>array.shift()</h3><p>shift 方法移除数组 array 中的第一个元素。如果这个数组是空的，它会返回 undefined。shift 通常比 pop 慢得多。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.shift();</div><div class=\"line\"><span class=\"comment\">// a 是 ['b', 'c'], b 是 'a'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-slice-start-end\"><a href=\"#array-slice-start-end\" class=\"headerlink\" title=\"array.slice(start, end)\"></a>array.slice(start, end)</h3><p>slice 对 array 中的一段做浅复制。第一个被复制的元素是 array[start]，它将一直复制到 array[end]为止。end 参数是可选的，并且默认值是该数组的长度。如果两个参数中的任何一个是负数，array.length 将和它们相加起来试图使它们成为非负数。如果 start 大于等于 array.length，得到的结果将是一个新的空数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// b 是 'a'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-sort\"><a href=\"#array-sort\" class=\"headerlink\" title=\"array.sort()\"></a>array.sort()</h3><p>sort 方法对 array 进行适当的排序，它不能正确给一组数字排序，因为该方法假定排序的元素是字符串，所以会把数字转换为字符串，从而数字数组排序会得到一个“错误”的结果。但可以使用自己的比较函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>];</div><div class=\"line\"><span class=\"comment\">// 从小到大排序</span></div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [2, 4, 7, 10]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 从大到小排序</span></div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b - a;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [10, 7, 4, 2]</span></div></pre></td></tr></table></figure></p>\n<p>上面的方法只能给数字排序，如果给任意简单值数组排序，则必须做更多的工作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'d'</span>, <span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">45</span>];</div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [1, 12, 23, 45, \"aa\", \"bb\", \"d\"]</span></div></pre></td></tr></table></figure></p>\n<p>给对象数组排序<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by 函数接受一个成员名字符串作为参数</span></div><div class=\"line\"><span class=\"comment\">// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</div><div class=\"line\">            a = o[name];</div><div class=\"line\">            b = p[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">'Expected an object when sorting by '</span> + name</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> s = [</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Currly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\">s.sort(by(<span class=\"string\">'first'</span>));</div><div class=\"line\"><span class=\"comment\">/* s 是 </span></div><div class=\"line\">[</div><div class=\"line\">    &#123;first: 'Currly', last: 'Howard'&#125;</div><div class=\"line\">    &#123;first: 'Joe', last: 'Besser'&#125;,</div><div class=\"line\">    &#123;first: 'Joe', last: 'DeRita'&#125;,</div><div class=\"line\">    &#123;first: 'Larry', last: 'Fine'&#125;,</div><div class=\"line\">    &#123;first: 'Moe', last: 'Howward'&#125;,</div><div class=\"line\">    &#123;first: 'Shemp', last: 'Howward'&#125;,</div><div class=\"line\">];</div><div class=\"line\">*／</div></pre></td></tr></table></figure></p>\n<p>基于多个键值排序，可以修改 by 函数，让其可以接受第二个参数，当主要的键值产生一个匹配的时候，另一个 compare 方法将被调用以决出高下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by 函数接受一个成员名字符串和一个可选的次要比较函数作为参数，</span></div><div class=\"line\"><span class=\"comment\">// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数。</span></div><div class=\"line\"><span class=\"comment\">// 当 o[name] === p[name] 时，次要比较函数被用来决出高下</span></div><div class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, minor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">        <span class=\"keyword\">if</span>(o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            a = o[name];</div><div class=\"line\">            b = p[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> minor === <span class=\"string\">'function'</span> ? minor(o, p) : <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">'Expected an object when sorting by '</span> + name</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> s = [</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Currly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\">s.sort(by(<span class=\"string\">'last'</span>, by(<span class=\"string\">'first'</span>)));</div><div class=\"line\"><span class=\"comment\">/* s 是 </span></div><div class=\"line\">[</div><div class=\"line\">    &#123;first: 'Joe', last: 'Besser'&#125;,</div><div class=\"line\">    &#123;first: 'Joe', last: 'DeRita'&#125;,</div><div class=\"line\">    &#123;first: 'Larry', last: 'Fine'&#125;,</div><div class=\"line\">    &#123;first: 'Currly', last: 'Howard'&#125;</div><div class=\"line\">    &#123;first: 'Moe', last: 'Howward'&#125;,</div><div class=\"line\">    &#123;first: 'Shemp', last: 'Howward'&#125;,</div><div class=\"line\">];</div><div class=\"line\">*／</div></pre></td></tr></table></figure></p>\n<h3 id=\"array-splice-start-deleteCount-item…\"><a href=\"#array-splice-start-deleteCount-item…\" class=\"headerlink\" title=\"array.splice(start, deleteCount, item…)\"></a>array.splice(start, deleteCount, item…)</h3><p>splice 方法从 array 中移除 1 个或多个元素，并用新的 item 替换它们。参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除元素的个数。如果有额外的参数那些 item 都将插入到所移除元素的位置上它返回一个包含被移除元素的数组。<br>splice 最主要的用处是从一个数组中删除元素。千万不要与 slice 混淆，slice 主要的用处是对数组的一段做浅复制。</p>\n<h3 id=\"array-unshift-item…\"><a href=\"#array-unshift-item…\" class=\"headerlink\" title=\"array.unshift(item…)\"></a>array.unshift(item…)</h3><p>unshift 方法像 push 方法一样用于将元素添加到数组中，但它是把元素插入到 array 的开始部分而不是尾部。它返回 array 的新的长度值。</p>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><h3 id=\"function-apply-thisArg-argArray\"><a href=\"#function-apply-thisArg-argArray\" class=\"headerlink\" title=\"function.apply(thisArg, argArray)\"></a>function.apply(thisArg, argArray)</h3><p>apply 方法调用函数 function，传递一个将被绑定到 this 的对象和一个可选的参数数组。apply 方法被用在apply调用模式中。</p>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h2><h3 id=\"number-toExponential-fractionDigits\"><a href=\"#number-toExponential-fractionDigits\" class=\"headerlink\" title=\"number.toExponential(fractionDigits)\"></a>number.toExponential(fractionDigits)</h3><p>toExponential 方法把这个 number 转换成一个指数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。</p>\n<h3 id=\"number-toFixed-fractionDigits\"><a href=\"#number-toFixed-fractionDigits\" class=\"headerlink\" title=\"number.toFixed(fractionDigits)\"></a>number.toFixed(fractionDigits)</h3><p>toFixed 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。默认为 0.</p>\n<h3 id=\"number-toPrecision-precision\"><a href=\"#number-toPrecision-precision\" class=\"headerlink\" title=\"number.toPrecision(precision)\"></a>number.toPrecision(precision)</h3><p>toPrecision 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 precision 控制有效数字的位数。它的值必须在 0 至 21 之间。</p>\n<h3 id=\"number-toString-radix\"><a href=\"#number-toString-radix\" class=\"headerlink\" title=\"number.toString(radix)\"></a>number.toString(radix)</h3><p>toString 方法把这个 number 转换成为一个字符串。可选参数 radix 控制基数。它的值必须在 2 和 36 之间。默认的 radix 是以 10 为基数的。radix 参数最常用的是整数，但它可以用任意的数字。</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"object-hadOwnProperty-name\"><a href=\"#object-hadOwnProperty-name\" class=\"headerlink\" title=\"object.hadOwnProperty(name)\"></a>object.hadOwnProperty(name)</h3><p>如果这个 object 包含了一个名为 name 的属性，那么这个 hasOwnProperty 方法返回 true。原型链中的同名属性是不会被检查的。</p>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2><h3 id=\"regexp-exec-string\"><a href=\"#regexp-exec-string\" class=\"headerlink\" title=\"regexp.exec(string)\"></a>regexp.exec(string)</h3><p>exec 方法是使用正则表达式的最强大（和最慢）的方法。如果它成功地匹配 regexp 和字符串 string，它会返回一个数组。数组中下标为 0 的元素将包含正则表达式 regexp 匹配的子字符串。下标为 1 的元素是分组 1 捕获的文本，下标为 2 元素是分组 2 捕获的文本，以此类推。如果匹配失败，那么它会返回 null。   </p>\n<p>如果 regexp 带有一个 g 标志（全剧标志），事情变得有点更加复杂了。查找不是从这个字符串的起始位置开始，而是从 regexp.lastIndex（它初始化为 0）位置开始。如果匹配成功，那么 regexp.lastIndex将被设置为该匹配后第一个字符串的位置。不成功的匹配会重置 regexp.lastIndex为 0。   </p>\n<p>这就允许你通过在一个循环中调用 exec 去查询一个匹配模式在一个字符串中发生几次。有两件事情需要注意。如果你提前退出了这个循环，再次进入这个循环前必须把 regexp.lastIndex 重置到 0。^ 因子也仅匹配 regexp.lastIndex为 0的情况。</p>\n<h3 id=\"regexp-test-string\"><a href=\"#regexp-test-string\" class=\"headerlink\" title=\"regexp.test(string)\"></a>regexp.test(string)</h3><p>test 方法是使用正则表达式的最简单（和最快）的方法。如果该 regexp 匹配 string，它返回 true，否则，返回 false。不要对这个方法使用 g 标识。</p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"string-charAt-pos\"><a href=\"#string-charAt-pos\" class=\"headerlink\" title=\"string.charAt(pos)\"></a>string.charAt(pos)</h3><p>charAt 方法返回在 string 中 pos 位置处的字符串。如果 pos 小于 0 或大于等于字符串的长度 string.length，它会返回空字符串。JavaScript 没有字符类型。这个方法返回的结果是一个字符串。</p>\n<h3 id=\"string-charCodeAt-pos\"><a href=\"#string-charCodeAt-pos\" class=\"headerlink\" title=\"string.charCodeAt(pos)\"></a>string.charCodeAt(pos)</h3><p>charCodeAt 方法同 charAt 一样，只不过它返回的不是一个字符串，而是以整数形式表示的在 string 中的 pos 位置处的字符串的字符码位。</p>\n<h3 id=\"string-concat-string…\"><a href=\"#string-concat-string…\" class=\"headerlink\" title=\"string.concat(string…)\"></a>string.concat(string…)</h3><p>concat 方法通过将其他的字符串连接在一起来构造一个新的字符串。它很少被使用，因为 + 运算符更为方便。</p>\n<h3 id=\"string-indexOf-searchString-position\"><a href=\"#string-indexOf-searchString-position\" class=\"headerlink\" title=\"string.indexOf(searchString, position)\"></a>string.indexOf(searchString, position)</h3><p>concat 方法在 string 内查找另一个字符串 searchString。如果它被找到，则返回第一个匹配字符的位置，否则返回 -1。可选参数 position 可设置从 string 的某个指定的位置开始查找。</p>\n<h3 id=\"string-lastIndexOf-searchString-position\"><a href=\"#string-lastIndexOf-searchString-position\" class=\"headerlink\" title=\"string.lastIndexOf(searchString, position)\"></a>string.lastIndexOf(searchString, position)</h3><p>lastIndexOf 方法和 indexOf 方法类似，只不过它是从该字符串的末尾开始查找而不是从开头。</p>\n<h3 id=\"string-localeCompare-that\"><a href=\"#string-localeCompare-that\" class=\"headerlink\" title=\"string.localeCompare(that)\"></a>string.localeCompare(that)</h3><p>localeCompare 方法比较两个字符串。如何比较字符串的规则没有详细说明。如果 string 比字符串 that 小，那么结果为负数。如果它们是相等的，那么结果为0。这类似于 array.sort比较函数的约定。</p>\n<p>未完。。。</p>\n","excerpt":"","more":"<h2 id=\"Javascript-包含了少量用在标准类型上的标准方法。\"><a href=\"#Javascript-包含了少量用在标准类型上的标准方法。\" class=\"headerlink\" title=\"Javascript 包含了少量用在标准类型上的标准方法。\"></a>Javascript 包含了少量用在标准类型上的标准方法。</h2><h2 id=\"Array\"><a href=\"#Array\" class=\"headerlink\" title=\"Array\"></a>Array</h2><h3 id=\"array-concat-item…\"><a href=\"#array-concat-item…\" class=\"headerlink\" title=\"array.concat(item…)\"></a>array.concat(item…)</h3><p>concat方法返回一个新数组，它包含array的浅复制，，并将一个或多个参数 item 附加在其后。如果参数是一个数组，那么它的每个元素会被分别添加。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = [<span class=\"string\">'x'</span>, <span class=\"string\">'y'</span>, <span class=\"string\">'z'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> c = a.concat(b, <span class=\"literal\">true</span>);</div><div class=\"line\"><span class=\"comment\">// c 是 ['a', 'b', 'c', 'x', 'y', 'z', true]</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-join-separator\"><a href=\"#array-join-separator\" class=\"headerlink\" title=\"array.join(separator)\"></a>array.join(separator)</h3><p>join方法把一个 array 构造成一个字符串。它将 array 中的每个元素构造成一个字符串，并且用一个 separator 作为分隔符把它们连接在一起。默认的 separator 是 ‘,’。为了实现无间隔的连接，我们可以使用空字符串作为 separator。<br>如果你想把大量的片段组装成一个字符串，把这些片段放到一个数组中并用 join 方法连接它们通常比用 + 元素运算符连接这些片段要快。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.join(<span class=\"string\">''</span>);</div><div class=\"line\"><span class=\"comment\">// b 是 'abc';</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-pop\"><a href=\"#array-pop\" class=\"headerlink\" title=\"array.pop()\"></a>array.pop()</h3><p>pop 和 push 方法使数组 array 像堆栈一样工作。pop 移除 array 中的最后一个元素并返回该元素。如果 array 是空的，它会返回 undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.pop();</div><div class=\"line\"><span class=\"comment\">// a 是 ['a', 'b'], b 是 'c'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-push-item…\"><a href=\"#array-push-item…\" class=\"headerlink\" title=\"array.push(item…)\"></a>array.push(item…)</h3><p>push 方法将一个或者多个参数 item 附加到一个数组的尾部。不像 concat 方法那样，它会修改数组 array，如果参数 item 是一个数组，它会将参数数组作为整个添加到数组中。它返回这个数组 array 的新长度值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;];</div><div class=\"line\">var b = [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;];</div><div class=\"line\">var c = a.push(b, true);</div><div class=\"line\">// a 是[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, [&apos;x&apos;, &apos;y&apos;, &apos;z&apos;], true], c 是 5</div></pre></td></tr></table></figure></p>\n<h3 id=\"array-reverse\"><a href=\"#array-reverse\" class=\"headerlink\" title=\"array.reverse()\"></a>array.reverse()</h3><p>reverse 方法反转数组 array 中元素的顺序。它返回当前的 array<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.reverse();</div><div class=\"line\"><span class=\"comment\">// a 和 b 都是 ['c', 'b', 'a']</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-shift\"><a href=\"#array-shift\" class=\"headerlink\" title=\"array.shift()\"></a>array.shift()</h3><p>shift 方法移除数组 array 中的第一个元素。如果这个数组是空的，它会返回 undefined。shift 通常比 pop 慢得多。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.shift();</div><div class=\"line\"><span class=\"comment\">// a 是 ['b', 'c'], b 是 'a'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-slice-start-end\"><a href=\"#array-slice-start-end\" class=\"headerlink\" title=\"array.slice(start, end)\"></a>array.slice(start, end)</h3><p>slice 对 array 中的一段做浅复制。第一个被复制的元素是 array[start]，它将一直复制到 array[end]为止。end 参数是可选的，并且默认值是该数组的长度。如果两个参数中的任何一个是负数，array.length 将和它们相加起来试图使它们成为非负数。如果 start 大于等于 array.length，得到的结果将是一个新的空数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>); <span class=\"comment\">// b 是 'a'</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-sort\"><a href=\"#array-sort\" class=\"headerlink\" title=\"array.sort()\"></a>array.sort()</h3><p>sort 方法对 array 进行适当的排序，它不能正确给一组数字排序，因为该方法假定排序的元素是字符串，所以会把数字转换为字符串，从而数字数组排序会得到一个“错误”的结果。但可以使用自己的比较函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">7</span>];</div><div class=\"line\"><span class=\"comment\">// 从小到大排序</span></div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a - b;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [2, 4, 7, 10]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 从大到小排序</span></div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b - a;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [10, 7, 4, 2]</span></div></pre></td></tr></table></figure></p>\n<p>上面的方法只能给数字排序，如果给任意简单值数组排序，则必须做更多的工作<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">'aa'</span>, <span class=\"string\">'bb'</span>, <span class=\"string\">'d'</span>, <span class=\"number\">23</span>, <span class=\"number\">12</span>, <span class=\"number\">1</span>, <span class=\"number\">45</span>];</div><div class=\"line\">a.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// a 是 [1, 12, 23, 45, \"aa\", \"bb\", \"d\"]</span></div></pre></td></tr></table></figure></p>\n<p>给对象数组排序<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by 函数接受一个成员名字符串作为参数</span></div><div class=\"line\"><span class=\"comment\">// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数</span></div><div class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span> &amp;&amp; o &amp;&amp; p) &#123;</div><div class=\"line\">            a = o[name];</div><div class=\"line\">            b = p[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">'Expected an object when sorting by '</span> + name</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> s = [</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Currly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\">s.sort(by(<span class=\"string\">'first'</span>));</div><div class=\"line\"><span class=\"comment\">/* s 是 </div><div class=\"line\">[</div><div class=\"line\">    &#123;first: 'Currly', last: 'Howard'&#125;</div><div class=\"line\">    &#123;first: 'Joe', last: 'Besser'&#125;,</div><div class=\"line\">    &#123;first: 'Joe', last: 'DeRita'&#125;,</div><div class=\"line\">    &#123;first: 'Larry', last: 'Fine'&#125;,</div><div class=\"line\">    &#123;first: 'Moe', last: 'Howward'&#125;,</div><div class=\"line\">    &#123;first: 'Shemp', last: 'Howward'&#125;,</div><div class=\"line\">];</div><div class=\"line\">*／</span></div></pre></td></tr></table></figure></p>\n<p>基于多个键值排序，可以修改 by 函数，让其可以接受第二个参数，当主要的键值产生一个匹配的时候，另一个 compare 方法将被调用以决出高下。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// by 函数接受一个成员名字符串和一个可选的次要比较函数作为参数，</span></div><div class=\"line\"><span class=\"comment\">// 并返回一个可以用来对包含该成员的对象数组进行排序的比较函数。</span></div><div class=\"line\"><span class=\"comment\">// 当 o[name] === p[name] 时，次要比较函数被用来决出高下</span></div><div class=\"line\"><span class=\"keyword\">var</span> by = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name, minor</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">o, p</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">        <span class=\"keyword\">if</span>(o &amp;&amp; p &amp;&amp; <span class=\"keyword\">typeof</span> o === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> p === <span class=\"string\">'object'</span>) &#123;</div><div class=\"line\">            a = o[name];</div><div class=\"line\">            b = p[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(a === b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> minor === <span class=\"string\">'function'</span> ? minor(o, p) : <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> a === <span class=\"keyword\">typeof</span> b) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> a &lt; b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> a &lt; <span class=\"keyword\">typeof</span> b ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> &#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: <span class=\"string\">'Error'</span>,</div><div class=\"line\">                <span class=\"attr\">message</span>: <span class=\"string\">'Expected an object when sorting by '</span> + name</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> s = [</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Besser'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Moe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Joe'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'DeRita'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Shemp'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howward'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Larry'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Fine'</span>&#125;,</div><div class=\"line\">    &#123;<span class=\"attr\">first</span>: <span class=\"string\">'Currly'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'Howard'</span>&#125;</div><div class=\"line\">];</div><div class=\"line\">s.sort(by(<span class=\"string\">'last'</span>, by(<span class=\"string\">'first'</span>)));</div><div class=\"line\"><span class=\"comment\">/* s 是 </div><div class=\"line\">[</div><div class=\"line\">    &#123;first: 'Joe', last: 'Besser'&#125;,</div><div class=\"line\">    &#123;first: 'Joe', last: 'DeRita'&#125;,</div><div class=\"line\">    &#123;first: 'Larry', last: 'Fine'&#125;,</div><div class=\"line\">    &#123;first: 'Currly', last: 'Howard'&#125;</div><div class=\"line\">    &#123;first: 'Moe', last: 'Howward'&#125;,</div><div class=\"line\">    &#123;first: 'Shemp', last: 'Howward'&#125;,</div><div class=\"line\">];</div><div class=\"line\">*／</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"array-splice-start-deleteCount-item…\"><a href=\"#array-splice-start-deleteCount-item…\" class=\"headerlink\" title=\"array.splice(start, deleteCount, item…)\"></a>array.splice(start, deleteCount, item…)</h3><p>splice 方法从 array 中移除 1 个或多个元素，并用新的 item 替换它们。参数 start 是从数组 array 中移除元素的开始位置。参数 deleteCount 是要移除元素的个数。如果有额外的参数那些 item 都将插入到所移除元素的位置上它返回一个包含被移除元素的数组。<br>splice 最主要的用处是从一个数组中删除元素。千万不要与 slice 混淆，slice 主要的用处是对数组的一段做浅复制。</p>\n<h3 id=\"array-unshift-item…\"><a href=\"#array-unshift-item…\" class=\"headerlink\" title=\"array.unshift(item…)\"></a>array.unshift(item…)</h3><p>unshift 方法像 push 方法一样用于将元素添加到数组中，但它是把元素插入到 array 的开始部分而不是尾部。它返回 array 的新的长度值。</p>\n<h2 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h2><h3 id=\"function-apply-thisArg-argArray\"><a href=\"#function-apply-thisArg-argArray\" class=\"headerlink\" title=\"function.apply(thisArg, argArray)\"></a>function.apply(thisArg, argArray)</h3><p>apply 方法调用函数 function，传递一个将被绑定到 this 的对象和一个可选的参数数组。apply 方法被用在apply调用模式中。</p>\n<h2 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number\"></a>Number</h2><h3 id=\"number-toExponential-fractionDigits\"><a href=\"#number-toExponential-fractionDigits\" class=\"headerlink\" title=\"number.toExponential(fractionDigits)\"></a>number.toExponential(fractionDigits)</h3><p>toExponential 方法把这个 number 转换成一个指数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。</p>\n<h3 id=\"number-toFixed-fractionDigits\"><a href=\"#number-toFixed-fractionDigits\" class=\"headerlink\" title=\"number.toFixed(fractionDigits)\"></a>number.toFixed(fractionDigits)</h3><p>toFixed 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 fractionDigits 控制其小数点后的数字位数。它的值必须在 0 至 20 之间。默认为 0.</p>\n<h3 id=\"number-toPrecision-precision\"><a href=\"#number-toPrecision-precision\" class=\"headerlink\" title=\"number.toPrecision(precision)\"></a>number.toPrecision(precision)</h3><p>toPrecision 方法把这个 number 转换成为一个十进制数形式的字符串。可选参数 precision 控制有效数字的位数。它的值必须在 0 至 21 之间。</p>\n<h3 id=\"number-toString-radix\"><a href=\"#number-toString-radix\" class=\"headerlink\" title=\"number.toString(radix)\"></a>number.toString(radix)</h3><p>toString 方法把这个 number 转换成为一个字符串。可选参数 radix 控制基数。它的值必须在 2 和 36 之间。默认的 radix 是以 10 为基数的。radix 参数最常用的是整数，但它可以用任意的数字。</p>\n<h2 id=\"Object\"><a href=\"#Object\" class=\"headerlink\" title=\"Object\"></a>Object</h2><h3 id=\"object-hadOwnProperty-name\"><a href=\"#object-hadOwnProperty-name\" class=\"headerlink\" title=\"object.hadOwnProperty(name)\"></a>object.hadOwnProperty(name)</h3><p>如果这个 object 包含了一个名为 name 的属性，那么这个 hasOwnProperty 方法返回 true。原型链中的同名属性是不会被检查的。</p>\n<h2 id=\"RegExp\"><a href=\"#RegExp\" class=\"headerlink\" title=\"RegExp\"></a>RegExp</h2><h3 id=\"regexp-exec-string\"><a href=\"#regexp-exec-string\" class=\"headerlink\" title=\"regexp.exec(string)\"></a>regexp.exec(string)</h3><p>exec 方法是使用正则表达式的最强大（和最慢）的方法。如果它成功地匹配 regexp 和字符串 string，它会返回一个数组。数组中下标为 0 的元素将包含正则表达式 regexp 匹配的子字符串。下标为 1 的元素是分组 1 捕获的文本，下标为 2 元素是分组 2 捕获的文本，以此类推。如果匹配失败，那么它会返回 null。   </p>\n<p>如果 regexp 带有一个 g 标志（全剧标志），事情变得有点更加复杂了。查找不是从这个字符串的起始位置开始，而是从 regexp.lastIndex（它初始化为 0）位置开始。如果匹配成功，那么 regexp.lastIndex将被设置为该匹配后第一个字符串的位置。不成功的匹配会重置 regexp.lastIndex为 0。   </p>\n<p>这就允许你通过在一个循环中调用 exec 去查询一个匹配模式在一个字符串中发生几次。有两件事情需要注意。如果你提前退出了这个循环，再次进入这个循环前必须把 regexp.lastIndex 重置到 0。^ 因子也仅匹配 regexp.lastIndex为 0的情况。</p>\n<h3 id=\"regexp-test-string\"><a href=\"#regexp-test-string\" class=\"headerlink\" title=\"regexp.test(string)\"></a>regexp.test(string)</h3><p>test 方法是使用正则表达式的最简单（和最快）的方法。如果该 regexp 匹配 string，它返回 true，否则，返回 false。不要对这个方法使用 g 标识。</p>\n<h2 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h2><h3 id=\"string-charAt-pos\"><a href=\"#string-charAt-pos\" class=\"headerlink\" title=\"string.charAt(pos)\"></a>string.charAt(pos)</h3><p>charAt 方法返回在 string 中 pos 位置处的字符串。如果 pos 小于 0 或大于等于字符串的长度 string.length，它会返回空字符串。JavaScript 没有字符类型。这个方法返回的结果是一个字符串。</p>\n<h3 id=\"string-charCodeAt-pos\"><a href=\"#string-charCodeAt-pos\" class=\"headerlink\" title=\"string.charCodeAt(pos)\"></a>string.charCodeAt(pos)</h3><p>charCodeAt 方法同 charAt 一样，只不过它返回的不是一个字符串，而是以整数形式表示的在 string 中的 pos 位置处的字符串的字符码位。</p>\n<h3 id=\"string-concat-string…\"><a href=\"#string-concat-string…\" class=\"headerlink\" title=\"string.concat(string…)\"></a>string.concat(string…)</h3><p>concat 方法通过将其他的字符串连接在一起来构造一个新的字符串。它很少被使用，因为 + 运算符更为方便。</p>\n<h3 id=\"string-indexOf-searchString-position\"><a href=\"#string-indexOf-searchString-position\" class=\"headerlink\" title=\"string.indexOf(searchString, position)\"></a>string.indexOf(searchString, position)</h3><p>concat 方法在 string 内查找另一个字符串 searchString。如果它被找到，则返回第一个匹配字符的位置，否则返回 -1。可选参数 position 可设置从 string 的某个指定的位置开始查找。</p>\n<h3 id=\"string-lastIndexOf-searchString-position\"><a href=\"#string-lastIndexOf-searchString-position\" class=\"headerlink\" title=\"string.lastIndexOf(searchString, position)\"></a>string.lastIndexOf(searchString, position)</h3><p>lastIndexOf 方法和 indexOf 方法类似，只不过它是从该字符串的末尾开始查找而不是从开头。</p>\n<h3 id=\"string-localeCompare-that\"><a href=\"#string-localeCompare-that\" class=\"headerlink\" title=\"string.localeCompare(that)\"></a>string.localeCompare(that)</h3><p>localeCompare 方法比较两个字符串。如何比较字符串的规则没有详细说明。如果 string 比字符串 that 小，那么结果为负数。如果它们是相等的，那么结果为0。这类似于 array.sort比较函数的约定。</p>\n<p>未完。。。</p>\n"},{"title":"Google 搜索引擎技巧","date":"2017-01-23T14:36:40.000Z","_content":"Google 搜索引擎技巧\n==================\n1.双引号\n把搜索词放在双引号中代表完全匹配搜索。\n\n2.减号\n减号代表搜索不包含减号后面的词，使用这个指令减号前面必须是空格，减号后面没有空格。\n\n3.星号\n通配符\n\n4.~\n同时搜索近义词\n\n5.inurl\n用于搜索查询词出现在url中。支持中文。e.g. inurl:markdown\n\n6.inanchor\n用于搜索链接锚文字包含搜索词。\n\n7.intitle\n用于搜索页面title中包含关键词\n\n8.alinurl\n用于搜索多组查询词出现在url中\n\n9.alintitle\n用于搜索页面标题中包含多组关键词\n\n10.filetype\n用于搜索特定文件格式\n\n11.site\n用来搜索某个域名下的所有文件\n\n12.linkdomain\n只适用于雅虎，返回的是某个域名的反向链接。\n\n13.related\n返回的结果是与某个网站有关联的页面。\n\n14.year..year\n时间段。e.g. 2008..2010，搜索2008年至2010年之间的结果\n\n15.define\n快速查询字词定义。e.g. define:angary，查询angary的定义\n\ne.g.\n. inurl:gov 减肥\n返回的是url中包含gov，页面中有“减肥”这个词的页面\n","source":"_posts/search-skill.md","raw":"title: Google 搜索引擎技巧\ndate: 2017-01-23 22:36:40\ntags: Google搜索引擎技巧\n---\nGoogle 搜索引擎技巧\n==================\n1.双引号\n把搜索词放在双引号中代表完全匹配搜索。\n\n2.减号\n减号代表搜索不包含减号后面的词，使用这个指令减号前面必须是空格，减号后面没有空格。\n\n3.星号\n通配符\n\n4.~\n同时搜索近义词\n\n5.inurl\n用于搜索查询词出现在url中。支持中文。e.g. inurl:markdown\n\n6.inanchor\n用于搜索链接锚文字包含搜索词。\n\n7.intitle\n用于搜索页面title中包含关键词\n\n8.alinurl\n用于搜索多组查询词出现在url中\n\n9.alintitle\n用于搜索页面标题中包含多组关键词\n\n10.filetype\n用于搜索特定文件格式\n\n11.site\n用来搜索某个域名下的所有文件\n\n12.linkdomain\n只适用于雅虎，返回的是某个域名的反向链接。\n\n13.related\n返回的结果是与某个网站有关联的页面。\n\n14.year..year\n时间段。e.g. 2008..2010，搜索2008年至2010年之间的结果\n\n15.define\n快速查询字词定义。e.g. define:angary，查询angary的定义\n\ne.g.\n. inurl:gov 减肥\n返回的是url中包含gov，页面中有“减肥”这个词的页面\n","slug":"search-skill","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nw000p7yslrd7wmhlw","content":"<h1 id=\"Google-搜索引擎技巧\"><a href=\"#Google-搜索引擎技巧\" class=\"headerlink\" title=\"Google 搜索引擎技巧\"></a>Google 搜索引擎技巧</h1><p>1.双引号<br>把搜索词放在双引号中代表完全匹配搜索。</p>\n<p>2.减号<br>减号代表搜索不包含减号后面的词，使用这个指令减号前面必须是空格，减号后面没有空格。</p>\n<p>3.星号<br>通配符</p>\n<p>4.~<br>同时搜索近义词</p>\n<p>5.inurl<br>用于搜索查询词出现在url中。支持中文。e.g. inurl:markdown</p>\n<p>6.inanchor<br>用于搜索链接锚文字包含搜索词。</p>\n<p>7.intitle<br>用于搜索页面title中包含关键词</p>\n<p>8.alinurl<br>用于搜索多组查询词出现在url中</p>\n<p>9.alintitle<br>用于搜索页面标题中包含多组关键词</p>\n<p>10.filetype<br>用于搜索特定文件格式</p>\n<p>11.site<br>用来搜索某个域名下的所有文件</p>\n<p>12.linkdomain<br>只适用于雅虎，返回的是某个域名的反向链接。</p>\n<p>13.related<br>返回的结果是与某个网站有关联的页面。</p>\n<p>14.year..year<br>时间段。e.g. 2008..2010，搜索2008年至2010年之间的结果</p>\n<p>15.define<br>快速查询字词定义。e.g. define:angary，查询angary的定义</p>\n<p>e.g.<br>. inurl:gov 减肥<br>返回的是url中包含gov，页面中有“减肥”这个词的页面</p>\n","excerpt":"","more":"<h1 id=\"Google-搜索引擎技巧\"><a href=\"#Google-搜索引擎技巧\" class=\"headerlink\" title=\"Google 搜索引擎技巧\"></a>Google 搜索引擎技巧</h1><p>1.双引号<br>把搜索词放在双引号中代表完全匹配搜索。</p>\n<p>2.减号<br>减号代表搜索不包含减号后面的词，使用这个指令减号前面必须是空格，减号后面没有空格。</p>\n<p>3.星号<br>通配符</p>\n<p>4.~<br>同时搜索近义词</p>\n<p>5.inurl<br>用于搜索查询词出现在url中。支持中文。e.g. inurl:markdown</p>\n<p>6.inanchor<br>用于搜索链接锚文字包含搜索词。</p>\n<p>7.intitle<br>用于搜索页面title中包含关键词</p>\n<p>8.alinurl<br>用于搜索多组查询词出现在url中</p>\n<p>9.alintitle<br>用于搜索页面标题中包含多组关键词</p>\n<p>10.filetype<br>用于搜索特定文件格式</p>\n<p>11.site<br>用来搜索某个域名下的所有文件</p>\n<p>12.linkdomain<br>只适用于雅虎，返回的是某个域名的反向链接。</p>\n<p>13.related<br>返回的结果是与某个网站有关联的页面。</p>\n<p>14.year..year<br>时间段。e.g. 2008..2010，搜索2008年至2010年之间的结果</p>\n<p>15.define<br>快速查询字词定义。e.g. define:angary，查询angary的定义</p>\n<p>e.g.<br>. inurl:gov 减肥<br>返回的是url中包含gov，页面中有“减肥”这个词的页面</p>\n"},{"title":"svg_viewport&viewbox","date":"2017-03-04T14:27:04.000Z","_content":"学习svg，除了掌握基本的图形元素，更要清楚svg元素的大小与svg内部图形大小的关系，svg图像的 viewport 和 view box 共同设置了图像可见部分的尺寸。现在我们一起学习下 viewport 和 view box 的知识，也许清不清楚这些知识对svg元素的使用不会产生多大的影响，但涉及到复杂图形的时候，了解这些知识会有助于我们更快速、更精准的控制元素，并且减轻维护成本。\n\n### 1. The Viewport and View Box\n**viewport** 是创建svg元素时给它设置的 width 和 height，决定了svg图像的可视区域。逻辑上svg图像可以无限大，但每次只有特定的区域是可视的，这个可视区域就是 viewport。你可以通过svg元素的 width 和 height 属性来指定 viewport 的大小：如\n\n```html\n<svg width=\"500\" height=\"300\"></svg>\n```\n这个例子定义了一个宽500单位、高300单位的viewport。   \n\n**view box** 是 svg的一个属性，设置了内部图形的坐标系大小。   \n\n更直观的解释是：viewport 就像是显示器，有固定的宽高，你只能在显示器屏幕的范围内观看影像，view box 设置了显示器里的影像通过何种比例显示出来。就像你看到一个大海，它也许只占了显示器里大小的1/4，但它实际的大小却是显示器的n倍。viewport 和 view box 指定了两个坐标系，内部的图形会根据这两个坐标系做适当的缩放来适应性的显示出来。\n\n### 2. svg坐标系单位\n如果你没有指定 width 和 height 属性的单位，那么单位会被默认为 px。你还可以使用 px 以外的单位，\n\n| 单位 | 描述 |\n| - | - |\n| em | 相对单位：相对于父元素字体大小 |\n| ex | 相对单位：相对于字符 x 的高度(很少使用) |\n| px | 绝对单位，但相对于设备分辨率：像素 |\n| pt | 绝对单位：点(1／72英寸) |\n| pc | 绝对单位：(1／6英寸) |\n| cm | 绝对单位：厘米 |\n| mm | 绝对单位：毫米 |\n| in | 绝对单位：英寸 |\n\n给svg元素设置的单位只会影响svg元素的大小(viewport)。svg图像里显示的svg图形元素的大小取决于你给每个图形设置的单位。如果没有指定单位，默认使用 px。\n\n下面展示一个svg元素与svg图像里的图形设置不同单位的例子：\n\n```html\n<svg width=\"10cm\" height=\"10cm\">\n    <rect x=\"50\" y=\"100\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"></rect>\n    <rect x=\"100\" y=\"100\" width=\"50mm\" height=\"50mm\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n\nsvg图像单单位是cm，两个rect元素有自己的单位：第一个没有指明单位，默认px；第二个使用了mm。结果如下：\n\n![pic_1](http://o7bp9e1ec.bkt.clouddn.com/1488696584964)\n\n### 3. The View Box\n你可以通过 viewBox 属性重新定义没有单位的坐标。注：view box属性不要带单位。\n\n```html\n<svg width=\"500\" height=\"200\" viewBox=\"0 0 50 20\">\n    <rect x=\"20\" y=\"10\" width=\"10\" height=\"5\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n\n这个例子中我们创建了一个宽500px高200px的svg元素。viewBox属性有四个值 x y width height，这些值定义了svg元素的视区，x 和 y是视区的左上角坐标，width 和 height是视区的宽高。在这个例子中，视区从(0, 0)开始，宽高分别是50和20，这意味着宽500px、高200px的svg元素在内部使用的坐标系是从(0, 0)开始，到(50, 20)。换句话说，svg元素内部坐标系中的1单位相当于宽度500/50=10px、高度200/20=10px。这就是为什么x轴偏移20单位、y轴偏移10单位的矩形实际位置却是偏移到了(200px, 100px)处。因为内部坐标系中1单位相当于10px。\n\n结果为：\n\n![pic_2](http://o7bp9e1ec.bkt.clouddn.com/1488691161226)\n\n### 4. Preserving Aspect Ratio\n如果 viewport 和 view box 没有使用相同的长宽比(repect ratio)，你需要指定浏览器如何显示svg图像，这时你需要svg元素的preserveAspectRatio属性。   \n\npreserveAspectRatio属性由两个被空格分隔的值组成。第一个值设置view box在viewport中如何对齐，这个值由两部分组成；第二个值设置如何保留长宽比（如果需要的话）。   \n\n第一个值由两部分组成：x轴的对其方式和y轴的对齐方式，下面是这两个值的列表：\n\n| 值 | 描述 |\n|-|-|\n| xMin | 将 view box 和 viewport 左边对齐 |\n| xMid | 将 view box 和 viewport x轴中心对齐 |\n| xMax | 将 view box 和 viewport 右边对齐 |\n| yMin | 将 view box 和 viewport 上边对齐 |\n| yMid | 将 view box 和 viewport y轴中心对齐 |\n| yMax | 将 view box 和 viewport 下边对齐 |\n\n这两个部分可以通过驼峰命名的方式组合起来：xMinYMin。   \n\n第二个值有三个值：\n\n| 值 | 描述 |\n|-|-|\n| meet | 保留长宽比并缩放 view box 以适应 viewport |\n| slice | 保留长宽比并把超出 viewport 的部分裁剪掉 |\n| none | 不保留长宽比，缩放图像以将 view box 完全置入 viewport。长宽比被破坏 |\n\n这两个值之间需要有一个空格：\n```\npreserveAspectRatio=\"xMidYMid meet\"\npreserveAspectRatio=\"xMinYMin slice\"\n```\n\n接下来我们来看看不同的 preserveAspectRatio 属性值带来的效果。\n##### (1).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"</rect>\n</svg>\n```\n![pic_3](http://o7bp9e1ec.bkt.clouddn.com/1488693398271)\n\n这种不设置 preserveAspectRatio 的情况与 xMidYMid meet 的效果相同，由此可推测浏览器会默认让图像以最合适、最舒服的方式显示出来。\n\n##### (2).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin meet\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"</rect>\n</svg>\n```\n![pic_4](http://o7bp9e1ec.bkt.clouddn.com/1488693927989)\n这个例子中设置了 preserveAspectRatio 为 xMinYMin meet，这会确保长宽比是保留了的，view box 会调整大小来适应 viewport。所以，view box 根据两个长宽比中(500/250=2, 75/75=1)较小的比例进行缩放(width: 50\\*1=50, height: 50\\*1=50)，xMinYMin 使图形左上对齐。\n\n##### (3).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin slice\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n![pic_5](http://o7bp9e1ec.bkt.clouddn.com/1488694387507)\n这个例子中设置了 preserveAspectRatio 为 xMinYMin slice，同样保留了长宽比，但 view box 根据两个比例中(500/250=2, 75/75=1)较大的比例进行缩放(width: 50\\*2=100, height: 50\\*2=100)，结果超过了 viewport 的大小，所以 slice 掉超出的部分。\n\n##### (4).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"none\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill:none;\"></rect>\n</svg>\n```\n![pic_6](http://o7bp9e1ec.bkt.clouddn.com/1488694788943)\n这个例子中设置了 preserveAspectRatio 为 none，view box 将会填满整个 viewport，从而使图像失真，因为x轴和y轴的长宽比不同(x轴 2:1，y轴 1:1)。","source":"_posts/svg-viewport-viewbox.md","raw":"title: svg_viewport&viewbox\ndate: 2017-03-04 22:27:04\ntags: svg | viewport | view box \n---\n学习svg，除了掌握基本的图形元素，更要清楚svg元素的大小与svg内部图形大小的关系，svg图像的 viewport 和 view box 共同设置了图像可见部分的尺寸。现在我们一起学习下 viewport 和 view box 的知识，也许清不清楚这些知识对svg元素的使用不会产生多大的影响，但涉及到复杂图形的时候，了解这些知识会有助于我们更快速、更精准的控制元素，并且减轻维护成本。\n\n### 1. The Viewport and View Box\n**viewport** 是创建svg元素时给它设置的 width 和 height，决定了svg图像的可视区域。逻辑上svg图像可以无限大，但每次只有特定的区域是可视的，这个可视区域就是 viewport。你可以通过svg元素的 width 和 height 属性来指定 viewport 的大小：如\n\n```html\n<svg width=\"500\" height=\"300\"></svg>\n```\n这个例子定义了一个宽500单位、高300单位的viewport。   \n\n**view box** 是 svg的一个属性，设置了内部图形的坐标系大小。   \n\n更直观的解释是：viewport 就像是显示器，有固定的宽高，你只能在显示器屏幕的范围内观看影像，view box 设置了显示器里的影像通过何种比例显示出来。就像你看到一个大海，它也许只占了显示器里大小的1/4，但它实际的大小却是显示器的n倍。viewport 和 view box 指定了两个坐标系，内部的图形会根据这两个坐标系做适当的缩放来适应性的显示出来。\n\n### 2. svg坐标系单位\n如果你没有指定 width 和 height 属性的单位，那么单位会被默认为 px。你还可以使用 px 以外的单位，\n\n| 单位 | 描述 |\n| - | - |\n| em | 相对单位：相对于父元素字体大小 |\n| ex | 相对单位：相对于字符 x 的高度(很少使用) |\n| px | 绝对单位，但相对于设备分辨率：像素 |\n| pt | 绝对单位：点(1／72英寸) |\n| pc | 绝对单位：(1／6英寸) |\n| cm | 绝对单位：厘米 |\n| mm | 绝对单位：毫米 |\n| in | 绝对单位：英寸 |\n\n给svg元素设置的单位只会影响svg元素的大小(viewport)。svg图像里显示的svg图形元素的大小取决于你给每个图形设置的单位。如果没有指定单位，默认使用 px。\n\n下面展示一个svg元素与svg图像里的图形设置不同单位的例子：\n\n```html\n<svg width=\"10cm\" height=\"10cm\">\n    <rect x=\"50\" y=\"100\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"></rect>\n    <rect x=\"100\" y=\"100\" width=\"50mm\" height=\"50mm\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n\nsvg图像单单位是cm，两个rect元素有自己的单位：第一个没有指明单位，默认px；第二个使用了mm。结果如下：\n\n![pic_1](http://o7bp9e1ec.bkt.clouddn.com/1488696584964)\n\n### 3. The View Box\n你可以通过 viewBox 属性重新定义没有单位的坐标。注：view box属性不要带单位。\n\n```html\n<svg width=\"500\" height=\"200\" viewBox=\"0 0 50 20\">\n    <rect x=\"20\" y=\"10\" width=\"10\" height=\"5\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n\n这个例子中我们创建了一个宽500px高200px的svg元素。viewBox属性有四个值 x y width height，这些值定义了svg元素的视区，x 和 y是视区的左上角坐标，width 和 height是视区的宽高。在这个例子中，视区从(0, 0)开始，宽高分别是50和20，这意味着宽500px、高200px的svg元素在内部使用的坐标系是从(0, 0)开始，到(50, 20)。换句话说，svg元素内部坐标系中的1单位相当于宽度500/50=10px、高度200/20=10px。这就是为什么x轴偏移20单位、y轴偏移10单位的矩形实际位置却是偏移到了(200px, 100px)处。因为内部坐标系中1单位相当于10px。\n\n结果为：\n\n![pic_2](http://o7bp9e1ec.bkt.clouddn.com/1488691161226)\n\n### 4. Preserving Aspect Ratio\n如果 viewport 和 view box 没有使用相同的长宽比(repect ratio)，你需要指定浏览器如何显示svg图像，这时你需要svg元素的preserveAspectRatio属性。   \n\npreserveAspectRatio属性由两个被空格分隔的值组成。第一个值设置view box在viewport中如何对齐，这个值由两部分组成；第二个值设置如何保留长宽比（如果需要的话）。   \n\n第一个值由两部分组成：x轴的对其方式和y轴的对齐方式，下面是这两个值的列表：\n\n| 值 | 描述 |\n|-|-|\n| xMin | 将 view box 和 viewport 左边对齐 |\n| xMid | 将 view box 和 viewport x轴中心对齐 |\n| xMax | 将 view box 和 viewport 右边对齐 |\n| yMin | 将 view box 和 viewport 上边对齐 |\n| yMid | 将 view box 和 viewport y轴中心对齐 |\n| yMax | 将 view box 和 viewport 下边对齐 |\n\n这两个部分可以通过驼峰命名的方式组合起来：xMinYMin。   \n\n第二个值有三个值：\n\n| 值 | 描述 |\n|-|-|\n| meet | 保留长宽比并缩放 view box 以适应 viewport |\n| slice | 保留长宽比并把超出 viewport 的部分裁剪掉 |\n| none | 不保留长宽比，缩放图像以将 view box 完全置入 viewport。长宽比被破坏 |\n\n这两个值之间需要有一个空格：\n```\npreserveAspectRatio=\"xMidYMid meet\"\npreserveAspectRatio=\"xMinYMin slice\"\n```\n\n接下来我们来看看不同的 preserveAspectRatio 属性值带来的效果。\n##### (1).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"</rect>\n</svg>\n```\n![pic_3](http://o7bp9e1ec.bkt.clouddn.com/1488693398271)\n\n这种不设置 preserveAspectRatio 的情况与 xMidYMid meet 的效果相同，由此可推测浏览器会默认让图像以最合适、最舒服的方式显示出来。\n\n##### (2).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin meet\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"</rect>\n</svg>\n```\n![pic_4](http://o7bp9e1ec.bkt.clouddn.com/1488693927989)\n这个例子中设置了 preserveAspectRatio 为 xMinYMin meet，这会确保长宽比是保留了的，view box 会调整大小来适应 viewport。所以，view box 根据两个长宽比中(500/250=2, 75/75=1)较小的比例进行缩放(width: 50\\*1=50, height: 50\\*1=50)，xMinYMin 使图形左上对齐。\n\n##### (3).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin slice\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"></rect>\n</svg>\n```\n![pic_5](http://o7bp9e1ec.bkt.clouddn.com/1488694387507)\n这个例子中设置了 preserveAspectRatio 为 xMinYMin slice，同样保留了长宽比，但 view box 根据两个比例中(500/250=2, 75/75=1)较大的比例进行缩放(width: 50\\*2=100, height: 50\\*2=100)，结果超过了 viewport 的大小，所以 slice 掉超出的部分。\n\n##### (4).\n```html\n<svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"none\" style=\"border: 1px solid #cccccc;\">\n    <rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill:none;\"></rect>\n</svg>\n```\n![pic_6](http://o7bp9e1ec.bkt.clouddn.com/1488694788943)\n这个例子中设置了 preserveAspectRatio 为 none，view box 将会填满整个 viewport，从而使图像失真，因为x轴和y轴的长宽比不同(x轴 2:1，y轴 1:1)。","slug":"svg-viewport-viewbox","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9ny000r7ysltx7kfu69","content":"<p>学习svg，除了掌握基本的图形元素，更要清楚svg元素的大小与svg内部图形大小的关系，svg图像的 viewport 和 view box 共同设置了图像可见部分的尺寸。现在我们一起学习下 viewport 和 view box 的知识，也许清不清楚这些知识对svg元素的使用不会产生多大的影响，但涉及到复杂图形的时候，了解这些知识会有助于我们更快速、更精准的控制元素，并且减轻维护成本。</p>\n<h3 id=\"1-The-Viewport-and-View-Box\"><a href=\"#1-The-Viewport-and-View-Box\" class=\"headerlink\" title=\"1. The Viewport and View Box\"></a>1. The Viewport and View Box</h3><p><strong>viewport</strong> 是创建svg元素时给它设置的 width 和 height，决定了svg图像的可视区域。逻辑上svg图像可以无限大，但每次只有特定的区域是可视的，这个可视区域就是 viewport。你可以通过svg元素的 width 和 height 属性来指定 viewport 的大小：如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这个例子定义了一个宽500单位、高300单位的viewport。   </p>\n<p><strong>view box</strong> 是 svg的一个属性，设置了内部图形的坐标系大小。   </p>\n<p>更直观的解释是：viewport 就像是显示器，有固定的宽高，你只能在显示器屏幕的范围内观看影像，view box 设置了显示器里的影像通过何种比例显示出来。就像你看到一个大海，它也许只占了显示器里大小的1/4，但它实际的大小却是显示器的n倍。viewport 和 view box 指定了两个坐标系，内部的图形会根据这两个坐标系做适当的缩放来适应性的显示出来。</p>\n<h3 id=\"2-svg坐标系单位\"><a href=\"#2-svg坐标系单位\" class=\"headerlink\" title=\"2. svg坐标系单位\"></a>2. svg坐标系单位</h3><p>如果你没有指定 width 和 height 属性的单位，那么单位会被默认为 px。你还可以使用 px 以外的单位，</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>em</td>\n<td>相对单位：相对于父元素字体大小</td>\n</tr>\n<tr>\n<td>ex</td>\n<td>相对单位：相对于字符 x 的高度(很少使用)</td>\n</tr>\n<tr>\n<td>px</td>\n<td>绝对单位，但相对于设备分辨率：像素</td>\n</tr>\n<tr>\n<td>pt</td>\n<td>绝对单位：点(1／72英寸)</td>\n</tr>\n<tr>\n<td>pc</td>\n<td>绝对单位：(1／6英寸)</td>\n</tr>\n<tr>\n<td>cm</td>\n<td>绝对单位：厘米</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>绝对单位：毫米</td>\n</tr>\n<tr>\n<td>in</td>\n<td>绝对单位：英寸</td>\n</tr>\n</tbody>\n</table>\n<p>给svg元素设置的单位只会影响svg元素的大小(viewport)。svg图像里显示的svg图形元素的大小取决于你给每个图形设置的单位。如果没有指定单位，默认使用 px。</p>\n<p>下面展示一个svg元素与svg图像里的图形设置不同单位的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10cm\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"10cm\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50mm\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50mm\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>svg图像单单位是cm，两个rect元素有自己的单位：第一个没有指明单位，默认px；第二个使用了mm。结果如下：</p>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488696584964\" alt=\"pic_1\"></p>\n<h3 id=\"3-The-View-Box\"><a href=\"#3-The-View-Box\" class=\"headerlink\" title=\"3. The View Box\"></a>3. The View Box</h3><p>你可以通过 viewBox 属性重新定义没有单位的坐标。注：view box属性不要带单位。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 50 20\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这个例子中我们创建了一个宽500px高200px的svg元素。viewBox属性有四个值 x y width height，这些值定义了svg元素的视区，x 和 y是视区的左上角坐标，width 和 height是视区的宽高。在这个例子中，视区从(0, 0)开始，宽高分别是50和20，这意味着宽500px、高200px的svg元素在内部使用的坐标系是从(0, 0)开始，到(50, 20)。换句话说，svg元素内部坐标系中的1单位相当于宽度500/50=10px、高度200/20=10px。这就是为什么x轴偏移20单位、y轴偏移10单位的矩形实际位置却是偏移到了(200px, 100px)处。因为内部坐标系中1单位相当于10px。</p>\n<p>结果为：</p>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488691161226\" alt=\"pic_2\"></p>\n<h3 id=\"4-Preserving-Aspect-Ratio\"><a href=\"#4-Preserving-Aspect-Ratio\" class=\"headerlink\" title=\"4. Preserving Aspect Ratio\"></a>4. Preserving Aspect Ratio</h3><p>如果 viewport 和 view box 没有使用相同的长宽比(repect ratio)，你需要指定浏览器如何显示svg图像，这时你需要svg元素的preserveAspectRatio属性。   </p>\n<p>preserveAspectRatio属性由两个被空格分隔的值组成。第一个值设置view box在viewport中如何对齐，这个值由两部分组成；第二个值设置如何保留长宽比（如果需要的话）。   </p>\n<p>第一个值由两部分组成：x轴的对其方式和y轴的对齐方式，下面是这两个值的列表：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xMin</td>\n<td>将 view box 和 viewport 左边对齐</td>\n</tr>\n<tr>\n<td>xMid</td>\n<td>将 view box 和 viewport x轴中心对齐</td>\n</tr>\n<tr>\n<td>xMax</td>\n<td>将 view box 和 viewport 右边对齐</td>\n</tr>\n<tr>\n<td>yMin</td>\n<td>将 view box 和 viewport 上边对齐</td>\n</tr>\n<tr>\n<td>yMid</td>\n<td>将 view box 和 viewport y轴中心对齐</td>\n</tr>\n<tr>\n<td>yMax</td>\n<td>将 view box 和 viewport 下边对齐</td>\n</tr>\n</tbody>\n</table>\n<p>这两个部分可以通过驼峰命名的方式组合起来：xMinYMin。   </p>\n<p>第二个值有三个值：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>meet</td>\n<td>保留长宽比并缩放 view box 以适应 viewport</td>\n</tr>\n<tr>\n<td>slice</td>\n<td>保留长宽比并把超出 viewport 的部分裁剪掉</td>\n</tr>\n<tr>\n<td>none</td>\n<td>不保留长宽比，缩放图像以将 view box 完全置入 viewport。长宽比被破坏</td>\n</tr>\n</tbody>\n</table>\n<p>这两个值之间需要有一个空格：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">preserveAspectRatio=&quot;xMidYMid meet&quot;</div><div class=\"line\">preserveAspectRatio=&quot;xMinYMin slice&quot;</div></pre></td></tr></table></figure></p>\n<p>接下来我们来看看不同的 preserveAspectRatio 属性值带来的效果。</p>\n<h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"(1).\"></a>(1).</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" style=\"border: 1px solid #cccccc;\"&gt;</div><div class=\"line\">    &lt;rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"&lt;/rect&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488693398271\" alt=\"pic_3\"></p>\n<p>这种不设置 preserveAspectRatio 的情况与 xMidYMid meet 的效果相同，由此可推测浏览器会默认让图像以最合适、最舒服的方式显示出来。</p>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"(2).\"></a>(2).</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin meet\" style=\"border: 1px solid #cccccc;\"&gt;</div><div class=\"line\">    &lt;rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"&lt;/rect&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488693927989\" alt=\"pic_4\"><br>这个例子中设置了 preserveAspectRatio 为 xMinYMin meet，这会确保长宽比是保留了的，view box 会调整大小来适应 viewport。所以，view box 根据两个长宽比中(500/250=2, 75/75=1)较小的比例进行缩放(width: 50*1=50, height: 50*1=50)，xMinYMin 使图形左上对齐。</p>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"(3).\"></a>(3).</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 250 75\"</span> <span class=\"attr\">preserveAspectRatio</span>=<span class=\"string\">\"xMinYMin slice\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #cccccc;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488694387507\" alt=\"pic_5\"><br>这个例子中设置了 preserveAspectRatio 为 xMinYMin slice，同样保留了长宽比，但 view box 根据两个比例中(500/250=2, 75/75=1)较大的比例进行缩放(width: 50*2=100, height: 50*2=100)，结果超过了 viewport 的大小，所以 slice 掉超出的部分。</p>\n<h5 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"(4).\"></a>(4).</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 250 75\"</span> <span class=\"attr\">preserveAspectRatio</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #cccccc;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488694788943\" alt=\"pic_6\"><br>这个例子中设置了 preserveAspectRatio 为 none，view box 将会填满整个 viewport，从而使图像失真，因为x轴和y轴的长宽比不同(x轴 2:1，y轴 1:1)。</p>\n","excerpt":"","more":"<p>学习svg，除了掌握基本的图形元素，更要清楚svg元素的大小与svg内部图形大小的关系，svg图像的 viewport 和 view box 共同设置了图像可见部分的尺寸。现在我们一起学习下 viewport 和 view box 的知识，也许清不清楚这些知识对svg元素的使用不会产生多大的影响，但涉及到复杂图形的时候，了解这些知识会有助于我们更快速、更精准的控制元素，并且减轻维护成本。</p>\n<h3 id=\"1-The-Viewport-and-View-Box\"><a href=\"#1-The-Viewport-and-View-Box\" class=\"headerlink\" title=\"1. The Viewport and View Box\"></a>1. The Viewport and View Box</h3><p><strong>viewport</strong> 是创建svg元素时给它设置的 width 和 height，决定了svg图像的可视区域。逻辑上svg图像可以无限大，但每次只有特定的区域是可视的，这个可视区域就是 viewport。你可以通过svg元素的 width 和 height 属性来指定 viewport 的大小：如</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"300\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这个例子定义了一个宽500单位、高300单位的viewport。   </p>\n<p><strong>view box</strong> 是 svg的一个属性，设置了内部图形的坐标系大小。   </p>\n<p>更直观的解释是：viewport 就像是显示器，有固定的宽高，你只能在显示器屏幕的范围内观看影像，view box 设置了显示器里的影像通过何种比例显示出来。就像你看到一个大海，它也许只占了显示器里大小的1/4，但它实际的大小却是显示器的n倍。viewport 和 view box 指定了两个坐标系，内部的图形会根据这两个坐标系做适当的缩放来适应性的显示出来。</p>\n<h3 id=\"2-svg坐标系单位\"><a href=\"#2-svg坐标系单位\" class=\"headerlink\" title=\"2. svg坐标系单位\"></a>2. svg坐标系单位</h3><p>如果你没有指定 width 和 height 属性的单位，那么单位会被默认为 px。你还可以使用 px 以外的单位，</p>\n<table>\n<thead>\n<tr>\n<th>单位</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>em</td>\n<td>相对单位：相对于父元素字体大小</td>\n</tr>\n<tr>\n<td>ex</td>\n<td>相对单位：相对于字符 x 的高度(很少使用)</td>\n</tr>\n<tr>\n<td>px</td>\n<td>绝对单位，但相对于设备分辨率：像素</td>\n</tr>\n<tr>\n<td>pt</td>\n<td>绝对单位：点(1／72英寸)</td>\n</tr>\n<tr>\n<td>pc</td>\n<td>绝对单位：(1／6英寸)</td>\n</tr>\n<tr>\n<td>cm</td>\n<td>绝对单位：厘米</td>\n</tr>\n<tr>\n<td>mm</td>\n<td>绝对单位：毫米</td>\n</tr>\n<tr>\n<td>in</td>\n<td>绝对单位：英寸</td>\n</tr>\n</tbody>\n</table>\n<p>给svg元素设置的单位只会影响svg元素的大小(viewport)。svg图像里显示的svg图形元素的大小取决于你给每个图形设置的单位。如果没有指定单位，默认使用 px。</p>\n<p>下面展示一个svg元素与svg图像里的图形设置不同单位的例子：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10cm\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"10cm\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50mm\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50mm\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>svg图像单单位是cm，两个rect元素有自己的单位：第一个没有指明单位，默认px；第二个使用了mm。结果如下：</p>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488696584964\" alt=\"pic_1\"></p>\n<h3 id=\"3-The-View-Box\"><a href=\"#3-The-View-Box\" class=\"headerlink\" title=\"3. The View Box\"></a>3. The View Box</h3><p>你可以通过 viewBox 属性重新定义没有单位的坐标。注：view box属性不要带单位。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 50 20\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"20\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"5\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>这个例子中我们创建了一个宽500px高200px的svg元素。viewBox属性有四个值 x y width height，这些值定义了svg元素的视区，x 和 y是视区的左上角坐标，width 和 height是视区的宽高。在这个例子中，视区从(0, 0)开始，宽高分别是50和20，这意味着宽500px、高200px的svg元素在内部使用的坐标系是从(0, 0)开始，到(50, 20)。换句话说，svg元素内部坐标系中的1单位相当于宽度500/50=10px、高度200/20=10px。这就是为什么x轴偏移20单位、y轴偏移10单位的矩形实际位置却是偏移到了(200px, 100px)处。因为内部坐标系中1单位相当于10px。</p>\n<p>结果为：</p>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488691161226\" alt=\"pic_2\"></p>\n<h3 id=\"4-Preserving-Aspect-Ratio\"><a href=\"#4-Preserving-Aspect-Ratio\" class=\"headerlink\" title=\"4. Preserving Aspect Ratio\"></a>4. Preserving Aspect Ratio</h3><p>如果 viewport 和 view box 没有使用相同的长宽比(repect ratio)，你需要指定浏览器如何显示svg图像，这时你需要svg元素的preserveAspectRatio属性。   </p>\n<p>preserveAspectRatio属性由两个被空格分隔的值组成。第一个值设置view box在viewport中如何对齐，这个值由两部分组成；第二个值设置如何保留长宽比（如果需要的话）。   </p>\n<p>第一个值由两部分组成：x轴的对其方式和y轴的对齐方式，下面是这两个值的列表：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>xMin</td>\n<td>将 view box 和 viewport 左边对齐</td>\n</tr>\n<tr>\n<td>xMid</td>\n<td>将 view box 和 viewport x轴中心对齐</td>\n</tr>\n<tr>\n<td>xMax</td>\n<td>将 view box 和 viewport 右边对齐</td>\n</tr>\n<tr>\n<td>yMin</td>\n<td>将 view box 和 viewport 上边对齐</td>\n</tr>\n<tr>\n<td>yMid</td>\n<td>将 view box 和 viewport y轴中心对齐</td>\n</tr>\n<tr>\n<td>yMax</td>\n<td>将 view box 和 viewport 下边对齐</td>\n</tr>\n</tbody>\n</table>\n<p>这两个部分可以通过驼峰命名的方式组合起来：xMinYMin。   </p>\n<p>第二个值有三个值：</p>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>meet</td>\n<td>保留长宽比并缩放 view box 以适应 viewport</td>\n</tr>\n<tr>\n<td>slice</td>\n<td>保留长宽比并把超出 viewport 的部分裁剪掉</td>\n</tr>\n<tr>\n<td>none</td>\n<td>不保留长宽比，缩放图像以将 view box 完全置入 viewport。长宽比被破坏</td>\n</tr>\n</tbody>\n</table>\n<p>这两个值之间需要有一个空格：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">preserveAspectRatio=&quot;xMidYMid meet&quot;</div><div class=\"line\">preserveAspectRatio=&quot;xMinYMin slice&quot;</div></pre></td></tr></table></figure></p>\n<p>接下来我们来看看不同的 preserveAspectRatio 属性值带来的效果。</p>\n<h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"(1).\"></a>(1).</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" style=\"border: 1px solid #cccccc;\"&gt;</div><div class=\"line\">    &lt;rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"&lt;/rect&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488693398271\" alt=\"pic_3\"></p>\n<p>这种不设置 preserveAspectRatio 的情况与 xMidYMid meet 的效果相同，由此可推测浏览器会默认让图像以最合适、最舒服的方式显示出来。</p>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"(2).\"></a>(2).</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;svg width=\"500\" height=\"75\" viewBox=\"0 0 250 75\" preserveAspectRatio=\"xMinYMin meet\" style=\"border: 1px solid #cccccc;\"&gt;</div><div class=\"line\">    &lt;rect x=\"1\" y=\"1\" width=\"50\" height=\"50\" style=\"stroke: #000000; fill: none;\"&lt;/rect&gt;</div><div class=\"line\">&lt;/svg&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488693927989\" alt=\"pic_4\"><br>这个例子中设置了 preserveAspectRatio 为 xMinYMin meet，这会确保长宽比是保留了的，view box 会调整大小来适应 viewport。所以，view box 根据两个长宽比中(500/250=2, 75/75=1)较小的比例进行缩放(width: 50*1=50, height: 50*1=50)，xMinYMin 使图形左上对齐。</p>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"(3).\"></a>(3).</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 250 75\"</span> <span class=\"attr\">preserveAspectRatio</span>=<span class=\"string\">\"xMinYMin slice\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #cccccc;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill: none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488694387507\" alt=\"pic_5\"><br>这个例子中设置了 preserveAspectRatio 为 xMinYMin slice，同样保留了长宽比，但 view box 根据两个比例中(500/250=2, 75/75=1)较大的比例进行缩放(width: 50*2=100, height: 50*2=100)，结果超过了 viewport 的大小，所以 slice 掉超出的部分。</p>\n<h5 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"(4).\"></a>(4).</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">width</span>=<span class=\"string\">\"500\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"75\"</span> <span class=\"attr\">viewBox</span>=<span class=\"string\">\"0 0 250 75\"</span> <span class=\"attr\">preserveAspectRatio</span>=<span class=\"string\">\"none\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"border: 1px solid #cccccc;\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"1\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"stroke: #000000; fill:none;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">rect</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></div></pre></td></tr></table></figure>\n<p><img src=\"http://o7bp9e1ec.bkt.clouddn.com/1488694788943\" alt=\"pic_6\"><br>这个例子中设置了 preserveAspectRatio 为 none，view box 将会填满整个 viewport，从而使图像失真，因为x轴和y轴的长宽比不同(x轴 2:1，y轴 1:1)。</p>\n"},{"title":"动态规划","date":"2017-02-04T08:51:38.000Z","_content":"动态规划算法的思路以及实现\n---\n## 介绍\n>动态规划(DP)是算法设计思想当中最难也是最有趣的部分了，动态规划适用于有重叠子问题和最优子结构性质的问题，是一种在数学、计算机科学和经济学中经常使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。使用动态规划方法解题有较高的时间效率，关键在于它减少了很多不必要的计算和重复计算的部分。\n\n它的思想就是把一个大的问题进行拆分，细分成一个个小的子问题，且能够从这些小的子问题的解当中推导出原问题的解。同时还需要满足以下两个重要的性质才能进行动态规划：\n- 最优子结构性：既所拆分的子问题的解是最优解。\n- 子问题重叠性质：既在求解的过程当中，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的解题效率。\n\n## 示例\n>首先引用一道动态规划的经典问题**最长不下降子序列**   \n它的定义是：设有由n个不相同的整数组成的数列 b[n]，若有下标 i1 < i2 < ... < iL 且 b[i1] < b[i2] < ... < b[iL]   \n则称存在一个长度为 L 的不下降序列。\n\n### 例如\n>13, 7, 9, 16, 38, 24, 37, 18, 44, 19, 21, 22, 63, 15\n\n那么就有 13 < 16 < 38 < 44 < 63 长度为5的不下降子序列。   \n但是经过观察实际上还有 7 < 9 < 16 < 18 < 19 < 21 < 22 < 63 长度为8的不下降子序列，那么是否还有更长的不下降子序列呢？请找出最长的不下降子序列。\n\n### 输入格式\n>第一行为 n，表示 n 个数(n <= 100000)，第二行为 n 个数的数值(数字之间用空格隔开且最后一个数字末尾不能留有空格)。\n\n### 输出格式\n>一个整数，表示最长不下降序列的长度。\n\n### 输入例子\n>4   \n1 3 1 2\n\n### 输出例子\n>2\n\n### 思路 \n>假如要求得某一段的最优，就要想更小段的最优怎么求，再看看由最小段的最优能否扩大推广到最大段的最优。所以该问题存在最优子结构，而从小段的最优子结构到更大的最优子结构，所有子结构的求解问题是相同的，即满足动态规划的性质。\n\n假设这么一个表：   \n\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n| 链接位置 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 |\n\n>第三行表示该序列元素的所能连接的最长不下降子序列的长度，因为本身长度为1，所以初始值都为1。   \n第四行表示链接于哪个序列元素形成最长不下降子序列。\n\n#### 1.从后向前\n先从倒数第二项 63 算起，在它的后面仅有一项，因此仅作一次比较，因为 63 > 15，所以从 63 出发，不作任何链接，长度还是为1。   \n\n再看倒数第三项 22，在它的后面有 2 项，因此必须要在这 2 项当中找出比 22 大，长度又是最长的数值作为链接，由于只有 22 < 63，所以修改 22 的长度为 2，即自身长度加上所链接数值的长度，并修改链接位置为 13，也就是 63 的下标。   \n\n再看倒数第四项 21，在它的后面有 3 项，因此必须要在这3项当中找出比 21 大，长度又是最长的数值作为链接(注意:是长度)，很容易看出，数值 22 满足该条件，因此，修改 21 的长度为3，并修改链接位置为 12，即 22 的序列下标。   \n\n依次类推，最后结果如下表：   \n\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 7 | 8 | 7 | 6 | 3 | 4 | 3 | 5 | 2 | 4 | 3 | 2 | 1 | 1 |\n| 链接位置 | 3 | 2 | 3 | 7 | 8 | 6 | 8 | 9 | 12 | 10 | 11 | 12 | -1 | -1 |\n\n>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj > bi 且 i < j)，时间复杂度为 O(n^2)\n\n#### 2.从前向后\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 1 | 1 | 2 | 3 | 4 | 4 | 5 | 4 | 6 | 5 | 6 | 7 | 8 | 3 |\n| 链接位置 | -1 | -1 | 1 | 2 | 3 | 3 | 5 | 3 | 6 | 7 | 9 | 10 | 11 | 2 |\n\n>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj < bi 且 i > j)，时间复杂度为 O(n^2)\n\n### 代码\n```javascript\nprocess.stdin.setEncoding('utf8');\n\nvar arr = [], // 接收输入参数的数组\n    bool = 0, // 判断是否满足输入条件\n    n = 0, // 数列元素个数\n    longest = 1, // 最长不下降子序列长度\n    a = [], // 数列元素数组\n    dp = []; // 动态规划过程中子序列长度数组\n\nprocess.stdin.on('readable', function() {\n    var chunk = process.stdin.read();\n    if(chunk !== null) {\n        arr.push(chunk.trim());\n    }\n\n    if(bool >= 2) {\n        n = parseInt(arr[0]);\n        process.stdin.emit('end');\n    }\n\n    bool++;\n});\n\nprocess.stdin.on('end', function() {\n    a = arr.slice(1).join(\" \").split(\" \").map(function(index, elem) {\n        return parseInt(index);\n    });\n    if(n !== a.length) {\n        process.stdout.write('长度不一致');\n        return;\n    }\n\n    for(let i = 0; i < n; i++) {\n        seq[i] = -1;\n        dp[i] = 1;\n    }\n\n    for(let i = 1; i < n; i++) {\n        for(let j = 0; j < i; j++) {\n            if(a[i] > a[j]) {\n                dp[i] = Math.max(dp[j] + 1, dp[i]);\n                (function(index, arg) {\n                    seq[index] = arg;                    \n                })(i, j);\n            }\n            longest = Math.max(dp[i], longest);\n        }\n    }\n    \n    console.log(`最长长度为：${longest}`);\n\n    process.stdout.write('end');\n});\n```\n#### 输入输出\n```\n14\n13 7 9 16 38 24 37 18 44 19 21 22 63 15\n最长长度为：8\nend\n```","source":"_posts/动态规划.md","raw":"title: 动态规划\ndate: 2017-02-04 16:51:38\ntags: 算法 | 动态规划 | Node\n---\n动态规划算法的思路以及实现\n---\n## 介绍\n>动态规划(DP)是算法设计思想当中最难也是最有趣的部分了，动态规划适用于有重叠子问题和最优子结构性质的问题，是一种在数学、计算机科学和经济学中经常使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。使用动态规划方法解题有较高的时间效率，关键在于它减少了很多不必要的计算和重复计算的部分。\n\n它的思想就是把一个大的问题进行拆分，细分成一个个小的子问题，且能够从这些小的子问题的解当中推导出原问题的解。同时还需要满足以下两个重要的性质才能进行动态规划：\n- 最优子结构性：既所拆分的子问题的解是最优解。\n- 子问题重叠性质：既在求解的过程当中，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的解题效率。\n\n## 示例\n>首先引用一道动态规划的经典问题**最长不下降子序列**   \n它的定义是：设有由n个不相同的整数组成的数列 b[n]，若有下标 i1 < i2 < ... < iL 且 b[i1] < b[i2] < ... < b[iL]   \n则称存在一个长度为 L 的不下降序列。\n\n### 例如\n>13, 7, 9, 16, 38, 24, 37, 18, 44, 19, 21, 22, 63, 15\n\n那么就有 13 < 16 < 38 < 44 < 63 长度为5的不下降子序列。   \n但是经过观察实际上还有 7 < 9 < 16 < 18 < 19 < 21 < 22 < 63 长度为8的不下降子序列，那么是否还有更长的不下降子序列呢？请找出最长的不下降子序列。\n\n### 输入格式\n>第一行为 n，表示 n 个数(n <= 100000)，第二行为 n 个数的数值(数字之间用空格隔开且最后一个数字末尾不能留有空格)。\n\n### 输出格式\n>一个整数，表示最长不下降序列的长度。\n\n### 输入例子\n>4   \n1 3 1 2\n\n### 输出例子\n>2\n\n### 思路 \n>假如要求得某一段的最优，就要想更小段的最优怎么求，再看看由最小段的最优能否扩大推广到最大段的最优。所以该问题存在最优子结构，而从小段的最优子结构到更大的最优子结构，所有子结构的求解问题是相同的，即满足动态规划的性质。\n\n假设这么一个表：   \n\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |\n| 链接位置 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 | -1 |\n\n>第三行表示该序列元素的所能连接的最长不下降子序列的长度，因为本身长度为1，所以初始值都为1。   \n第四行表示链接于哪个序列元素形成最长不下降子序列。\n\n#### 1.从后向前\n先从倒数第二项 63 算起，在它的后面仅有一项，因此仅作一次比较，因为 63 > 15，所以从 63 出发，不作任何链接，长度还是为1。   \n\n再看倒数第三项 22，在它的后面有 2 项，因此必须要在这 2 项当中找出比 22 大，长度又是最长的数值作为链接，由于只有 22 < 63，所以修改 22 的长度为 2，即自身长度加上所链接数值的长度，并修改链接位置为 13，也就是 63 的下标。   \n\n再看倒数第四项 21，在它的后面有 3 项，因此必须要在这3项当中找出比 21 大，长度又是最长的数值作为链接(注意:是长度)，很容易看出，数值 22 满足该条件，因此，修改 21 的长度为3，并修改链接位置为 12，即 22 的序列下标。   \n\n依次类推，最后结果如下表：   \n\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 7 | 8 | 7 | 6 | 3 | 4 | 3 | 5 | 2 | 4 | 3 | 2 | 1 | 1 |\n| 链接位置 | 3 | 2 | 3 | 7 | 8 | 6 | 8 | 9 | 12 | 10 | 11 | 12 | -1 | -1 |\n\n>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj > bi 且 i < j)，时间复杂度为 O(n^2)\n\n#### 2.从前向后\n| 序列下标 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 |\n| ------- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| 序列数值 | 13 | 7 | 9 | 16 | 38 | 24 | 37 | 18 | 44 | 19 | 21 | 22 | 63 | 15 |\n| 序列长度 | 1 | 1 | 2 | 3 | 4 | 4 | 5 | 4 | 6 | 5 | 6 | 7 | 8 | 3 |\n| 链接位置 | -1 | -1 | 1 | 2 | 3 | 3 | 5 | 3 | 6 | 7 | 9 | 10 | 11 | 2 |\n\n>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj < bi 且 i > j)，时间复杂度为 O(n^2)\n\n### 代码\n```javascript\nprocess.stdin.setEncoding('utf8');\n\nvar arr = [], // 接收输入参数的数组\n    bool = 0, // 判断是否满足输入条件\n    n = 0, // 数列元素个数\n    longest = 1, // 最长不下降子序列长度\n    a = [], // 数列元素数组\n    dp = []; // 动态规划过程中子序列长度数组\n\nprocess.stdin.on('readable', function() {\n    var chunk = process.stdin.read();\n    if(chunk !== null) {\n        arr.push(chunk.trim());\n    }\n\n    if(bool >= 2) {\n        n = parseInt(arr[0]);\n        process.stdin.emit('end');\n    }\n\n    bool++;\n});\n\nprocess.stdin.on('end', function() {\n    a = arr.slice(1).join(\" \").split(\" \").map(function(index, elem) {\n        return parseInt(index);\n    });\n    if(n !== a.length) {\n        process.stdout.write('长度不一致');\n        return;\n    }\n\n    for(let i = 0; i < n; i++) {\n        seq[i] = -1;\n        dp[i] = 1;\n    }\n\n    for(let i = 1; i < n; i++) {\n        for(let j = 0; j < i; j++) {\n            if(a[i] > a[j]) {\n                dp[i] = Math.max(dp[j] + 1, dp[i]);\n                (function(index, arg) {\n                    seq[index] = arg;                    \n                })(i, j);\n            }\n            longest = Math.max(dp[i], longest);\n        }\n    }\n    \n    console.log(`最长长度为：${longest}`);\n\n    process.stdout.write('end');\n});\n```\n#### 输入输出\n```\n14\n13 7 9 16 38 24 37 18 44 19 21 22 63 15\n最长长度为：8\nend\n```","slug":"动态规划","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9nz000t7ysl97dcif7f","content":"<h2 id=\"动态规划算法的思路以及实现\"><a href=\"#动态规划算法的思路以及实现\" class=\"headerlink\" title=\"动态规划算法的思路以及实现\"></a>动态规划算法的思路以及实现</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>动态规划(DP)是算法设计思想当中最难也是最有趣的部分了，动态规划适用于有重叠子问题和最优子结构性质的问题，是一种在数学、计算机科学和经济学中经常使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。使用动态规划方法解题有较高的时间效率，关键在于它减少了很多不必要的计算和重复计算的部分。</p>\n</blockquote>\n<p>它的思想就是把一个大的问题进行拆分，细分成一个个小的子问题，且能够从这些小的子问题的解当中推导出原问题的解。同时还需要满足以下两个重要的性质才能进行动态规划：</p>\n<ul>\n<li>最优子结构性：既所拆分的子问题的解是最优解。</li>\n<li>子问题重叠性质：既在求解的过程当中，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的解题效率。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>首先引用一道动态规划的经典问题<strong>最长不下降子序列</strong><br>它的定义是：设有由n个不相同的整数组成的数列 b[n]，若有下标 i1 &lt; i2 &lt; … &lt; iL 且 b[i1] &lt; b[i2] &lt; … &lt; b[iL]<br>则称存在一个长度为 L 的不下降序列。</p>\n</blockquote>\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><blockquote>\n<p>13, 7, 9, 16, 38, 24, 37, 18, 44, 19, 21, 22, 63, 15</p>\n</blockquote>\n<p>那么就有 13 &lt; 16 &lt; 38 &lt; 44 &lt; 63 长度为5的不下降子序列。<br>但是经过观察实际上还有 7 &lt; 9 &lt; 16 &lt; 18 &lt; 19 &lt; 21 &lt; 22 &lt; 63 长度为8的不下降子序列，那么是否还有更长的不下降子序列呢？请找出最长的不下降子序列。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><blockquote>\n<p>第一行为 n，表示 n 个数(n &lt;= 100000)，第二行为 n 个数的数值(数字之间用空格隔开且最后一个数字末尾不能留有空格)。</p>\n</blockquote>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><blockquote>\n<p>一个整数，表示最长不下降序列的长度。</p>\n</blockquote>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><blockquote>\n<p>4<br>1 3 1 2</p>\n</blockquote>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><blockquote>\n<p>2</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>假如要求得某一段的最优，就要想更小段的最优怎么求，再看看由最小段的最优能否扩大推广到最大段的最优。所以该问题存在最优子结构，而从小段的最优子结构到更大的最优子结构，所有子结构的求解问题是相同的，即满足动态规划的性质。</p>\n</blockquote>\n<p>假设这么一个表：   </p>\n<table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>第三行表示该序列元素的所能连接的最长不下降子序列的长度，因为本身长度为1，所以初始值都为1。<br>第四行表示链接于哪个序列元素形成最长不下降子序列。</p>\n</blockquote>\n<h4 id=\"1-从后向前\"><a href=\"#1-从后向前\" class=\"headerlink\" title=\"1.从后向前\"></a>1.从后向前</h4><p>先从倒数第二项 63 算起，在它的后面仅有一项，因此仅作一次比较，因为 63 &gt; 15，所以从 63 出发，不作任何链接，长度还是为1。   </p>\n<p>再看倒数第三项 22，在它的后面有 2 项，因此必须要在这 2 项当中找出比 22 大，长度又是最长的数值作为链接，由于只有 22 &lt; 63，所以修改 22 的长度为 2，即自身长度加上所链接数值的长度，并修改链接位置为 13，也就是 63 的下标。   </p>\n<p>再看倒数第四项 21，在它的后面有 3 项，因此必须要在这3项当中找出比 21 大，长度又是最长的数值作为链接(注意:是长度)，很容易看出，数值 22 满足该条件，因此，修改 21 的长度为3，并修改链接位置为 12，即 22 的序列下标。   </p>\n<p>依次类推，最后结果如下表：   </p>\n<table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>7</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>3</td>\n<td>4</td>\n<td>3</td>\n<td>5</td>\n<td>2</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n<td>8</td>\n<td>9</td>\n<td>12</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n<td>-1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj &gt; bi 且 i &lt; j)，时间复杂度为 O(n^2)</p>\n</blockquote>\n<h4 id=\"2-从前向后\"><a href=\"#2-从前向后\" class=\"headerlink\" title=\"2.从前向后\"></a>2.从前向后</h4><table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>4</td>\n<td>5</td>\n<td>4</td>\n<td>6</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>3</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>-1</td>\n<td>-1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>5</td>\n<td>3</td>\n<td>6</td>\n<td>7</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj &lt; bi 且 i &gt; j)，时间复杂度为 O(n^2)</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdin.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [], <span class=\"comment\">// 接收输入参数的数组</span></div><div class=\"line\">    bool = <span class=\"number\">0</span>, <span class=\"comment\">// 判断是否满足输入条件</span></div><div class=\"line\">    n = <span class=\"number\">0</span>, <span class=\"comment\">// 数列元素个数</span></div><div class=\"line\">    longest = <span class=\"number\">1</span>, <span class=\"comment\">// 最长不下降子序列长度</span></div><div class=\"line\">    a = [], <span class=\"comment\">// 数列元素数组</span></div><div class=\"line\">    dp = []; <span class=\"comment\">// 动态规划过程中子序列长度数组</span></div><div class=\"line\"></div><div class=\"line\">process.stdin.on(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> chunk = process.stdin.read();</div><div class=\"line\">    <span class=\"keyword\">if</span>(chunk !== <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        arr.push(chunk.trim());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(bool &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        n = <span class=\"built_in\">parseInt</span>(arr[<span class=\"number\">0</span>]);</div><div class=\"line\">        process.stdin.emit(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool++;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">process.stdin.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    a = arr.slice(<span class=\"number\">1</span>).join(<span class=\"string\">\" \"</span>).split(<span class=\"string\">\" \"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, elem</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(index);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n !== a.length) &#123;</div><div class=\"line\">        process.stdout.write(<span class=\"string\">'长度不一致'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        seq[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">        dp[i] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j]) &#123;</div><div class=\"line\">                dp[i] = <span class=\"built_in\">Math</span>.max(dp[j] + <span class=\"number\">1</span>, dp[i]);</div><div class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, arg</span>) </span>&#123;</div><div class=\"line\">                    seq[index] = arg;                    </div><div class=\"line\">                &#125;)(i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">            longest = <span class=\"built_in\">Math</span>.max(dp[i], longest);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`最长长度为：<span class=\"subst\">$&#123;longest&#125;</span>`</span>);</div><div class=\"line\"></div><div class=\"line\">    process.stdout.write(<span class=\"string\">'end'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">14</div><div class=\"line\">13 7 9 16 38 24 37 18 44 19 21 22 63 15</div><div class=\"line\">最长长度为：8</div><div class=\"line\">end</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"动态规划算法的思路以及实现\"><a href=\"#动态规划算法的思路以及实现\" class=\"headerlink\" title=\"动态规划算法的思路以及实现\"></a>动态规划算法的思路以及实现</h2><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>动态规划(DP)是算法设计思想当中最难也是最有趣的部分了，动态规划适用于有重叠子问题和最优子结构性质的问题，是一种在数学、计算机科学和经济学中经常使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。使用动态规划方法解题有较高的时间效率，关键在于它减少了很多不必要的计算和重复计算的部分。</p>\n</blockquote>\n<p>它的思想就是把一个大的问题进行拆分，细分成一个个小的子问题，且能够从这些小的子问题的解当中推导出原问题的解。同时还需要满足以下两个重要的性质才能进行动态规划：</p>\n<ul>\n<li>最优子结构性：既所拆分的子问题的解是最优解。</li>\n<li>子问题重叠性质：既在求解的过程当中，每次产生的子问题并不总是新问题，有些子问题会被重复计算多次。动态规划算法是利用了这种子问题的重叠性质，对每一个子问题只计算一次，然后将其计算结果保存在一个表格中，当再次需要计算已经计算过的子问题时，只是在表格中简单地查看一下结果，从而获得较高的解题效率。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>首先引用一道动态规划的经典问题<strong>最长不下降子序列</strong><br>它的定义是：设有由n个不相同的整数组成的数列 b[n]，若有下标 i1 &lt; i2 &lt; … &lt; iL 且 b[i1] &lt; b[i2] &lt; … &lt; b[iL]<br>则称存在一个长度为 L 的不下降序列。</p>\n</blockquote>\n<h3 id=\"例如\"><a href=\"#例如\" class=\"headerlink\" title=\"例如\"></a>例如</h3><blockquote>\n<p>13, 7, 9, 16, 38, 24, 37, 18, 44, 19, 21, 22, 63, 15</p>\n</blockquote>\n<p>那么就有 13 &lt; 16 &lt; 38 &lt; 44 &lt; 63 长度为5的不下降子序列。<br>但是经过观察实际上还有 7 &lt; 9 &lt; 16 &lt; 18 &lt; 19 &lt; 21 &lt; 22 &lt; 63 长度为8的不下降子序列，那么是否还有更长的不下降子序列呢？请找出最长的不下降子序列。</p>\n<h3 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h3><blockquote>\n<p>第一行为 n，表示 n 个数(n &lt;= 100000)，第二行为 n 个数的数值(数字之间用空格隔开且最后一个数字末尾不能留有空格)。</p>\n</blockquote>\n<h3 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h3><blockquote>\n<p>一个整数，表示最长不下降序列的长度。</p>\n</blockquote>\n<h3 id=\"输入例子\"><a href=\"#输入例子\" class=\"headerlink\" title=\"输入例子\"></a>输入例子</h3><blockquote>\n<p>4<br>1 3 1 2</p>\n</blockquote>\n<h3 id=\"输出例子\"><a href=\"#输出例子\" class=\"headerlink\" title=\"输出例子\"></a>输出例子</h3><blockquote>\n<p>2</p>\n</blockquote>\n<h3 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h3><blockquote>\n<p>假如要求得某一段的最优，就要想更小段的最优怎么求，再看看由最小段的最优能否扩大推广到最大段的最优。所以该问题存在最优子结构，而从小段的最优子结构到更大的最优子结构，所有子结构的求解问题是相同的，即满足动态规划的性质。</p>\n</blockquote>\n<p>假设这么一个表：   </p>\n<table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>第三行表示该序列元素的所能连接的最长不下降子序列的长度，因为本身长度为1，所以初始值都为1。<br>第四行表示链接于哪个序列元素形成最长不下降子序列。</p>\n</blockquote>\n<h4 id=\"1-从后向前\"><a href=\"#1-从后向前\" class=\"headerlink\" title=\"1.从后向前\"></a>1.从后向前</h4><p>先从倒数第二项 63 算起，在它的后面仅有一项，因此仅作一次比较，因为 63 &gt; 15，所以从 63 出发，不作任何链接，长度还是为1。   </p>\n<p>再看倒数第三项 22，在它的后面有 2 项，因此必须要在这 2 项当中找出比 22 大，长度又是最长的数值作为链接，由于只有 22 &lt; 63，所以修改 22 的长度为 2，即自身长度加上所链接数值的长度，并修改链接位置为 13，也就是 63 的下标。   </p>\n<p>再看倒数第四项 21，在它的后面有 3 项，因此必须要在这3项当中找出比 21 大，长度又是最长的数值作为链接(注意:是长度)，很容易看出，数值 22 满足该条件，因此，修改 21 的长度为3，并修改链接位置为 12，即 22 的序列下标。   </p>\n<p>依次类推，最后结果如下表：   </p>\n<table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>7</td>\n<td>8</td>\n<td>7</td>\n<td>6</td>\n<td>3</td>\n<td>4</td>\n<td>3</td>\n<td>5</td>\n<td>2</td>\n<td>4</td>\n<td>3</td>\n<td>2</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>3</td>\n<td>2</td>\n<td>3</td>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n<td>8</td>\n<td>9</td>\n<td>12</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n<td>-1</td>\n<td>-1</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj &gt; bi 且 i &lt; j)，时间复杂度为 O(n^2)</p>\n</blockquote>\n<h4 id=\"2-从前向后\"><a href=\"#2-从前向后\" class=\"headerlink\" title=\"2.从前向后\"></a>2.从前向后</h4><table>\n<thead>\n<tr>\n<th>序列下标</th>\n<th>0</th>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n<th>5</th>\n<th>6</th>\n<th>7</th>\n<th>8</th>\n<th>9</th>\n<th>10</th>\n<th>11</th>\n<th>12</th>\n<th>13</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>序列数值</td>\n<td>13</td>\n<td>7</td>\n<td>9</td>\n<td>16</td>\n<td>38</td>\n<td>24</td>\n<td>37</td>\n<td>18</td>\n<td>44</td>\n<td>19</td>\n<td>21</td>\n<td>22</td>\n<td>63</td>\n<td>15</td>\n</tr>\n<tr>\n<td>序列长度</td>\n<td>1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>4</td>\n<td>5</td>\n<td>4</td>\n<td>6</td>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n<td>3</td>\n</tr>\n<tr>\n<td>链接位置</td>\n<td>-1</td>\n<td>-1</td>\n<td>1</td>\n<td>2</td>\n<td>3</td>\n<td>3</td>\n<td>5</td>\n<td>3</td>\n<td>6</td>\n<td>7</td>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>最终状态的转移方程为：f(i) = maxf(j) + 1 (bj &lt; bi 且 i &gt; j)，时间复杂度为 O(n^2)</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdin.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [], <span class=\"comment\">// 接收输入参数的数组</span></div><div class=\"line\">    bool = <span class=\"number\">0</span>, <span class=\"comment\">// 判断是否满足输入条件</span></div><div class=\"line\">    n = <span class=\"number\">0</span>, <span class=\"comment\">// 数列元素个数</span></div><div class=\"line\">    longest = <span class=\"number\">1</span>, <span class=\"comment\">// 最长不下降子序列长度</span></div><div class=\"line\">    a = [], <span class=\"comment\">// 数列元素数组</span></div><div class=\"line\">    dp = []; <span class=\"comment\">// 动态规划过程中子序列长度数组</span></div><div class=\"line\"></div><div class=\"line\">process.stdin.on(<span class=\"string\">'readable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> chunk = process.stdin.read();</div><div class=\"line\">    <span class=\"keyword\">if</span>(chunk !== <span class=\"literal\">null</span>) &#123;</div><div class=\"line\">        arr.push(chunk.trim());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(bool &gt;= <span class=\"number\">2</span>) &#123;</div><div class=\"line\">        n = <span class=\"built_in\">parseInt</span>(arr[<span class=\"number\">0</span>]);</div><div class=\"line\">        process.stdin.emit(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    bool++;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">process.stdin.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    a = arr.slice(<span class=\"number\">1</span>).join(<span class=\"string\">\" \"</span>).split(<span class=\"string\">\" \"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, elem</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">parseInt</span>(index);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">if</span>(n !== a.length) &#123;</div><div class=\"line\">        process.stdout.write(<span class=\"string\">'长度不一致'</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        seq[i] = <span class=\"number\">-1</span>;</div><div class=\"line\">        dp[i] = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[j]) &#123;</div><div class=\"line\">                dp[i] = <span class=\"built_in\">Math</span>.max(dp[j] + <span class=\"number\">1</span>, dp[i]);</div><div class=\"line\">                (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index, arg</span>) </span>&#123;</div><div class=\"line\">                    seq[index] = arg;                    </div><div class=\"line\">                &#125;)(i, j);</div><div class=\"line\">            &#125;</div><div class=\"line\">            longest = <span class=\"built_in\">Math</span>.max(dp[i], longest);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`最长长度为：<span class=\"subst\">$&#123;longest&#125;</span>`</span>);</div><div class=\"line\"></div><div class=\"line\">    process.stdout.write(<span class=\"string\">'end'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">14</div><div class=\"line\">13 7 9 16 38 24 37 18 44 19 21 22 63 15</div><div class=\"line\">最长长度为：8</div><div class=\"line\">end</div></pre></td></tr></table></figure>"},{"title":"团队中的git实践","date":"2016-05-14T12:50:07.000Z","_content":"为了获得软件质量和开发效率的双重收益，软件项目开发早已不再是一个人的事情了，而是一个团队(team)的事情。不但如此，现今的软件开发规模越来越大，所涉及的技术门类也越来越复杂，一个人难以独挑大梁，同时，一个人也难以在短周期内完成复杂项目。团队的意义不仅在于提高开发效率，更能保证开发质量，一人负责一块开发内容就可以用充足的精力和热情使这块内容做的更加完美。   \n说到团队开发，总是离不开项目管理和版本控制工具，这里我们将会讨论版本控制工具——git在团队中正确实践的姿势。   \nGit/Github是任何一个非小白程序员都知道或使用的工具/网站，随着软件开发学龄的深入，我自己的体会是越来越离不开这个东西了。一个人用git可以用得随心所欲，但团队中就是另外一回事了。一个人的项目，代码怎么改、怎么提交都不会有冲突，这样也会养成一些不良习惯，把这些习惯带到团队开发中，轻则让队友讨厌，重则酿成大祸（这不是危言耸听）。   \n### 1.习惯养成\n如果一个团队在使用git时没有一些规范，那将是一场难以醒来的噩梦！然而，规范固然重要，但更重要的是个人素质，在使用git时需要自己养成良好的习惯。\n### 2.提交\nCommit Message格式   \n\n```\n<type>(<scope>): <subject>\n<space>\n<body>\n<space>\n<footer>\n```\n\n上面是一次提交后Message格式规范，分成标题、内容详情、结尾三个部分，各有各的用处。   \n头部即首行，是可以直接在页面中预览的部分，一共有三个部分<type>, <scope>, <subject>, 含义分别如下：\n\n*Type*   \n\n```\n - feat: 新功能(feature)\n - fix: 修补bug\n - docs: 文档(documentation)\n - style: 格式(不影响代码运行的变动)\n - refactor: 重构(即不是新增功能，也不是修改bug的代码变动)\n - test: 增加测试\n - chore: 构建过程或辅助工具的变动\n```\n\n*Scope*   \n\n```\n用来说明本次提交影响的范围，即简要说明修改会涉及的部分。\n```\n\n*Subject*\n\n```\n用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循\n下面三条：\n - 以动词开头，使用第一人称现在时\n - 首字母不要大写\n - 结尾不用句号( . )  \n```\n\n*Body*   \n\n```\n<body>里的内容是对上面subject里内容的展开，在此作更加详尽的描述，内容里应该包括修改动机和修改前后的对比。\n```\n\n*Footer*   \n\n```\n<footer>里主要放置不兼容变更和Issue关闭的信息。\n```\n\n#### Revert   \n\n```\n此外如果需要撤销之前的提交，那么本次提交Message中必须以revert: 开头，后面紧跟前面描述的Header部分，格式不变。\n```\n\n在具体开发工作中主要需要遵守的原则就是[使每次提交都有质量]，只要坚持做到以下几点：\n 1. 提交时的粒度是一个小功能点或者一个bug fix，这样进行恢复等操作时能够将[误伤]减到最低；\n 2. 用一句简练的话写在第一行，然后空一行稍微详细阐述提交所增加或修改的地方；\n 3. 不要没提交一次就推送一次，多积攒几个提交后一次性推送，这样可以避免在进行一次提交后发现代码中还有小错误。\n\n```\n加入代码已经提交了，对这次提交的内容进行检查时发现里面有个变量单次拼错了或者其他失误，只要还没有推送到远程，\n就有一个不被他人发觉你的疏忽的补救方法——   \n首先，把失误修正之后提交，可以用与上次提交相同的Message。   \n然后，终端中执行<code>git rebase -i [SHA]</code>，其中SHA是上一次提交之前的那次提交的。   \n最后，这样就将两次提交的节点合并成一个，甚至能够修改提交信息。   \n```\n### 3.推送\n当自己一个人进行开发时，在功能完成之前不要急着创建远程分支。   \n\n### 4.拉取和合并\n在将其他分支的代码合并到当前分支时，如果那个分支是当前分支的父分支，为了保持图表的可读性和可追踪性，\n可以考虑用 git rebase 来代替 git merge；反过来或者不是父子关系的两个分支以及互相已经 git merge 过的分支，\n就不要采用 git rebase 了，避免出现重复的冲突和提交节点。   \n\n### 最后献上一句话\n日拱一卒，功不唐捐。\n","source":"_posts/团队中的git实践.md","raw":"title: 团队中的git实践   \ndate: 2016-05-14 20:50:07   \ntags: team work | git   \n\n---\n为了获得软件质量和开发效率的双重收益，软件项目开发早已不再是一个人的事情了，而是一个团队(team)的事情。不但如此，现今的软件开发规模越来越大，所涉及的技术门类也越来越复杂，一个人难以独挑大梁，同时，一个人也难以在短周期内完成复杂项目。团队的意义不仅在于提高开发效率，更能保证开发质量，一人负责一块开发内容就可以用充足的精力和热情使这块内容做的更加完美。   \n说到团队开发，总是离不开项目管理和版本控制工具，这里我们将会讨论版本控制工具——git在团队中正确实践的姿势。   \nGit/Github是任何一个非小白程序员都知道或使用的工具/网站，随着软件开发学龄的深入，我自己的体会是越来越离不开这个东西了。一个人用git可以用得随心所欲，但团队中就是另外一回事了。一个人的项目，代码怎么改、怎么提交都不会有冲突，这样也会养成一些不良习惯，把这些习惯带到团队开发中，轻则让队友讨厌，重则酿成大祸（这不是危言耸听）。   \n### 1.习惯养成\n如果一个团队在使用git时没有一些规范，那将是一场难以醒来的噩梦！然而，规范固然重要，但更重要的是个人素质，在使用git时需要自己养成良好的习惯。\n### 2.提交\nCommit Message格式   \n\n```\n<type>(<scope>): <subject>\n<space>\n<body>\n<space>\n<footer>\n```\n\n上面是一次提交后Message格式规范，分成标题、内容详情、结尾三个部分，各有各的用处。   \n头部即首行，是可以直接在页面中预览的部分，一共有三个部分<type>, <scope>, <subject>, 含义分别如下：\n\n*Type*   \n\n```\n - feat: 新功能(feature)\n - fix: 修补bug\n - docs: 文档(documentation)\n - style: 格式(不影响代码运行的变动)\n - refactor: 重构(即不是新增功能，也不是修改bug的代码变动)\n - test: 增加测试\n - chore: 构建过程或辅助工具的变动\n```\n\n*Scope*   \n\n```\n用来说明本次提交影响的范围，即简要说明修改会涉及的部分。\n```\n\n*Subject*\n\n```\n用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循\n下面三条：\n - 以动词开头，使用第一人称现在时\n - 首字母不要大写\n - 结尾不用句号( . )  \n```\n\n*Body*   \n\n```\n<body>里的内容是对上面subject里内容的展开，在此作更加详尽的描述，内容里应该包括修改动机和修改前后的对比。\n```\n\n*Footer*   \n\n```\n<footer>里主要放置不兼容变更和Issue关闭的信息。\n```\n\n#### Revert   \n\n```\n此外如果需要撤销之前的提交，那么本次提交Message中必须以revert: 开头，后面紧跟前面描述的Header部分，格式不变。\n```\n\n在具体开发工作中主要需要遵守的原则就是[使每次提交都有质量]，只要坚持做到以下几点：\n 1. 提交时的粒度是一个小功能点或者一个bug fix，这样进行恢复等操作时能够将[误伤]减到最低；\n 2. 用一句简练的话写在第一行，然后空一行稍微详细阐述提交所增加或修改的地方；\n 3. 不要没提交一次就推送一次，多积攒几个提交后一次性推送，这样可以避免在进行一次提交后发现代码中还有小错误。\n\n```\n加入代码已经提交了，对这次提交的内容进行检查时发现里面有个变量单次拼错了或者其他失误，只要还没有推送到远程，\n就有一个不被他人发觉你的疏忽的补救方法——   \n首先，把失误修正之后提交，可以用与上次提交相同的Message。   \n然后，终端中执行<code>git rebase -i [SHA]</code>，其中SHA是上一次提交之前的那次提交的。   \n最后，这样就将两次提交的节点合并成一个，甚至能够修改提交信息。   \n```\n### 3.推送\n当自己一个人进行开发时，在功能完成之前不要急着创建远程分支。   \n\n### 4.拉取和合并\n在将其他分支的代码合并到当前分支时，如果那个分支是当前分支的父分支，为了保持图表的可读性和可追踪性，\n可以考虑用 git rebase 来代替 git merge；反过来或者不是父子关系的两个分支以及互相已经 git merge 过的分支，\n就不要采用 git rebase 了，避免出现重复的冲突和提交节点。   \n\n### 最后献上一句话\n日拱一卒，功不唐捐。\n","slug":"团队中的git实践","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9o1000v7ysl01sd4tjm","content":"<p>为了获得软件质量和开发效率的双重收益，软件项目开发早已不再是一个人的事情了，而是一个团队(team)的事情。不但如此，现今的软件开发规模越来越大，所涉及的技术门类也越来越复杂，一个人难以独挑大梁，同时，一个人也难以在短周期内完成复杂项目。团队的意义不仅在于提高开发效率，更能保证开发质量，一人负责一块开发内容就可以用充足的精力和热情使这块内容做的更加完美。<br>说到团队开发，总是离不开项目管理和版本控制工具，这里我们将会讨论版本控制工具——git在团队中正确实践的姿势。<br>Git/Github是任何一个非小白程序员都知道或使用的工具/网站，随着软件开发学龄的深入，我自己的体会是越来越离不开这个东西了。一个人用git可以用得随心所欲，但团队中就是另外一回事了。一个人的项目，代码怎么改、怎么提交都不会有冲突，这样也会养成一些不良习惯，把这些习惯带到团队开发中，轻则让队友讨厌，重则酿成大祸（这不是危言耸听）。   </p>\n<h3 id=\"1-习惯养成\"><a href=\"#1-习惯养成\" class=\"headerlink\" title=\"1.习惯养成\"></a>1.习惯养成</h3><p>如果一个团队在使用git时没有一些规范，那将是一场难以醒来的噩梦！然而，规范固然重要，但更重要的是个人素质，在使用git时需要自己养成良好的习惯。</p>\n<h3 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h3><p>Commit Message格式   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class=\"line\">&lt;space&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;space&gt;</div><div class=\"line\">&lt;footer&gt;</div></pre></td></tr></table></figure>\n<p>上面是一次提交后Message格式规范，分成标题、内容详情、结尾三个部分，各有各的用处。<br>头部即首行，是可以直接在页面中预览的部分，一共有三个部分<type>, <scope>, <subject>, 含义分别如下：</subject></scope></type></p>\n<p><em>Type</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- feat: 新功能(feature)</div><div class=\"line\">- fix: 修补bug</div><div class=\"line\">- docs: 文档(documentation)</div><div class=\"line\">- style: 格式(不影响代码运行的变动)</div><div class=\"line\">- refactor: 重构(即不是新增功能，也不是修改bug的代码变动)</div><div class=\"line\">- test: 增加测试</div><div class=\"line\">- chore: 构建过程或辅助工具的变动</div></pre></td></tr></table></figure>\n<p><em>Scope</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">用来说明本次提交影响的范围，即简要说明修改会涉及的部分。</div></pre></td></tr></table></figure>\n<p><em>Subject</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循</div><div class=\"line\">下面三条：</div><div class=\"line\"> - 以动词开头，使用第一人称现在时</div><div class=\"line\"> - 首字母不要大写</div><div class=\"line\"> - 结尾不用句号( . )</div></pre></td></tr></table></figure>\n<p><em>Body</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;里的内容是对上面subject里内容的展开，在此作更加详尽的描述，内容里应该包括修改动机和修改前后的对比。</div></pre></td></tr></table></figure>\n<p><em>Footer</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;footer&gt;里主要放置不兼容变更和Issue关闭的信息。</div></pre></td></tr></table></figure>\n<h4 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">此外如果需要撤销之前的提交，那么本次提交Message中必须以revert: 开头，后面紧跟前面描述的Header部分，格式不变。</div></pre></td></tr></table></figure>\n<p>在具体开发工作中主要需要遵守的原则就是[使每次提交都有质量]，只要坚持做到以下几点：</p>\n<ol>\n<li>提交时的粒度是一个小功能点或者一个bug fix，这样进行恢复等操作时能够将[误伤]减到最低；</li>\n<li>用一句简练的话写在第一行，然后空一行稍微详细阐述提交所增加或修改的地方；</li>\n<li>不要没提交一次就推送一次，多积攒几个提交后一次性推送，这样可以避免在进行一次提交后发现代码中还有小错误。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">加入代码已经提交了，对这次提交的内容进行检查时发现里面有个变量单次拼错了或者其他失误，只要还没有推送到远程，</div><div class=\"line\">就有一个不被他人发觉你的疏忽的补救方法——   </div><div class=\"line\">首先，把失误修正之后提交，可以用与上次提交相同的Message。   </div><div class=\"line\">然后，终端中执行&lt;code&gt;git rebase -i [SHA]&lt;/code&gt;，其中SHA是上一次提交之前的那次提交的。   </div><div class=\"line\">最后，这样就将两次提交的节点合并成一个，甚至能够修改提交信息。</div></pre></td></tr></table></figure>\n<h3 id=\"3-推送\"><a href=\"#3-推送\" class=\"headerlink\" title=\"3.推送\"></a>3.推送</h3><p>当自己一个人进行开发时，在功能完成之前不要急着创建远程分支。   </p>\n<h3 id=\"4-拉取和合并\"><a href=\"#4-拉取和合并\" class=\"headerlink\" title=\"4.拉取和合并\"></a>4.拉取和合并</h3><p>在将其他分支的代码合并到当前分支时，如果那个分支是当前分支的父分支，为了保持图表的可读性和可追踪性，<br>可以考虑用 git rebase 来代替 git merge；反过来或者不是父子关系的两个分支以及互相已经 git merge 过的分支，<br>就不要采用 git rebase 了，避免出现重复的冲突和提交节点。   </p>\n<h3 id=\"最后献上一句话\"><a href=\"#最后献上一句话\" class=\"headerlink\" title=\"最后献上一句话\"></a>最后献上一句话</h3><p>日拱一卒，功不唐捐。</p>\n","excerpt":"","more":"<p>为了获得软件质量和开发效率的双重收益，软件项目开发早已不再是一个人的事情了，而是一个团队(team)的事情。不但如此，现今的软件开发规模越来越大，所涉及的技术门类也越来越复杂，一个人难以独挑大梁，同时，一个人也难以在短周期内完成复杂项目。团队的意义不仅在于提高开发效率，更能保证开发质量，一人负责一块开发内容就可以用充足的精力和热情使这块内容做的更加完美。<br>说到团队开发，总是离不开项目管理和版本控制工具，这里我们将会讨论版本控制工具——git在团队中正确实践的姿势。<br>Git/Github是任何一个非小白程序员都知道或使用的工具/网站，随着软件开发学龄的深入，我自己的体会是越来越离不开这个东西了。一个人用git可以用得随心所欲，但团队中就是另外一回事了。一个人的项目，代码怎么改、怎么提交都不会有冲突，这样也会养成一些不良习惯，把这些习惯带到团队开发中，轻则让队友讨厌，重则酿成大祸（这不是危言耸听）。   </p>\n<h3 id=\"1-习惯养成\"><a href=\"#1-习惯养成\" class=\"headerlink\" title=\"1.习惯养成\"></a>1.习惯养成</h3><p>如果一个团队在使用git时没有一些规范，那将是一场难以醒来的噩梦！然而，规范固然重要，但更重要的是个人素质，在使用git时需要自己养成良好的习惯。</p>\n<h3 id=\"2-提交\"><a href=\"#2-提交\" class=\"headerlink\" title=\"2.提交\"></a>2.提交</h3><p>Commit Message格式   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;</div><div class=\"line\">&lt;space&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;space&gt;</div><div class=\"line\">&lt;footer&gt;</div></pre></td></tr></table></figure>\n<p>上面是一次提交后Message格式规范，分成标题、内容详情、结尾三个部分，各有各的用处。<br>头部即首行，是可以直接在页面中预览的部分，一共有三个部分<type>, <scope>, <subject>, 含义分别如下：</p>\n<p><em>Type</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- feat: 新功能(feature)</div><div class=\"line\">- fix: 修补bug</div><div class=\"line\">- docs: 文档(documentation)</div><div class=\"line\">- style: 格式(不影响代码运行的变动)</div><div class=\"line\">- refactor: 重构(即不是新增功能，也不是修改bug的代码变动)</div><div class=\"line\">- test: 增加测试</div><div class=\"line\">- chore: 构建过程或辅助工具的变动</div></pre></td></tr></table></figure>\n<p><em>Scope</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">用来说明本次提交影响的范围，即简要说明修改会涉及的部分。</div></pre></td></tr></table></figure>\n<p><em>Subject</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">用来简要描述本次改动，概述就好了，因为后面还会在Body里给出具体信息。并且最好遵循</div><div class=\"line\">下面三条：</div><div class=\"line\"> - 以动词开头，使用第一人称现在时</div><div class=\"line\"> - 首字母不要大写</div><div class=\"line\"> - 结尾不用句号( . )</div></pre></td></tr></table></figure>\n<p><em>Body</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;里的内容是对上面subject里内容的展开，在此作更加详尽的描述，内容里应该包括修改动机和修改前后的对比。</div></pre></td></tr></table></figure>\n<p><em>Footer</em>   </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;footer&gt;里主要放置不兼容变更和Issue关闭的信息。</div></pre></td></tr></table></figure>\n<h4 id=\"Revert\"><a href=\"#Revert\" class=\"headerlink\" title=\"Revert\"></a>Revert</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">此外如果需要撤销之前的提交，那么本次提交Message中必须以revert: 开头，后面紧跟前面描述的Header部分，格式不变。</div></pre></td></tr></table></figure>\n<p>在具体开发工作中主要需要遵守的原则就是[使每次提交都有质量]，只要坚持做到以下几点：</p>\n<ol>\n<li>提交时的粒度是一个小功能点或者一个bug fix，这样进行恢复等操作时能够将[误伤]减到最低；</li>\n<li>用一句简练的话写在第一行，然后空一行稍微详细阐述提交所增加或修改的地方；</li>\n<li>不要没提交一次就推送一次，多积攒几个提交后一次性推送，这样可以避免在进行一次提交后发现代码中还有小错误。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">加入代码已经提交了，对这次提交的内容进行检查时发现里面有个变量单次拼错了或者其他失误，只要还没有推送到远程，</div><div class=\"line\">就有一个不被他人发觉你的疏忽的补救方法——   </div><div class=\"line\">首先，把失误修正之后提交，可以用与上次提交相同的Message。   </div><div class=\"line\">然后，终端中执行&lt;code&gt;git rebase -i [SHA]&lt;/code&gt;，其中SHA是上一次提交之前的那次提交的。   </div><div class=\"line\">最后，这样就将两次提交的节点合并成一个，甚至能够修改提交信息。</div></pre></td></tr></table></figure>\n<h3 id=\"3-推送\"><a href=\"#3-推送\" class=\"headerlink\" title=\"3.推送\"></a>3.推送</h3><p>当自己一个人进行开发时，在功能完成之前不要急着创建远程分支。   </p>\n<h3 id=\"4-拉取和合并\"><a href=\"#4-拉取和合并\" class=\"headerlink\" title=\"4.拉取和合并\"></a>4.拉取和合并</h3><p>在将其他分支的代码合并到当前分支时，如果那个分支是当前分支的父分支，为了保持图表的可读性和可追踪性，<br>可以考虑用 git rebase 来代替 git merge；反过来或者不是父子关系的两个分支以及互相已经 git merge 过的分支，<br>就不要采用 git rebase 了，避免出现重复的冲突和提交节点。   </p>\n<h3 id=\"最后献上一句话\"><a href=\"#最后献上一句话\" class=\"headerlink\" title=\"最后献上一句话\"></a>最后献上一句话</h3><p>日拱一卒，功不唐捐。</p>\n"},{"title":"数字证书基础知识","date":"2016-05-03T06:54:44.000Z","_content":">在为了更好地理解其中证书的特性，这里对数字证书以及相关的知识进行了整理和总结。\n\n在讲数字证书之前必须要讲<b>非对称加密算法</b>和<b>摘要算法</b>，因为数字证书的基础就是各种加解密算法(非对称加密、\n摘要算法)，而其中的核心就是非对称加密算法了。目前而言加密方法可以分为两大类，一类是<b>单钥加密</b>\n(private key cryptography)也可以称为对称加密，还有一类叫做双钥加密(public key cryptography)也可以称为非对称加密。\n前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是不同的密码。\n\n加密算法\n===\n### 1.对称加密\n\n对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，\n同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密\n密钥算法或单密钥算法。   \n\n在应用该算法时，它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都\n可以对他们发送或接收的消息解密，所以密钥的保密性对通信性至关重要。对称加密算法的特点是算法公开、计算量小、加密速度快、\n加密效率高。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。不足之处是，交易双方都使用同\n样钥匙，安全性得不到保证。   \n\n### 2.常见的对称加密算法\n\n - DES：数据加密标准(DES，Data Encryption Standard)是一种使用密钥加密的块密码，它基于使用56位密钥的对称算法，这个\n 算法因为包含一些机密设计元素，相对短的密钥长度以及被怀疑内含美国国家安全局(NSA)的后门而在开始时是有争议的，DES现在\n 已经不被视为一种安全的加密算法，主要因为它使用的56位密钥过短，导致容易被破解。为了提供实用所需的安全性，可以使用DES的\n 派生算法3DES来进行加密，虽然3DES也存在理论上的攻击方法。\n\n - AES：高级加密标准(英语：Advanced Encryption Standard，缩写：AES)，这个标准用来替代原先的DES，已经被多方分析\n 且广为全世界所使用，2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。AES的区块长度固定为128比特，密钥\n 长度则可以是128，192或256比特。\n\n - RC4：RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。该算法\n 的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被\n 发布在互联网上，也就不再有什么商业机密了。\n\n - 是旅居瑞士中国青年学者来学嘉和著名密码专家J.Massey于1990年提出的。它在1990年正式公布并在以后得到增强。这种算法是\n 在DES算法的基础上发展出来的，类似于三重DES，和DES一样IDEA也是属于对称密钥算法。发展IDEA也是因为感到DES具有密钥太短\n 等缺点，已经过时。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n\n### 3.非对称加密\n\n与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥(publickey)和私有密钥(privatekey)；并且加密密钥和解密密钥\n是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，\n所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。\n\n### 4.非对称加密的特性\n\n - 对于一个公钥，有且只有一个对应的私钥。\n\n - 公钥是公开的，并且不能通过公钥反推出私钥。\n\n - 通过私钥加密的密文只能通过公钥能解密，通过公钥加密的密文也只能通过私钥能解密。\n\n>通过公钥是极难推算出私钥的，只能通过穷举，所以只要密钥足够长，要想从公钥推算出私钥几乎不可能的。\n\n### 5.非对称加密的主要用途\n\n对信息保密，防止中间人攻击：将明文使用公钥加密，传输给接收者，这样确保信息只能被有私钥的拥有者解密，其他人无法获得明文信息，\n因为没有私钥无法进行解密。该方法一般用于交换对称密钥。身份验证和防止信息篡改：私钥拥有者使用私钥加密一段授权明文，并将授权\n明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否\n被篡改过。此方法用于数字签名。\n\n### 6.常见的非对称加密算法\n\n - RSA：1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。\n 从那时直到现在，RSA算法一直是最广为使用的”非对称加密算法”。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。这种算法非常可靠，\n 密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解(至少没人公开宣布)。\n 因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。适用于数字签名和密钥交换。 该算法是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据。\n\n - DSA：数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，\n 已作为数字签名的标准。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性。DSA只是一种算法，\n 和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名，它比RSA要快很多。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密，\n 仅适用于数字签名。\n\n - Diffie-Hellman：一种确保共享KEY安全穿越不安全网络的方法。Whitefield与Martin Hellman在1976年提出了一个奇妙的密钥交换协议，\n 称为Diffie-Hellman密钥交换协议/算法(Diffie-Hellman Key Exchange/Agreement Algorithm)。这个机制的巧妙在于需要安全通信的双方可以用这个方法确定对称密钥。\n 然后可以用这个密钥进行加密和解密。但是注意，这个密钥交换协议/算法只能用于密钥的交换，而不能进行消息的加密和解密。双方确定要用的密钥后，要使用其他对称密钥操作\n 加密算法实际加密和解密消息。该算法仅适用于密钥交换。\n\n - ECC：椭圆加密算法(ECC)是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，与经典的RSA，DSA等公钥密码体制相比，\n 椭圆密码体制有以下优点：160位的椭圆密钥与1024位的RSA密钥安全性相同；在私钥的加密解密速度上，ECC算法比RSA、DSA速度更快；存储空间占用小；带宽要求低；\n ECC算法的数学理论非常深奥和复杂，在工程应用中比较难于实现，但它的单位安全强度相对较高。\n\n非对称加密算法可能是世界上最重要的算法，它是当今电子商务等领域的基石。非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。\n因此，在实际使用中，往往与对称加密和摘要算法结合使用。列如在实体之间交换对称密钥时，或者在签署一封邮件的散列时(数字签名)。\n\n>散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法。\n\n### 7.摘要算法\n\n摘要算法是一个神奇的算法，也称为散列或者散列值。是一种与基于密钥(对称密钥或公钥)的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。\n\n### 8.摘要算法具有以下特性：\n\n - 只要源文本不同，计算得到的结果，必然不同(或者说机会很少)。\n\n - 无法从结果反推出源数据(那是当然的，不然就能量不守恒了)。\n\n### 9.常见的摘要算法：\n\n - MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个固定位位的数值(通常是128位)。\n\n - SHA-1：与 DSA 公钥算法相似，安全散列算法1(SHA-1)也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。\n\n - MAC(Message Authentication Code)：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC(用于消息认证的密钥散列算法)。\n\n - CRC(Cyclic Redundancy Check)：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段(CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类)。\n\n摘要算法用于对比信息源是否一致，因为只要源数据发生变化，得到的摘要必然不同。因为通常结果比源数据要短很多，所以称为“摘要”。\n\n应用场景，如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。\n\n### 10.数字签名\n\n数字签名就是对非对称加密和摘要算法的一种应用，能够确保信息在发布后不会被篡改(摘要算法特性)，保证数据的完整性和可信性；同时也可以防止数据被他人伪造(非对称加密算法特性)；列如，我们有一段授权文本需要发布时，为了防止中途篡改发布的内容，保证发布文本的完整性，以及文本是由指定的发布者发布的。那么，可以通过摘要算法得到发布内容的摘要，得到摘要之后，发布者使用私钥加密得到密文(签名)，这时候将源文本、密文(签名)以及公钥一起发布出去即可。\n\n验证过程为：首先验证公钥是否是发布者的公钥，然后用公钥对密文进行解密，得到摘要，使用发布者对文本同样的摘要算法得到摘要文本，比对摘要是否一致即可确认信息是否被篡改或者是指定发布者发布的。\n\n数字证书\n===\n\n### 1.现实生活中的证书\n\n在现实生活中，证书顾名思义，就是权限机构颁发的证明。比如英语6级证书，就是教育部门颁发给通过了6级考核的个人的证明，证明这个人的英语能力。我们来看一下这个证书的组成：\n\n - 被证明人：老王\n\n - 内容：通过了英语六级\n\n - 盖章：教育部门的公章或钢印\n\n当老王用这张证书找工作时，用人单位会通过查看证书的各项内容(尤其是公章)，来验证证书的合法性和老王的能力。在现实生活中经常有假的6级证书，这些假证书最重要的就是有一个假公章。现实生活中使用法律法规来约束私刻假公章的行为，但是用人单位可能不能十分准确的判断公章是真是假。而数字签字可以来解决该类问题。\n\n## 2.数字证书\n\n数字证书就是通过数字签名实现的数字化的证书，在现实生活中公章可以被伪造，但是在计算数字世界中，数字签名是没办法被伪造的，比如上述证书中，在一个证书文件中写明了证书内容，颁发证书时，教育部门用他们的私钥对文件的摘要信息进行签名，将签名和证书文件一起发布，这样就能确保该证书无法被伪造。验证证书是否合法时，首先用教育部门的公钥(公钥是公开的谁都可以获取到)对签名进行解密得到一个摘要信息，使用教育部门同样的摘要算法得到证书的另一个摘要信息，对比两个摘要信息是否一致就能确定该证书是否合法。在一般的证书组成中部分中，还加入了一些其他信息，比如证书的有效期。\n\n数字证书也有很多的签发机构，不同的签发机构签发的证书，用途也是不一样的，比如iOS开发中，使用到的ipa文件签名证书，需要到苹果申请。而在Web访问中为了防止Web内容在网络中安全传输，需要用到的SSL证书则需要向几家公认的机构签发。这些签发机构统称为CA(Certificate Authority)。\n\nWeb访问相关的证书可以向国际公认的几个机构：\n\n - WebTrust\n\n - GlobalSign\n\n - GTE\n\n - Nortel\n\n - Verisign\n\n### 3.数字证书的验证\n\n申请证书是为了验证，比如Web应用相关的SSL证书验证方是浏览器，iOS各种证书的验证方是iOS设备。因为数字证书是基于数字签名的，所有数字证书的合法性验证就是验证数字证书的签名是否正确，对于签名的验证在是需要签发机构的公钥才能验证；\n\n对于iOS开发证书来说，申请完签名证书后，还需要安装苹果的公钥证书(XCode安装后会自动安装)，这样才能确保我们申请的证书是可以被验证通过的(合法的)，可用来进行ipa文件签名的。对于Web相关的证书签名的验证，则是由浏览器来验证，对于国际公认的几个证书签发机构浏览器会内置其公钥证书，用来验证数字证书的可信性。\n\n当数字证书通过验证后，便可以用数字证书做对应的事情，iOS开发证书可以用来对APP进行签名，SSL证书可以用来做Web内容加密处理相关的事情。所以有了这些证书之后，能保证在数据的传输过程中，数据是不会被篡改的，并且信息来源也是不能不修改的，从而确保信息安全。\n\n>对于iOS，iOS系统已经将这个验证过程固化在系统中了，除非越狱，否则无法绕过\n\n### 4.数字证书的授权链\n\n数字证书还包含一个授权链信息，举个例子：如果你要申请休假1周，需要你的上司审批，你的上司需要他的上司同意，最终需要大老板同意，那么这一层层的授权，形成了一个授权链，大老板是授权链的根(root)，中间这些环节分别是被更接近root的人授权的。\n\n比如苹果开发者的APP签名证书，该证书可以用来对APP进行签名，该证书实际上是由苹果的Worldwide Developer Relations Certificate Authority(WDRCA)授权签名的，而它是由Apple Certificate Authority授权签名的。在这个关系链中苹果的CA是根。 苹果CA根证书默认是内置在苹果系统中的，所以WDRCA的可信性可以由苹果内置的CA根证书来验证其可信性。\n\nWeb相关的SSL证书顶部CA根，则就是上述提到的几家公认的签发机构，当我们需要Web做SSL的证书时，便可以向上述机构申请，通常向根机构申请费用都会比较高，也可以向一些二级授权机构进行申请，选择根机构证书签发的好处就是目前大多数的浏览器都会预装内置了这些权威CA的公钥证书，这样，在使用这些权威CA签发过的证书的时候，浏览器一般不会报风险提示。\n\n总结\n===\n\n数字证书签名的基础是非对称加密算法，利用了非对称加密的身份验证和防止信息篡改的特性来实现的，在一些其他方面比如HTTPS中密钥交换用的就是非对称加密的保密特性来实现的，在非对称加密算法中RSA应用最广。非对称加密虽好，但却有一个弊端，就是加解密比较耗时，所以一般都是配合对称加密一起使用。\n","source":"_posts/数字证书基础知识.md","raw":"title: 数字证书基础知识   \ndate: 2016-05-03 14:54:44   \ntags: 数字证书\n\n---\n>在为了更好地理解其中证书的特性，这里对数字证书以及相关的知识进行了整理和总结。\n\n在讲数字证书之前必须要讲<b>非对称加密算法</b>和<b>摘要算法</b>，因为数字证书的基础就是各种加解密算法(非对称加密、\n摘要算法)，而其中的核心就是非对称加密算法了。目前而言加密方法可以分为两大类，一类是<b>单钥加密</b>\n(private key cryptography)也可以称为对称加密，还有一类叫做双钥加密(public key cryptography)也可以称为非对称加密。\n前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是不同的密码。\n\n加密算法\n===\n### 1.对称加密\n\n对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，\n同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密\n密钥算法或单密钥算法。   \n\n在应用该算法时，它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都\n可以对他们发送或接收的消息解密，所以密钥的保密性对通信性至关重要。对称加密算法的特点是算法公开、计算量小、加密速度快、\n加密效率高。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。不足之处是，交易双方都使用同\n样钥匙，安全性得不到保证。   \n\n### 2.常见的对称加密算法\n\n - DES：数据加密标准(DES，Data Encryption Standard)是一种使用密钥加密的块密码，它基于使用56位密钥的对称算法，这个\n 算法因为包含一些机密设计元素，相对短的密钥长度以及被怀疑内含美国国家安全局(NSA)的后门而在开始时是有争议的，DES现在\n 已经不被视为一种安全的加密算法，主要因为它使用的56位密钥过短，导致容易被破解。为了提供实用所需的安全性，可以使用DES的\n 派生算法3DES来进行加密，虽然3DES也存在理论上的攻击方法。\n\n - AES：高级加密标准(英语：Advanced Encryption Standard，缩写：AES)，这个标准用来替代原先的DES，已经被多方分析\n 且广为全世界所使用，2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。AES的区块长度固定为128比特，密钥\n 长度则可以是128，192或256比特。\n\n - RC4：RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。该算法\n 的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被\n 发布在互联网上，也就不再有什么商业机密了。\n\n - 是旅居瑞士中国青年学者来学嘉和著名密码专家J.Massey于1990年提出的。它在1990年正式公布并在以后得到增强。这种算法是\n 在DES算法的基础上发展出来的，类似于三重DES，和DES一样IDEA也是属于对称密钥算法。发展IDEA也是因为感到DES具有密钥太短\n 等缺点，已经过时。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。\n\n### 3.非对称加密\n\n与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥(publickey)和私有密钥(privatekey)；并且加密密钥和解密密钥\n是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，\n所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。\n\n### 4.非对称加密的特性\n\n - 对于一个公钥，有且只有一个对应的私钥。\n\n - 公钥是公开的，并且不能通过公钥反推出私钥。\n\n - 通过私钥加密的密文只能通过公钥能解密，通过公钥加密的密文也只能通过私钥能解密。\n\n>通过公钥是极难推算出私钥的，只能通过穷举，所以只要密钥足够长，要想从公钥推算出私钥几乎不可能的。\n\n### 5.非对称加密的主要用途\n\n对信息保密，防止中间人攻击：将明文使用公钥加密，传输给接收者，这样确保信息只能被有私钥的拥有者解密，其他人无法获得明文信息，\n因为没有私钥无法进行解密。该方法一般用于交换对称密钥。身份验证和防止信息篡改：私钥拥有者使用私钥加密一段授权明文，并将授权\n明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否\n被篡改过。此方法用于数字签名。\n\n### 6.常见的非对称加密算法\n\n - RSA：1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。\n 从那时直到现在，RSA算法一直是最广为使用的”非对称加密算法”。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。这种算法非常可靠，\n 密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解(至少没人公开宣布)。\n 因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。适用于数字签名和密钥交换。 该算法是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据。\n\n - DSA：数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，\n 已作为数字签名的标准。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性。DSA只是一种算法，\n 和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名，它比RSA要快很多。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密，\n 仅适用于数字签名。\n\n - Diffie-Hellman：一种确保共享KEY安全穿越不安全网络的方法。Whitefield与Martin Hellman在1976年提出了一个奇妙的密钥交换协议，\n 称为Diffie-Hellman密钥交换协议/算法(Diffie-Hellman Key Exchange/Agreement Algorithm)。这个机制的巧妙在于需要安全通信的双方可以用这个方法确定对称密钥。\n 然后可以用这个密钥进行加密和解密。但是注意，这个密钥交换协议/算法只能用于密钥的交换，而不能进行消息的加密和解密。双方确定要用的密钥后，要使用其他对称密钥操作\n 加密算法实际加密和解密消息。该算法仅适用于密钥交换。\n\n - ECC：椭圆加密算法(ECC)是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，与经典的RSA，DSA等公钥密码体制相比，\n 椭圆密码体制有以下优点：160位的椭圆密钥与1024位的RSA密钥安全性相同；在私钥的加密解密速度上，ECC算法比RSA、DSA速度更快；存储空间占用小；带宽要求低；\n ECC算法的数学理论非常深奥和复杂，在工程应用中比较难于实现，但它的单位安全强度相对较高。\n\n非对称加密算法可能是世界上最重要的算法，它是当今电子商务等领域的基石。非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。\n因此，在实际使用中，往往与对称加密和摘要算法结合使用。列如在实体之间交换对称密钥时，或者在签署一封邮件的散列时(数字签名)。\n\n>散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法。\n\n### 7.摘要算法\n\n摘要算法是一个神奇的算法，也称为散列或者散列值。是一种与基于密钥(对称密钥或公钥)的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。\n\n### 8.摘要算法具有以下特性：\n\n - 只要源文本不同，计算得到的结果，必然不同(或者说机会很少)。\n\n - 无法从结果反推出源数据(那是当然的，不然就能量不守恒了)。\n\n### 9.常见的摘要算法：\n\n - MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个固定位位的数值(通常是128位)。\n\n - SHA-1：与 DSA 公钥算法相似，安全散列算法1(SHA-1)也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。\n\n - MAC(Message Authentication Code)：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC(用于消息认证的密钥散列算法)。\n\n - CRC(Cyclic Redundancy Check)：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段(CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类)。\n\n摘要算法用于对比信息源是否一致，因为只要源数据发生变化，得到的摘要必然不同。因为通常结果比源数据要短很多，所以称为“摘要”。\n\n应用场景，如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。\n\n### 10.数字签名\n\n数字签名就是对非对称加密和摘要算法的一种应用，能够确保信息在发布后不会被篡改(摘要算法特性)，保证数据的完整性和可信性；同时也可以防止数据被他人伪造(非对称加密算法特性)；列如，我们有一段授权文本需要发布时，为了防止中途篡改发布的内容，保证发布文本的完整性，以及文本是由指定的发布者发布的。那么，可以通过摘要算法得到发布内容的摘要，得到摘要之后，发布者使用私钥加密得到密文(签名)，这时候将源文本、密文(签名)以及公钥一起发布出去即可。\n\n验证过程为：首先验证公钥是否是发布者的公钥，然后用公钥对密文进行解密，得到摘要，使用发布者对文本同样的摘要算法得到摘要文本，比对摘要是否一致即可确认信息是否被篡改或者是指定发布者发布的。\n\n数字证书\n===\n\n### 1.现实生活中的证书\n\n在现实生活中，证书顾名思义，就是权限机构颁发的证明。比如英语6级证书，就是教育部门颁发给通过了6级考核的个人的证明，证明这个人的英语能力。我们来看一下这个证书的组成：\n\n - 被证明人：老王\n\n - 内容：通过了英语六级\n\n - 盖章：教育部门的公章或钢印\n\n当老王用这张证书找工作时，用人单位会通过查看证书的各项内容(尤其是公章)，来验证证书的合法性和老王的能力。在现实生活中经常有假的6级证书，这些假证书最重要的就是有一个假公章。现实生活中使用法律法规来约束私刻假公章的行为，但是用人单位可能不能十分准确的判断公章是真是假。而数字签字可以来解决该类问题。\n\n## 2.数字证书\n\n数字证书就是通过数字签名实现的数字化的证书，在现实生活中公章可以被伪造，但是在计算数字世界中，数字签名是没办法被伪造的，比如上述证书中，在一个证书文件中写明了证书内容，颁发证书时，教育部门用他们的私钥对文件的摘要信息进行签名，将签名和证书文件一起发布，这样就能确保该证书无法被伪造。验证证书是否合法时，首先用教育部门的公钥(公钥是公开的谁都可以获取到)对签名进行解密得到一个摘要信息，使用教育部门同样的摘要算法得到证书的另一个摘要信息，对比两个摘要信息是否一致就能确定该证书是否合法。在一般的证书组成中部分中，还加入了一些其他信息，比如证书的有效期。\n\n数字证书也有很多的签发机构，不同的签发机构签发的证书，用途也是不一样的，比如iOS开发中，使用到的ipa文件签名证书，需要到苹果申请。而在Web访问中为了防止Web内容在网络中安全传输，需要用到的SSL证书则需要向几家公认的机构签发。这些签发机构统称为CA(Certificate Authority)。\n\nWeb访问相关的证书可以向国际公认的几个机构：\n\n - WebTrust\n\n - GlobalSign\n\n - GTE\n\n - Nortel\n\n - Verisign\n\n### 3.数字证书的验证\n\n申请证书是为了验证，比如Web应用相关的SSL证书验证方是浏览器，iOS各种证书的验证方是iOS设备。因为数字证书是基于数字签名的，所有数字证书的合法性验证就是验证数字证书的签名是否正确，对于签名的验证在是需要签发机构的公钥才能验证；\n\n对于iOS开发证书来说，申请完签名证书后，还需要安装苹果的公钥证书(XCode安装后会自动安装)，这样才能确保我们申请的证书是可以被验证通过的(合法的)，可用来进行ipa文件签名的。对于Web相关的证书签名的验证，则是由浏览器来验证，对于国际公认的几个证书签发机构浏览器会内置其公钥证书，用来验证数字证书的可信性。\n\n当数字证书通过验证后，便可以用数字证书做对应的事情，iOS开发证书可以用来对APP进行签名，SSL证书可以用来做Web内容加密处理相关的事情。所以有了这些证书之后，能保证在数据的传输过程中，数据是不会被篡改的，并且信息来源也是不能不修改的，从而确保信息安全。\n\n>对于iOS，iOS系统已经将这个验证过程固化在系统中了，除非越狱，否则无法绕过\n\n### 4.数字证书的授权链\n\n数字证书还包含一个授权链信息，举个例子：如果你要申请休假1周，需要你的上司审批，你的上司需要他的上司同意，最终需要大老板同意，那么这一层层的授权，形成了一个授权链，大老板是授权链的根(root)，中间这些环节分别是被更接近root的人授权的。\n\n比如苹果开发者的APP签名证书，该证书可以用来对APP进行签名，该证书实际上是由苹果的Worldwide Developer Relations Certificate Authority(WDRCA)授权签名的，而它是由Apple Certificate Authority授权签名的。在这个关系链中苹果的CA是根。 苹果CA根证书默认是内置在苹果系统中的，所以WDRCA的可信性可以由苹果内置的CA根证书来验证其可信性。\n\nWeb相关的SSL证书顶部CA根，则就是上述提到的几家公认的签发机构，当我们需要Web做SSL的证书时，便可以向上述机构申请，通常向根机构申请费用都会比较高，也可以向一些二级授权机构进行申请，选择根机构证书签发的好处就是目前大多数的浏览器都会预装内置了这些权威CA的公钥证书，这样，在使用这些权威CA签发过的证书的时候，浏览器一般不会报风险提示。\n\n总结\n===\n\n数字证书签名的基础是非对称加密算法，利用了非对称加密的身份验证和防止信息篡改的特性来实现的，在一些其他方面比如HTTPS中密钥交换用的就是非对称加密的保密特性来实现的，在非对称加密算法中RSA应用最广。非对称加密虽好，但却有一个弊端，就是加解密比较耗时，所以一般都是配合对称加密一起使用。\n","slug":"数字证书基础知识","published":1,"updated":"2017-03-22T12:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5dsx9o2000w7ysl26234jkm","content":"<blockquote>\n<p>在为了更好地理解其中证书的特性，这里对数字证书以及相关的知识进行了整理和总结。</p>\n</blockquote>\n<p>在讲数字证书之前必须要讲<b>非对称加密算法</b>和<b>摘要算法</b>，因为数字证书的基础就是各种加解密算法(非对称加密、<br>摘要算法)，而其中的核心就是非对称加密算法了。目前而言加密方法可以分为两大类，一类是<b>单钥加密</b><br>(private key cryptography)也可以称为对称加密，还有一类叫做双钥加密(public key cryptography)也可以称为非对称加密。<br>前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是不同的密码。</p>\n<h1 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h1><h3 id=\"1-对称加密\"><a href=\"#1-对称加密\" class=\"headerlink\" title=\"1.对称加密\"></a>1.对称加密</h3><p>对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，<br>同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密<br>密钥算法或单密钥算法。   </p>\n<p>在应用该算法时，它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都<br>可以对他们发送或接收的消息解密，所以密钥的保密性对通信性至关重要。对称加密算法的特点是算法公开、计算量小、加密速度快、<br>加密效率高。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。不足之处是，交易双方都使用同<br>样钥匙，安全性得不到保证。   </p>\n<h3 id=\"2-常见的对称加密算法\"><a href=\"#2-常见的对称加密算法\" class=\"headerlink\" title=\"2.常见的对称加密算法\"></a>2.常见的对称加密算法</h3><ul>\n<li><p>DES：数据加密标准(DES，Data Encryption Standard)是一种使用密钥加密的块密码，它基于使用56位密钥的对称算法，这个<br>算法因为包含一些机密设计元素，相对短的密钥长度以及被怀疑内含美国国家安全局(NSA)的后门而在开始时是有争议的，DES现在<br>已经不被视为一种安全的加密算法，主要因为它使用的56位密钥过短，导致容易被破解。为了提供实用所需的安全性，可以使用DES的<br>派生算法3DES来进行加密，虽然3DES也存在理论上的攻击方法。</p>\n</li>\n<li><p>AES：高级加密标准(英语：Advanced Encryption Standard，缩写：AES)，这个标准用来替代原先的DES，已经被多方分析<br>且广为全世界所使用，2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。AES的区块长度固定为128比特，密钥<br>长度则可以是128，192或256比特。</p>\n</li>\n<li><p>RC4：RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。该算法<br>的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被<br>发布在互联网上，也就不再有什么商业机密了。</p>\n</li>\n<li><p>是旅居瑞士中国青年学者来学嘉和著名密码专家J.Massey于1990年提出的。它在1990年正式公布并在以后得到增强。这种算法是<br>在DES算法的基础上发展出来的，类似于三重DES，和DES一样IDEA也是属于对称密钥算法。发展IDEA也是因为感到DES具有密钥太短<br>等缺点，已经过时。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。</p>\n</li>\n</ul>\n<h3 id=\"3-非对称加密\"><a href=\"#3-非对称加密\" class=\"headerlink\" title=\"3.非对称加密\"></a>3.非对称加密</h3><p>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥(publickey)和私有密钥(privatekey)；并且加密密钥和解密密钥<br>是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，<br>所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。</p>\n<h3 id=\"4-非对称加密的特性\"><a href=\"#4-非对称加密的特性\" class=\"headerlink\" title=\"4.非对称加密的特性\"></a>4.非对称加密的特性</h3><ul>\n<li><p>对于一个公钥，有且只有一个对应的私钥。</p>\n</li>\n<li><p>公钥是公开的，并且不能通过公钥反推出私钥。</p>\n</li>\n<li><p>通过私钥加密的密文只能通过公钥能解密，通过公钥加密的密文也只能通过私钥能解密。</p>\n</li>\n</ul>\n<blockquote>\n<p>通过公钥是极难推算出私钥的，只能通过穷举，所以只要密钥足够长，要想从公钥推算出私钥几乎不可能的。</p>\n</blockquote>\n<h3 id=\"5-非对称加密的主要用途\"><a href=\"#5-非对称加密的主要用途\" class=\"headerlink\" title=\"5.非对称加密的主要用途\"></a>5.非对称加密的主要用途</h3><p>对信息保密，防止中间人攻击：将明文使用公钥加密，传输给接收者，这样确保信息只能被有私钥的拥有者解密，其他人无法获得明文信息，<br>因为没有私钥无法进行解密。该方法一般用于交换对称密钥。身份验证和防止信息篡改：私钥拥有者使用私钥加密一段授权明文，并将授权<br>明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否<br>被篡改过。此方法用于数字签名。</p>\n<h3 id=\"6-常见的非对称加密算法\"><a href=\"#6-常见的非对称加密算法\" class=\"headerlink\" title=\"6.常见的非对称加密算法\"></a>6.常见的非对称加密算法</h3><ul>\n<li><p>RSA：1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。<br>从那时直到现在，RSA算法一直是最广为使用的”非对称加密算法”。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。这种算法非常可靠，<br>密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解(至少没人公开宣布)。<br>因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。适用于数字签名和密钥交换。 该算法是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据。</p>\n</li>\n<li><p>DSA：数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，<br>已作为数字签名的标准。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性。DSA只是一种算法，<br>和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名，它比RSA要快很多。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密，<br>仅适用于数字签名。</p>\n</li>\n<li><p>Diffie-Hellman：一种确保共享KEY安全穿越不安全网络的方法。Whitefield与Martin Hellman在1976年提出了一个奇妙的密钥交换协议，<br>称为Diffie-Hellman密钥交换协议/算法(Diffie-Hellman Key Exchange/Agreement Algorithm)。这个机制的巧妙在于需要安全通信的双方可以用这个方法确定对称密钥。<br>然后可以用这个密钥进行加密和解密。但是注意，这个密钥交换协议/算法只能用于密钥的交换，而不能进行消息的加密和解密。双方确定要用的密钥后，要使用其他对称密钥操作<br>加密算法实际加密和解密消息。该算法仅适用于密钥交换。</p>\n</li>\n<li><p>ECC：椭圆加密算法(ECC)是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，与经典的RSA，DSA等公钥密码体制相比，<br>椭圆密码体制有以下优点：160位的椭圆密钥与1024位的RSA密钥安全性相同；在私钥的加密解密速度上，ECC算法比RSA、DSA速度更快；存储空间占用小；带宽要求低；<br>ECC算法的数学理论非常深奥和复杂，在工程应用中比较难于实现，但它的单位安全强度相对较高。</p>\n</li>\n</ul>\n<p>非对称加密算法可能是世界上最重要的算法，它是当今电子商务等领域的基石。非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。<br>因此，在实际使用中，往往与对称加密和摘要算法结合使用。列如在实体之间交换对称密钥时，或者在签署一封邮件的散列时(数字签名)。</p>\n<blockquote>\n<p>散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法。</p>\n</blockquote>\n<h3 id=\"7-摘要算法\"><a href=\"#7-摘要算法\" class=\"headerlink\" title=\"7.摘要算法\"></a>7.摘要算法</h3><p>摘要算法是一个神奇的算法，也称为散列或者散列值。是一种与基于密钥(对称密钥或公钥)的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。</p>\n<h3 id=\"8-摘要算法具有以下特性：\"><a href=\"#8-摘要算法具有以下特性：\" class=\"headerlink\" title=\"8.摘要算法具有以下特性：\"></a>8.摘要算法具有以下特性：</h3><ul>\n<li><p>只要源文本不同，计算得到的结果，必然不同(或者说机会很少)。</p>\n</li>\n<li><p>无法从结果反推出源数据(那是当然的，不然就能量不守恒了)。</p>\n</li>\n</ul>\n<h3 id=\"9-常见的摘要算法：\"><a href=\"#9-常见的摘要算法：\" class=\"headerlink\" title=\"9.常见的摘要算法：\"></a>9.常见的摘要算法：</h3><ul>\n<li><p>MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个固定位位的数值(通常是128位)。</p>\n</li>\n<li><p>SHA-1：与 DSA 公钥算法相似，安全散列算法1(SHA-1)也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。</p>\n</li>\n<li><p>MAC(Message Authentication Code)：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC(用于消息认证的密钥散列算法)。</p>\n</li>\n<li><p>CRC(Cyclic Redundancy Check)：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段(CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类)。</p>\n</li>\n</ul>\n<p>摘要算法用于对比信息源是否一致，因为只要源数据发生变化，得到的摘要必然不同。因为通常结果比源数据要短很多，所以称为“摘要”。</p>\n<p>应用场景，如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。</p>\n<h3 id=\"10-数字签名\"><a href=\"#10-数字签名\" class=\"headerlink\" title=\"10.数字签名\"></a>10.数字签名</h3><p>数字签名就是对非对称加密和摘要算法的一种应用，能够确保信息在发布后不会被篡改(摘要算法特性)，保证数据的完整性和可信性；同时也可以防止数据被他人伪造(非对称加密算法特性)；列如，我们有一段授权文本需要发布时，为了防止中途篡改发布的内容，保证发布文本的完整性，以及文本是由指定的发布者发布的。那么，可以通过摘要算法得到发布内容的摘要，得到摘要之后，发布者使用私钥加密得到密文(签名)，这时候将源文本、密文(签名)以及公钥一起发布出去即可。</p>\n<p>验证过程为：首先验证公钥是否是发布者的公钥，然后用公钥对密文进行解密，得到摘要，使用发布者对文本同样的摘要算法得到摘要文本，比对摘要是否一致即可确认信息是否被篡改或者是指定发布者发布的。</p>\n<h1 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h1><h3 id=\"1-现实生活中的证书\"><a href=\"#1-现实生活中的证书\" class=\"headerlink\" title=\"1.现实生活中的证书\"></a>1.现实生活中的证书</h3><p>在现实生活中，证书顾名思义，就是权限机构颁发的证明。比如英语6级证书，就是教育部门颁发给通过了6级考核的个人的证明，证明这个人的英语能力。我们来看一下这个证书的组成：</p>\n<ul>\n<li><p>被证明人：老王</p>\n</li>\n<li><p>内容：通过了英语六级</p>\n</li>\n<li><p>盖章：教育部门的公章或钢印</p>\n</li>\n</ul>\n<p>当老王用这张证书找工作时，用人单位会通过查看证书的各项内容(尤其是公章)，来验证证书的合法性和老王的能力。在现实生活中经常有假的6级证书，这些假证书最重要的就是有一个假公章。现实生活中使用法律法规来约束私刻假公章的行为，但是用人单位可能不能十分准确的判断公章是真是假。而数字签字可以来解决该类问题。</p>\n<h2 id=\"2-数字证书\"><a href=\"#2-数字证书\" class=\"headerlink\" title=\"2.数字证书\"></a>2.数字证书</h2><p>数字证书就是通过数字签名实现的数字化的证书，在现实生活中公章可以被伪造，但是在计算数字世界中，数字签名是没办法被伪造的，比如上述证书中，在一个证书文件中写明了证书内容，颁发证书时，教育部门用他们的私钥对文件的摘要信息进行签名，将签名和证书文件一起发布，这样就能确保该证书无法被伪造。验证证书是否合法时，首先用教育部门的公钥(公钥是公开的谁都可以获取到)对签名进行解密得到一个摘要信息，使用教育部门同样的摘要算法得到证书的另一个摘要信息，对比两个摘要信息是否一致就能确定该证书是否合法。在一般的证书组成中部分中，还加入了一些其他信息，比如证书的有效期。</p>\n<p>数字证书也有很多的签发机构，不同的签发机构签发的证书，用途也是不一样的，比如iOS开发中，使用到的ipa文件签名证书，需要到苹果申请。而在Web访问中为了防止Web内容在网络中安全传输，需要用到的SSL证书则需要向几家公认的机构签发。这些签发机构统称为CA(Certificate Authority)。</p>\n<p>Web访问相关的证书可以向国际公认的几个机构：</p>\n<ul>\n<li><p>WebTrust</p>\n</li>\n<li><p>GlobalSign</p>\n</li>\n<li><p>GTE</p>\n</li>\n<li><p>Nortel</p>\n</li>\n<li><p>Verisign</p>\n</li>\n</ul>\n<h3 id=\"3-数字证书的验证\"><a href=\"#3-数字证书的验证\" class=\"headerlink\" title=\"3.数字证书的验证\"></a>3.数字证书的验证</h3><p>申请证书是为了验证，比如Web应用相关的SSL证书验证方是浏览器，iOS各种证书的验证方是iOS设备。因为数字证书是基于数字签名的，所有数字证书的合法性验证就是验证数字证书的签名是否正确，对于签名的验证在是需要签发机构的公钥才能验证；</p>\n<p>对于iOS开发证书来说，申请完签名证书后，还需要安装苹果的公钥证书(XCode安装后会自动安装)，这样才能确保我们申请的证书是可以被验证通过的(合法的)，可用来进行ipa文件签名的。对于Web相关的证书签名的验证，则是由浏览器来验证，对于国际公认的几个证书签发机构浏览器会内置其公钥证书，用来验证数字证书的可信性。</p>\n<p>当数字证书通过验证后，便可以用数字证书做对应的事情，iOS开发证书可以用来对APP进行签名，SSL证书可以用来做Web内容加密处理相关的事情。所以有了这些证书之后，能保证在数据的传输过程中，数据是不会被篡改的，并且信息来源也是不能不修改的，从而确保信息安全。</p>\n<blockquote>\n<p>对于iOS，iOS系统已经将这个验证过程固化在系统中了，除非越狱，否则无法绕过</p>\n</blockquote>\n<h3 id=\"4-数字证书的授权链\"><a href=\"#4-数字证书的授权链\" class=\"headerlink\" title=\"4.数字证书的授权链\"></a>4.数字证书的授权链</h3><p>数字证书还包含一个授权链信息，举个例子：如果你要申请休假1周，需要你的上司审批，你的上司需要他的上司同意，最终需要大老板同意，那么这一层层的授权，形成了一个授权链，大老板是授权链的根(root)，中间这些环节分别是被更接近root的人授权的。</p>\n<p>比如苹果开发者的APP签名证书，该证书可以用来对APP进行签名，该证书实际上是由苹果的Worldwide Developer Relations Certificate Authority(WDRCA)授权签名的，而它是由Apple Certificate Authority授权签名的。在这个关系链中苹果的CA是根。 苹果CA根证书默认是内置在苹果系统中的，所以WDRCA的可信性可以由苹果内置的CA根证书来验证其可信性。</p>\n<p>Web相关的SSL证书顶部CA根，则就是上述提到的几家公认的签发机构，当我们需要Web做SSL的证书时，便可以向上述机构申请，通常向根机构申请费用都会比较高，也可以向一些二级授权机构进行申请，选择根机构证书签发的好处就是目前大多数的浏览器都会预装内置了这些权威CA的公钥证书，这样，在使用这些权威CA签发过的证书的时候，浏览器一般不会报风险提示。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>数字证书签名的基础是非对称加密算法，利用了非对称加密的身份验证和防止信息篡改的特性来实现的，在一些其他方面比如HTTPS中密钥交换用的就是非对称加密的保密特性来实现的，在非对称加密算法中RSA应用最广。非对称加密虽好，但却有一个弊端，就是加解密比较耗时，所以一般都是配合对称加密一起使用。</p>\n","excerpt":"","more":"<blockquote>\n<p>在为了更好地理解其中证书的特性，这里对数字证书以及相关的知识进行了整理和总结。</p>\n</blockquote>\n<p>在讲数字证书之前必须要讲<b>非对称加密算法</b>和<b>摘要算法</b>，因为数字证书的基础就是各种加解密算法(非对称加密、<br>摘要算法)，而其中的核心就是非对称加密算法了。目前而言加密方法可以分为两大类，一类是<b>单钥加密</b><br>(private key cryptography)也可以称为对称加密，还有一类叫做双钥加密(public key cryptography)也可以称为非对称加密。<br>前者的加密和解密过程都用同一套密码，后者的加密和解密过程用的是不同的密码。</p>\n<h1 id=\"加密算法\"><a href=\"#加密算法\" class=\"headerlink\" title=\"加密算法\"></a>加密算法</h1><h3 id=\"1-对称加密\"><a href=\"#1-对称加密\" class=\"headerlink\" title=\"1.对称加密\"></a>1.对称加密</h3><p>对称加密(也叫私钥加密)指加密和解密使用相同密钥的加密算法。有时又叫传统密码算法，就是加密密钥能够从解密密钥中推算出来，<br>同时解密密钥也可以从加密密钥中推算出来。而在大多数的对称算法中，加密密钥和解密密钥是相同的，所以也称这种加密算法为秘密<br>密钥算法或单密钥算法。   </p>\n<p>在应用该算法时，它要求发送方和接收方在安全通信之前，商定一个密钥。对称算法的安全性依赖于密钥，泄漏密钥就意味着任何人都<br>可以对他们发送或接收的消息解密，所以密钥的保密性对通信性至关重要。对称加密算法的特点是算法公开、计算量小、加密速度快、<br>加密效率高。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。不足之处是，交易双方都使用同<br>样钥匙，安全性得不到保证。   </p>\n<h3 id=\"2-常见的对称加密算法\"><a href=\"#2-常见的对称加密算法\" class=\"headerlink\" title=\"2.常见的对称加密算法\"></a>2.常见的对称加密算法</h3><ul>\n<li><p>DES：数据加密标准(DES，Data Encryption Standard)是一种使用密钥加密的块密码，它基于使用56位密钥的对称算法，这个<br>算法因为包含一些机密设计元素，相对短的密钥长度以及被怀疑内含美国国家安全局(NSA)的后门而在开始时是有争议的，DES现在<br>已经不被视为一种安全的加密算法，主要因为它使用的56位密钥过短，导致容易被破解。为了提供实用所需的安全性，可以使用DES的<br>派生算法3DES来进行加密，虽然3DES也存在理论上的攻击方法。</p>\n</li>\n<li><p>AES：高级加密标准(英语：Advanced Encryption Standard，缩写：AES)，这个标准用来替代原先的DES，已经被多方分析<br>且广为全世界所使用，2006年，高级加密标准已然成为对称密钥加密中最流行的算法之一。AES的区块长度固定为128比特，密钥<br>长度则可以是128，192或256比特。</p>\n</li>\n<li><p>RC4：RC4加密算法是大名鼎鼎的RSA三人组中的头号人物Ronald Rivest在1987年设计的密钥长度可变的流加密算法簇。该算法<br>的速度可以达到DES加密的10倍左右，且具有很高级别的非线性。RC4起初是用于保护商业机密的。但是在1994年9月，它的算法被<br>发布在互联网上，也就不再有什么商业机密了。</p>\n</li>\n<li><p>是旅居瑞士中国青年学者来学嘉和著名密码专家J.Massey于1990年提出的。它在1990年正式公布并在以后得到增强。这种算法是<br>在DES算法的基础上发展出来的，类似于三重DES，和DES一样IDEA也是属于对称密钥算法。发展IDEA也是因为感到DES具有密钥太短<br>等缺点，已经过时。IDEA的密钥为128位，这么长的密钥在今后若干年内应该是安全的。</p>\n</li>\n</ul>\n<h3 id=\"3-非对称加密\"><a href=\"#3-非对称加密\" class=\"headerlink\" title=\"3.非对称加密\"></a>3.非对称加密</h3><p>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥(publickey)和私有密钥(privatekey)；并且加密密钥和解密密钥<br>是成对出现的。非对称加密算法在加密和解密过程使用了不同的密钥，非对称加密也称为公钥加密，在密钥对中，其中一个密钥是对外公开的，<br>所有人都可以获取到，称为公钥，其中一个密钥是不公开的称为私钥。</p>\n<h3 id=\"4-非对称加密的特性\"><a href=\"#4-非对称加密的特性\" class=\"headerlink\" title=\"4.非对称加密的特性\"></a>4.非对称加密的特性</h3><ul>\n<li><p>对于一个公钥，有且只有一个对应的私钥。</p>\n</li>\n<li><p>公钥是公开的，并且不能通过公钥反推出私钥。</p>\n</li>\n<li><p>通过私钥加密的密文只能通过公钥能解密，通过公钥加密的密文也只能通过私钥能解密。</p>\n</li>\n</ul>\n<blockquote>\n<p>通过公钥是极难推算出私钥的，只能通过穷举，所以只要密钥足够长，要想从公钥推算出私钥几乎不可能的。</p>\n</blockquote>\n<h3 id=\"5-非对称加密的主要用途\"><a href=\"#5-非对称加密的主要用途\" class=\"headerlink\" title=\"5.非对称加密的主要用途\"></a>5.非对称加密的主要用途</h3><p>对信息保密，防止中间人攻击：将明文使用公钥加密，传输给接收者，这样确保信息只能被有私钥的拥有者解密，其他人无法获得明文信息，<br>因为没有私钥无法进行解密。该方法一般用于交换对称密钥。身份验证和防止信息篡改：私钥拥有者使用私钥加密一段授权明文，并将授权<br>明文和加密后的密文，以及公钥一并发送出来，接收方只需要通过公钥将密文解密后与授权明文对比是否一致，就可以判断明文在中途是否<br>被篡改过。此方法用于数字签名。</p>\n<h3 id=\"6-常见的非对称加密算法\"><a href=\"#6-常见的非对称加密算法\" class=\"headerlink\" title=\"6.常见的非对称加密算法\"></a>6.常见的非对称加密算法</h3><ul>\n<li><p>RSA：1977年，三位数学家Rivest、Shamir 和 Adleman 设计了一种算法，可以实现非对称加密。这种算法用他们三个人的名字命名，叫做RSA算法。<br>从那时直到现在，RSA算法一直是最广为使用的”非对称加密算法”。毫不夸张地说，只要有计算机网络的地方，就有RSA算法。这种算法非常可靠，<br>密钥越长，它就越难破解。根据已经披露的文献，目前被破解的最长RSA密钥是768个二进制位。也就是说，长度超过768位的密钥，还无法破解(至少没人公开宣布)。<br>因此可以认为，1024位的RSA密钥基本安全，2048位的密钥极其安全。适用于数字签名和密钥交换。 该算法是目前应用最广泛的公钥加密算法，特别适用于通过 Internet 传送的数据。</p>\n</li>\n<li><p>DSA：数字签名算法 (Digital Signature Algorithm, DSA) 由美国国家安全署 (United States National Security Agency, NSA) 发明，<br>已作为数字签名的标准。在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性。DSA只是一种算法，<br>和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名，它比RSA要快很多。DSA 算法的安全性取决于自计算离散算法的困难。这种算法，不适用于数据加密，<br>仅适用于数字签名。</p>\n</li>\n<li><p>Diffie-Hellman：一种确保共享KEY安全穿越不安全网络的方法。Whitefield与Martin Hellman在1976年提出了一个奇妙的密钥交换协议，<br>称为Diffie-Hellman密钥交换协议/算法(Diffie-Hellman Key Exchange/Agreement Algorithm)。这个机制的巧妙在于需要安全通信的双方可以用这个方法确定对称密钥。<br>然后可以用这个密钥进行加密和解密。但是注意，这个密钥交换协议/算法只能用于密钥的交换，而不能进行消息的加密和解密。双方确定要用的密钥后，要使用其他对称密钥操作<br>加密算法实际加密和解密消息。该算法仅适用于密钥交换。</p>\n</li>\n<li><p>ECC：椭圆加密算法(ECC)是一种公钥加密体制，最初由Koblitz和Miller两人于1985年提出，与经典的RSA，DSA等公钥密码体制相比，<br>椭圆密码体制有以下优点：160位的椭圆密钥与1024位的RSA密钥安全性相同；在私钥的加密解密速度上，ECC算法比RSA、DSA速度更快；存储空间占用小；带宽要求低；<br>ECC算法的数学理论非常深奥和复杂，在工程应用中比较难于实现，但它的单位安全强度相对较高。</p>\n</li>\n</ul>\n<p>非对称加密算法可能是世界上最重要的算法，它是当今电子商务等领域的基石。非对称加密算法如此强大可靠，却有一个弊端，就是加解密比较耗时。<br>因此，在实际使用中，往往与对称加密和摘要算法结合使用。列如在实体之间交换对称密钥时，或者在签署一封邮件的散列时(数字签名)。</p>\n<blockquote>\n<p>散列是通过应用一种单向数学函数获得的一个定长结果，对于数据而言，叫做散列算法。</p>\n</blockquote>\n<h3 id=\"7-摘要算法\"><a href=\"#7-摘要算法\" class=\"headerlink\" title=\"7.摘要算法\"></a>7.摘要算法</h3><p>摘要算法是一个神奇的算法，也称为散列或者散列值。是一种与基于密钥(对称密钥或公钥)的加密不同的数据转换类型。散列就是通过把一个叫做散列算法的单向数学函数应用于数据，将任意长度的一块数据转换为一个定长的、不可逆转的数字，其长度通常在128～256位之间。所产生的散列值的长度应足够长，因此使找到两块具有相同散列值的数据的机会很少。</p>\n<h3 id=\"8-摘要算法具有以下特性：\"><a href=\"#8-摘要算法具有以下特性：\" class=\"headerlink\" title=\"8.摘要算法具有以下特性：\"></a>8.摘要算法具有以下特性：</h3><ul>\n<li><p>只要源文本不同，计算得到的结果，必然不同(或者说机会很少)。</p>\n</li>\n<li><p>无法从结果反推出源数据(那是当然的，不然就能量不守恒了)。</p>\n</li>\n</ul>\n<h3 id=\"9-常见的摘要算法：\"><a href=\"#9-常见的摘要算法：\" class=\"headerlink\" title=\"9.常见的摘要算法：\"></a>9.常见的摘要算法：</h3><ul>\n<li><p>MD5：是RSA数据安全公司开发的一种单向散列算法，MD5被广泛使用，可以用来把不同长度的数据块进行暗码运算成一个固定位位的数值(通常是128位)。</p>\n</li>\n<li><p>SHA-1：与 DSA 公钥算法相似，安全散列算法1(SHA-1)也是由 NSA 设计的，并由 NIST 将其收录到 FIPS 中，作为散列数据的标准。它可产生一个 160 位的散列值。SHA-1 是流行的用于创建数字签名的单向散列算法。</p>\n</li>\n<li><p>MAC(Message Authentication Code)：消息认证代码，是一种使用密钥的单向函数，可以用它们在系统上或用户之间认证文件或消息，常见的是HMAC(用于消息认证的密钥散列算法)。</p>\n</li>\n<li><p>CRC(Cyclic Redundancy Check)：循环冗余校验码，CRC校验由于实现简单，检错能力强，被广泛使用在各种数据校验应用中。占用系统资源少，用软硬件均能实现，是进行数据传输差错检测地一种很好的手段(CRC 并不是严格意义上的散列算法，但它的作用与散列算法大致相同，所以归于此类)。</p>\n</li>\n</ul>\n<p>摘要算法用于对比信息源是否一致，因为只要源数据发生变化，得到的摘要必然不同。因为通常结果比源数据要短很多，所以称为“摘要”。</p>\n<p>应用场景，如发件人生成邮件的散列值并加密它，然后将它与邮件本身一起发送。而收件人同时解密邮件和散列值，并由接收到的邮件产生另外一个散列值，然后将两个散列值进行比较。如果两者相同，邮件极有可能在传输期间没有发生任何改变。</p>\n<h3 id=\"10-数字签名\"><a href=\"#10-数字签名\" class=\"headerlink\" title=\"10.数字签名\"></a>10.数字签名</h3><p>数字签名就是对非对称加密和摘要算法的一种应用，能够确保信息在发布后不会被篡改(摘要算法特性)，保证数据的完整性和可信性；同时也可以防止数据被他人伪造(非对称加密算法特性)；列如，我们有一段授权文本需要发布时，为了防止中途篡改发布的内容，保证发布文本的完整性，以及文本是由指定的发布者发布的。那么，可以通过摘要算法得到发布内容的摘要，得到摘要之后，发布者使用私钥加密得到密文(签名)，这时候将源文本、密文(签名)以及公钥一起发布出去即可。</p>\n<p>验证过程为：首先验证公钥是否是发布者的公钥，然后用公钥对密文进行解密，得到摘要，使用发布者对文本同样的摘要算法得到摘要文本，比对摘要是否一致即可确认信息是否被篡改或者是指定发布者发布的。</p>\n<h1 id=\"数字证书\"><a href=\"#数字证书\" class=\"headerlink\" title=\"数字证书\"></a>数字证书</h1><h3 id=\"1-现实生活中的证书\"><a href=\"#1-现实生活中的证书\" class=\"headerlink\" title=\"1.现实生活中的证书\"></a>1.现实生活中的证书</h3><p>在现实生活中，证书顾名思义，就是权限机构颁发的证明。比如英语6级证书，就是教育部门颁发给通过了6级考核的个人的证明，证明这个人的英语能力。我们来看一下这个证书的组成：</p>\n<ul>\n<li><p>被证明人：老王</p>\n</li>\n<li><p>内容：通过了英语六级</p>\n</li>\n<li><p>盖章：教育部门的公章或钢印</p>\n</li>\n</ul>\n<p>当老王用这张证书找工作时，用人单位会通过查看证书的各项内容(尤其是公章)，来验证证书的合法性和老王的能力。在现实生活中经常有假的6级证书，这些假证书最重要的就是有一个假公章。现实生活中使用法律法规来约束私刻假公章的行为，但是用人单位可能不能十分准确的判断公章是真是假。而数字签字可以来解决该类问题。</p>\n<h2 id=\"2-数字证书\"><a href=\"#2-数字证书\" class=\"headerlink\" title=\"2.数字证书\"></a>2.数字证书</h2><p>数字证书就是通过数字签名实现的数字化的证书，在现实生活中公章可以被伪造，但是在计算数字世界中，数字签名是没办法被伪造的，比如上述证书中，在一个证书文件中写明了证书内容，颁发证书时，教育部门用他们的私钥对文件的摘要信息进行签名，将签名和证书文件一起发布，这样就能确保该证书无法被伪造。验证证书是否合法时，首先用教育部门的公钥(公钥是公开的谁都可以获取到)对签名进行解密得到一个摘要信息，使用教育部门同样的摘要算法得到证书的另一个摘要信息，对比两个摘要信息是否一致就能确定该证书是否合法。在一般的证书组成中部分中，还加入了一些其他信息，比如证书的有效期。</p>\n<p>数字证书也有很多的签发机构，不同的签发机构签发的证书，用途也是不一样的，比如iOS开发中，使用到的ipa文件签名证书，需要到苹果申请。而在Web访问中为了防止Web内容在网络中安全传输，需要用到的SSL证书则需要向几家公认的机构签发。这些签发机构统称为CA(Certificate Authority)。</p>\n<p>Web访问相关的证书可以向国际公认的几个机构：</p>\n<ul>\n<li><p>WebTrust</p>\n</li>\n<li><p>GlobalSign</p>\n</li>\n<li><p>GTE</p>\n</li>\n<li><p>Nortel</p>\n</li>\n<li><p>Verisign</p>\n</li>\n</ul>\n<h3 id=\"3-数字证书的验证\"><a href=\"#3-数字证书的验证\" class=\"headerlink\" title=\"3.数字证书的验证\"></a>3.数字证书的验证</h3><p>申请证书是为了验证，比如Web应用相关的SSL证书验证方是浏览器，iOS各种证书的验证方是iOS设备。因为数字证书是基于数字签名的，所有数字证书的合法性验证就是验证数字证书的签名是否正确，对于签名的验证在是需要签发机构的公钥才能验证；</p>\n<p>对于iOS开发证书来说，申请完签名证书后，还需要安装苹果的公钥证书(XCode安装后会自动安装)，这样才能确保我们申请的证书是可以被验证通过的(合法的)，可用来进行ipa文件签名的。对于Web相关的证书签名的验证，则是由浏览器来验证，对于国际公认的几个证书签发机构浏览器会内置其公钥证书，用来验证数字证书的可信性。</p>\n<p>当数字证书通过验证后，便可以用数字证书做对应的事情，iOS开发证书可以用来对APP进行签名，SSL证书可以用来做Web内容加密处理相关的事情。所以有了这些证书之后，能保证在数据的传输过程中，数据是不会被篡改的，并且信息来源也是不能不修改的，从而确保信息安全。</p>\n<blockquote>\n<p>对于iOS，iOS系统已经将这个验证过程固化在系统中了，除非越狱，否则无法绕过</p>\n</blockquote>\n<h3 id=\"4-数字证书的授权链\"><a href=\"#4-数字证书的授权链\" class=\"headerlink\" title=\"4.数字证书的授权链\"></a>4.数字证书的授权链</h3><p>数字证书还包含一个授权链信息，举个例子：如果你要申请休假1周，需要你的上司审批，你的上司需要他的上司同意，最终需要大老板同意，那么这一层层的授权，形成了一个授权链，大老板是授权链的根(root)，中间这些环节分别是被更接近root的人授权的。</p>\n<p>比如苹果开发者的APP签名证书，该证书可以用来对APP进行签名，该证书实际上是由苹果的Worldwide Developer Relations Certificate Authority(WDRCA)授权签名的，而它是由Apple Certificate Authority授权签名的。在这个关系链中苹果的CA是根。 苹果CA根证书默认是内置在苹果系统中的，所以WDRCA的可信性可以由苹果内置的CA根证书来验证其可信性。</p>\n<p>Web相关的SSL证书顶部CA根，则就是上述提到的几家公认的签发机构，当我们需要Web做SSL的证书时，便可以向上述机构申请，通常向根机构申请费用都会比较高，也可以向一些二级授权机构进行申请，选择根机构证书签发的好处就是目前大多数的浏览器都会预装内置了这些权威CA的公钥证书，这样，在使用这些权威CA签发过的证书的时候，浏览器一般不会报风险提示。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>数字证书签名的基础是非对称加密算法，利用了非对称加密的身份验证和防止信息篡改的特性来实现的，在一些其他方面比如HTTPS中密钥交换用的就是非对称加密的保密特性来实现的，在非对称加密算法中RSA应用最广。非对称加密虽好，但却有一个弊端，就是加解密比较耗时，所以一般都是配合对称加密一起使用。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj5dsx9n500007yslydwx7ub6","tag_id":"cj5dsx9nc00037yslurkt3n4k","_id":"cj5dsx9nl00087yslua83cu2m"},{"post_id":"cj5dsx9nl00097ysl7pwwdol8","tag_id":"cj5dsx9nk00077yslezdbr76g","_id":"cj5dsx9nn000c7yslc2x8g59f"},{"post_id":"cj5dsx9na00027ysljoaevwk0","tag_id":"cj5dsx9nk00077yslezdbr76g","_id":"cj5dsx9no000e7yslisbabh45"},{"post_id":"cj5dsx9nf00047ysl31mlwayp","tag_id":"cj5dsx9nn000b7ysltv119day","_id":"cj5dsx9ns000i7yslvgbsv986"},{"post_id":"cj5dsx9ni00057yslq6pwcep5","tag_id":"cj5dsx9nn000b7ysltv119day","_id":"cj5dsx9nv000m7ysl3m9dxr7c"},{"post_id":"cj5dsx9nk00067yslgh2to2oi","tag_id":"cj5dsx9nn000b7ysltv119day","_id":"cj5dsx9ny000q7yslqxud6byv"},{"post_id":"cj5dsx9nm000a7ysltbtyp3k4","tag_id":"cj5dsx9nw000o7ysli7m3enw2","_id":"cj5dsx9o1000u7ysllytmrxxg"},{"post_id":"cj5dsx9nn000d7ysloqba5x2r","tag_id":"cj5dsx9nz000s7ysl1y00yk9r","_id":"cj5dsx9o4000y7yslwiphxome"},{"post_id":"cj5dsx9np000f7ysl1k5pjl9a","tag_id":"cj5dsx9nw000o7ysli7m3enw2","_id":"cj5dsx9o600107ysl8c1olm7i"},{"post_id":"cj5dsx9nr000h7ysltu0wpmpv","tag_id":"cj5dsx9nw000o7ysli7m3enw2","_id":"cj5dsx9o900127ysl33xsde7e"},{"post_id":"cj5dsx9ns000j7yslc2sxganj","tag_id":"cj5dsx9o800117ysl89lw2slo","_id":"cj5dsx9oa00147ysle5pdnxe9"},{"post_id":"cj5dsx9nv000n7ysl64ze47xi","tag_id":"cj5dsx9oa00137yslokm3xoq4","_id":"cj5dsx9oa00167ysl88am1htl"},{"post_id":"cj5dsx9nw000p7yslrd7wmhlw","tag_id":"cj5dsx9oa00157ysl65jy2s6c","_id":"cj5dsx9ob00187yslw49kh7jf"},{"post_id":"cj5dsx9ny000r7ysltx7kfu69","tag_id":"cj5dsx9ob00177ysl3pi3ibql","_id":"cj5dsx9od001a7yslgl50q53c"},{"post_id":"cj5dsx9nz000t7ysl97dcif7f","tag_id":"cj5dsx9oc00197yslgtm9hz90","_id":"cj5dsx9od001c7ysl9l57zgso"},{"post_id":"cj5dsx9o1000v7ysl01sd4tjm","tag_id":"cj5dsx9od001b7yslzjby7a3h","_id":"cj5dsx9oe001e7yslrto97ali"},{"post_id":"cj5dsx9o2000w7ysl26234jkm","tag_id":"cj5dsx9oe001d7yslslb5yqxw","_id":"cj5dsx9of001f7yslcllcerii"}],"Tag":[{"name":"设计模式","_id":"cj5dsx9nc00037yslurkt3n4k"},{"name":"Hexo | Blog","_id":"cj5dsx9nk00077yslezdbr76g"},{"name":"JavaScript","_id":"cj5dsx9nn000b7ysltv119day"},{"name":"信息系统管理与安全","_id":"cj5dsx9nw000o7ysli7m3enw2"},{"name":"SSL/TLS","_id":"cj5dsx9nz000s7ysl1y00yk9r"},{"name":"javascript | array | method","_id":"cj5dsx9o800117ysl89lw2slo"},{"name":"javascript","_id":"cj5dsx9oa00137yslokm3xoq4"},{"name":"Google搜索引擎技巧","_id":"cj5dsx9oa00157ysl65jy2s6c"},{"name":"svg | viewport | view box","_id":"cj5dsx9ob00177ysl3pi3ibql"},{"name":"算法 | 动态规划 | Node","_id":"cj5dsx9oc00197yslgtm9hz90"},{"name":"team work | git","_id":"cj5dsx9od001b7yslzjby7a3h"},{"name":"数字证书","_id":"cj5dsx9oe001d7yslslb5yqxw"}]}}